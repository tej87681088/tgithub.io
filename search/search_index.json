{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TQuant-Lab","text":"<p>\u4f7f\u7528\u6587\u4ef6\u3001\u7a0b\u5f0f\u7bc4\u4f8b\uff0c\u95b1\u8b80\u5b8c\u6240\u6709\u6559\u6750\u8207\u7bc4\u4f8b\u5f8c\uff0c\u60a8\u5c07\u6703\u5177\u5099\u4f7f\u7528 TQuant Lab \u57f7\u884c\u591a\u6578\u4ea4\u6613\u7b56\u7565\u7684\u80fd\u529b\u3002\u70ba\u4e86\u66f4\u4f73\u7684\u95b1\u8b80\u9ad4\u9a57\uff0c\u5efa\u8b70\u60a8\u4ee5\u4e0b\u8f09\u65b9\u5f0f\u95b1\u8b80\u6559\u6750\u6216\u7b56\u7565\u3002</p>"},{"location":"#lecture","title":"\u64cd\u4f5c\u6559\u6750 (Lecture)","text":"<ul> <li>Install TQuant Lab: \u5b89\u88dd TQuant lab\u3001\u6aa2\u67e5\u7248\u672c\u8207\u5347\u7d1a\u3002</li> <li>Data collection: \u80a1\u7968\u50f9\u91cf\uff08!zipline ingest -b tquant\uff09\u8207\u975e\u50f9\u91cf\u8cc7\u6599\uff08!zipline ingest -b fundamentals\uff09\u7684\u4e0b\u8f09\u65b9\u6cd5\u3002</li> <li>get_universe\u8aaa\u660e: \u53d6\u5f97\u7279\u5b9a\u7684\u80a1\u7968\u6c60\u3002</li> <li>Universe Analysis\uff0dusing get_universe: \u5206\u6790\u80a1\u7968\u6c60\u7684\u7522\u696d\u5206\u5e03\u8207\u6210\u4ea4\u91d1\u984d\u3002</li> <li>TSMC buy and hold strategy: \u4ee5\u8cb7\u9032\u6301\u6709\u7b56\u7565\u793a\u7bc4 zipline \u56de\u6e2c\u67b6\u69cb\u8207\u56db\u5927\u57fa\u790e\u51fd\u5f0f initialize, handle_data, analyze \u8207 run_algorithm\u3002</li> <li>Simple Algorithm-TargetPercentPipeAlgo: \u5229\u7528pipeline\u63d0\u4f9b\u7684\u8cb7\u8ce3\u6e05\u55ae\u8207\u6301\u80a1\u6b0a\u91cd\u9032\u884c\u5b9a\u671f\u518d\u5e73\u8861\u7684\u6f14\u7b97\u6cd5\u3002</li> <li>Zipline context: context \u529f\u80fd\u4ecb\u7d39\u3002</li> <li>Zipline order (order &amp; order_target): \u4e0b\u55ae\u65b9\u6cd5\u4ecb\u7d39(\u4e00)</li> <li>Zipline order (value &amp; target_value): \u4e0b\u55ae\u65b9\u6cd5\u4ecb\u7d39(\u4e8c)</li> <li>Zipline order (percent &amp; target_percent): \u4e0b\u55ae\u65b9\u6cd5\u4ecb\u7d39(\u4e09)</li> <li>Zipline slippage: \u6ed1\u50f9\u8a2d\u7f6e\u65b9\u6cd5\u4ecb\u7d39\u3002</li> <li>Zipline trading control: \u4e0b\u55ae\u9650\u5236\u8a2d\u5b9a\u3002</li> <li>Zipline commission models: \u624b\u7e8c\u8cbb\u8a2d\u5b9a\u3002</li> <li>Zipline cancel order: \u4ea4\u6613\u53d6\u6d88\u8a2d\u5b9a\u3002</li> <li>Creating a pipeline: \u5efa\u7acb pipeline \u6559\u5b78\u3002</li> <li>Factor: \u4ecb\u7d39\u56e0\u5b50\u4f7f\u7528\u65b9\u6cd5\u3002</li> <li>Filter: \u4ecb\u7d39\u6ffe\u7db2\u4f7f\u7528\u65b9\u6cd5\u3002</li> <li>Masking: \u4ecb\u7d39\u906e\u7db2\u4f7f\u7528\u65b9\u6cd5\u3002 </li> <li>Custom Factor: \u5ba2\u88fd\u5316\u56e0\u5b50\u3002</li> <li>Pipeline built-in factor: \u5167\u5efa\u7684\u56e0\u5b50\u3002</li> <li>Pipeline built-in classifier: \u5167\u5efa\u7684\u5206\u985e\u5668\u3002</li> <li>Pipeline built-in filter: \u5167\u5efa\u7684\u6ffe\u7db2\u3002</li> <li>TejToolAPI: TejToolAPI \u4ecb\u7d39\u3002</li> <li>TejToolAPI(Extended): TejToolAPI \u5ef6\u4f38\u6559\u5b78\u3002</li> <li>Pipeline example: \u4ecb\u7d39 Pipeline \u65bc\u4ea4\u6613\u7b56\u7565\u4f7f\u7528\u65b9\u6cd5\u8207 before_trading_start \u53ca schedule_function \u51fd\u5f0f\u3002</li> <li>Pyfolio: \u4ea4\u6613\u7b56\u7565\u7e3e\u6548\u8207\u98a8\u96aa\u8996\u89ba\u5316\u3002</li> <li>Alphalens: \u56e0\u5b50\u7814\u7a76\u3002</li> </ul>"},{"location":"#example","title":"\u7b56\u7565\u7bc4\u4f8b (Example)","text":"<ul> <li>TQ_ETF\u8cc7\u7522\u914d\u7f6e\u6a21\u578b</li> <li>TQ_KD\u6307\u6a19\u56de\u6e2c\u5be6\u6230</li> <li>TQ_MACD\u4ea4\u6613\u7b56\u7565</li> <li>TQ_\u4e56\u96e2\u7387\u7b56\u7565</li> <li>TQ_\u52d5\u91cf\u7b56\u7565</li> <li>TQ_\u5c0b\u627eAlpha</li> <li>TQ_\u5e03\u6797\u901a\u9053\u4ea4\u6613\u7b56\u7565</li> <li>TQ_\u5ef6\u4f38\u91cf\u80fd\u56de\u6e2c\u7b56\u7565</li> <li>TQ_\u8da8\u52e2\u8ddf\u8e64\u7b56\u7565</li> <li>TQ_\u8ddf\u96a8\u5927\u6236\u7b56\u7565</li> <li>TQ_\u9006\u52e2\u4ea4\u6613\u7b56\u7565</li> <li>TQ_\u91cf\u80fd\u56de\u6e2c\u5be6\u6230</li> <li>TQ_\u9577\u671f\u8da8\u52e2\u7b56\u7565</li> <li>TQ_\u6708\u71df\u6536\u6210\u9577\u7387\u7b56\u7565</li> <li>TQ_\u6708\u71df\u6536\u6210\u9577\u7387\u7b56\u7565_simple_algo</li> <li>TQ_\u963f\u9686\u6307\u6a19\u4ea4\u6613\u7b56\u7565</li> </ul>"},{"location":"#problem","title":"\u554f\u984c\u96c6 (problem)","text":"<ul> <li>NotSessionError</li> <li>QA_\u4e0d\u958b\u69d3\u687f\u8a2d\u5b9a</li> <li>QA_\u8655\u7406\u81ea\u5efa\u56e0\u5b50</li> <li>QA_\u56e0\u5b50\u51fa\u73fe Bin edges must be unique array nan \u554f\u984c</li> <li>TEjToolAPI \u6b04\u4f4d\u8cc7\u8a0a</li> </ul>"},{"location":"lecture/Data%20collection%20%283%29/","title":"Data Collection","text":"<p>\u672c\u8ab2\u7a0b\u5be6\u4f5c\u5982\u4f55\u5c07\u8cc7\u6599\uff08\u5982\u50f9\u91cf\u3001\u57fa\u672c\u9762\u3001\u7c4c\u78bc\u9762...\u7b49\uff09ingest \u5230 zipline \u56de\u6e2c\u5f15\u64ce\u4e2d\u3002</p> <p>\u900f\u904e\u9019\u500b\u52d5\u4f5c\uff0c\u5f8c\u7e8c\u4f7f\u7528 Pipeline API \u6642\uff0c\u5c31\u53ef\u4ee5\u5f88\u6709\u6548\u7387\u5730\u7372\u53d6\u8cc7\u6599\u4e26\u8a08\u7b97\u56e0\u5b50\u3002</p>"},{"location":"lecture/Data%20collection%20%283%29/#_1","title":"\u8f09\u5165\u6240\u9700\u5957\u4ef6","text":"<pre><code>import os\nimport pandas as pd\nimport numpy as np\n</code></pre>"},{"location":"lecture/Data%20collection%20%283%29/#bundle","title":"Bundle\u8a2d\u7f6e","text":"<p>\u4ecb\u7d39\u74b0\u5883\u8b8a\u6578\uff08environ\uff09\u8a2d\u5b9a\u3001\u904b\u7528\u8a2d\u5b9a\u7684\u74b0\u5883\u8b8a\u6578\u505a\u50f9\u91cf\u3001\u975e\u50f9\u91cf\u8cc7\u6599\u7684 bundle\u3002</p> <ul> <li>\u5728 import zipline \u524d\uff0c\u5fc5\u9808\u5148\u8a2d\u5b9a <code>TEJAPI_BASE</code> \u8207 <code>TEJAPI_KEY</code>\u3002</li> </ul>"},{"location":"lecture/Data%20collection%20%283%29/#osenviron","title":"os.environ \u8b8a\u6578\u8a2d\u5b9a:","text":"<p>\u8a2d\u7f6e\u50f9\u91cf\u8cc7\u6599 bundle\uff08tquant bundle\uff09\u9700\u8981\u7684\u8cc7\u8a0a\uff1a * os.environ['TEJAPI_BASE'] = \"https://api.tej.com.tw\"          \u7528\u65bc\u9023\u7d50TEJ\u8cc7\u6599\u5eab</p> <ul> <li>os.environ['TEJAPI_KEY'] = \"Your_Key\"         \u7528\u65bc\u8b58\u5225\u4f7f\u7528\u8005</li> <li>os.environ['ticker']         tickers = 'xxxx xxxx xxxx'         os.environ['ticker'] = tickers          \u8a2d\u7f6e\u6211\u5011\u6240\u9700\u8981\u7684\u80a1\u7968\u4ee3\u78bc  </li> <li>os.environ['mdate'] = 'yyyymmdd yyyymmdd'         \u8a2d\u7f6e\u53d6\u5f97\u8cc7\u6599\u7684\u8d77\u59cb\u6642\u9593\u8207\u7d50\u675f\u6642\u9593</li> <li>!zipline ingest -b tquant         \u5c07\u4e0a\u65b9\u8cc7\u6599 ingest \u9032 bundle\u3002</li> </ul> <p>\u8a2d\u7f6e\u975e\u50f9\u91cf\u8cc7\u6599 bundle\uff08fundamentals bundle\uff09\u9700\u8981\u7684\u8cc7\u8a0a\uff1a * os.environ['fields'] = 'field1, field2, field3'         \u8a2d\u7f6e\u6488\u53d6\u975e\u50f9\u91cf\u8cc7\u6599\u7684\u6b04\u4f4d\uff0c\u5176\u4e2d field1\u3001field2\u3001field3 \u4ee3\u8868\u8cc7\u6599\u6b04\u4f4d\u540d\u7a31  * os.environ['include_self_acc'] = 'N'(\u9810\u8a2d)         \u8a2d\u7f6e\u662f\u5426\u6db5\u84cb\u516c\u53f8\u81ea\u7d50\u8ca1\u52d9\uff0c\u5176\u4e2d\u8a2d\u5b9a'Y'\u4ee3\u8868\u8ca1\u52d9\u8cc7\u6599\u5305\u542b\u81ea\u7d50\u8ca1\u52d9\uff0c'N'\u5247\u8868\u793a\u4e0d\u5305\u542b</p> <ul> <li>!zipline ingest -b fundamentals         \u5c07\u975e\u50f9\u91cf\u8cc7\u6599 ingest \u9032 bundle\u3002</li> </ul>"},{"location":"lecture/Data%20collection%20%283%29/#_2","title":"\u50f9\u91cf\u8cc7\u6599","text":"<ul> <li>\u50f9\u91cf\u8cc7\u6599\u4fc2\u6307\u55ae\u7d14 OHLCV \u8207\u9664\u6b0a\u606f\u76f8\u95dc\u8cc7\u8a0a\u3002</li> </ul> <p>\u8f09\u5165\u6307\u5b9a\u80a1\u7968\u7684\u50f9\u91cf\u8cc7\u6599\uff0c\u5176\u4e2d IR0001 \u70ba\u53f0\u7063\u767c\u884c\u91cf\u52a0\u6b0a\u80a1\u50f9\u5831\u916c\u6307\u6578\u3002</p> <pre><code>tickers = 'IR0001 0050 0056 00737 1108 1101 1102 1103 6243 6451 1216 1301 1303 1326 1402 1476 1590 1605 1722 1802 2002 2105 2201 2207 2227 2301 2939 4108 4148 6431 6541 6657 2883 2891 2543 2929 2303 6505 9926 2308 2311 2317 2324 2325 2327 2330 2347 2353 2354 2357 2379 2382 2395 2408 2409 2412 2448 2454 2474 2492 2498 2603 2609 2615 2618 2633 2801 2823 2880 2881 2882 2883 2884 2885 2886 2887 2888 2890 2891 2892 2912 3008 3009 3034 3037 3045 3231 3474 3481 3673 3697 3711 4904 4938 5854 5871 5876 5880 6239 6415 6505 6669 6770 8046 8454 9904 9910'\nprint(\"\u7e3d\u5171\u6709 :\",len(tickers.split()),\"\u7b46\u8cc7\u6599\")\n</code></pre> <pre><code>\u7e3d\u5171\u6709 : 107 \u7b46\u8cc7\u6599\n</code></pre> <pre><code>os.environ[\"TEJAPI_BASE\"] = 'https://api.tej.com.tw'\nos.environ['TEJAPI_KEY'] = \"Your_Key\"\nos.environ['ticker'] = tickers\nos.environ['mdate'] = '20200103 20230530'\n\n!zipline ingest -b tquant\n</code></pre> <pre><code>Merging daily equity files:\nCurrently used TEJ API key call quota 306/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 7697102/9223372036854775807 (0.0%)\n\n\n[2024-03-13 03:06:53.092393] INFO: zipline.data.bundles.core: Ingesting tquant.\n[2024-03-13 03:07:03.377371] INFO: zipline.data.bundles.core: Ingest tquant successfully.\n</code></pre>"},{"location":"lecture/Data%20collection%20%283%29/#_3","title":"\u66f4\u65b0\u50f9\u91cf\u8cc7\u6599","text":"<p>\u900f\u904e\u8f38\u5165 <code>zipline update -b tquant</code> \u6307\u4ee4\uff0c\u53ef\u4ee5\u66f4\u65b0\u7576\u524d\u4f7f\u7528\u7684 tquant bundle\uff0c\u4ee5\u7372\u5f97\u6700\u65b0\u7684\u4ea4\u6613\u50f9\u683c\u548c\u4ea4\u6613\u91cf\u8cc7\u8a0a\u3002</p> <pre><code># \u57f7\u884c\u524d\n!zipline bundle-info\n</code></pre> <pre><code>tickers :\n0050 0056 00737 1101 1102 1103 1108 1216 1301 1303\n1326 1402 1476 1590 1605 1722 1802 2002 2105 2201\n2207 2227 2301 2303 2308 2317 2324 2327 2330 2347\n2353 2354 2357 2379 2382 2395 2408 2409 2412 2448\n2454 2474 2492 2498 2543 2603 2609 2615 2618 2633\n2801 2823 2880 2881 2882 2883 2884 2885 2886 2887\n2888 2890 2891 2892 2912 2929 2939 3008 3034 3037\n3045 3231 3481 3673 3711 4108 4148 4904 4938 5871\n5876 5880 6239 6243 6415 6431 6451 6505 6541 6669\n6770 8046 8454 9904 9910 9926 IR0001 \nstart_date : 20200103.\nend_date : 20230530.\n</code></pre> <pre><code>!zipline update -b tquant\n</code></pre> <pre><code>Merging daily equity files:\nCurrently used TEJ API key call quota 313/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 7845975/9223372036854775807 (0.0%)\n\n\n[2024-03-13 03:07:12.095439] INFO: zipline.data.bundles.core: Ingesting tquant.\n[2024-03-13 03:07:23.400641] INFO: zipline.data.bundles.core: Ingest tquant successfully.\n</code></pre> <pre><code># \u57f7\u884c\u5f8c\n!zipline bundle-info\n</code></pre> <pre><code>tickers :\n0050 0056 00737 1101 1102 1103 1108 1216 1301 1303\n1326 1402 1476 1590 1605 1722 1802 2002 2105 2201\n2207 2227 2301 2303 2308 2317 2324 2327 2330 2347\n2353 2354 2357 2379 2382 2395 2408 2409 2412 2448\n2454 2474 2492 2498 2543 2603 2609 2615 2618 2633\n2801 2823 2880 2881 2882 2883 2884 2885 2886 2887\n2888 2890 2891 2892 2912 2929 2939 3008 3034 3037\n3045 3231 3481 3673 3711 4108 4148 4904 4938 5871\n5876 5880 6239 6243 6415 6431 6451 6505 6541 6669\n6770 8046 8454 9904 9910 9926 IR0001 \nstart_date : 20200103.\nend_date : 20240312.\n</code></pre>"},{"location":"lecture/Data%20collection%20%283%29/#_4","title":"\u65b0\u589e\u50f9\u91cf\u8cc7\u6599","text":"<p>\u4f7f\u7528 <code>zipline add -t &lt;tickers_want_to_add&gt;</code> \u6307\u4ee4\uff0c\u53ef\u4ee5\u5411\u73fe\u6709\u7684 tquant bundle \u4e2d\u65b0\u589e\u6240\u9078\u7684\u80a1\u7968\u3002</p> <pre><code># \u57f7\u884c\u524d\n!zipline bundle-info\n</code></pre> <pre><code>tickers :\n0050 0056 00737 1101 1102 1103 1108 1216 1301 1303\n1326 1402 1476 1590 1605 1722 1802 2002 2105 2201\n2207 2227 2301 2303 2308 2317 2324 2327 2330 2347\n2353 2354 2357 2379 2382 2395 2408 2409 2412 2448\n2454 2474 2492 2498 2543 2603 2609 2615 2618 2633\n2801 2823 2880 2881 2882 2883 2884 2885 2886 2887\n2888 2890 2891 2892 2912 2929 2939 3008 3034 3037\n3045 3231 3481 3673 3711 4108 4148 4904 4938 5871\n5876 5880 6239 6243 6415 6431 6451 6505 6541 6669\n6770 8046 8454 9904 9910 9926 IR0001 \nstart_date : 20200103.\nend_date : 20240312.\n</code></pre> <pre><code>!zipline add -t \"6523 6208\"\n</code></pre> <pre><code>Merging daily equity files:\nCurrently used TEJ API key call quota 317/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 7848331/9223372036854775807 (0.0%)\n\n\n[2024-03-13 03:07:36.502363] INFO: zipline.data.bundles.core: Ingesting tquant.\n[2024-03-13 03:07:42.873940] INFO: zipline.data.bundles.core: Ingest tquant successfully.\n</code></pre> <pre><code># \u57f7\u884c\u5f8c\n!zipline bundle-info\n</code></pre> <pre><code>tickers :\n0050 0056 00737 1101 1102 1103 1108 1216 1301 1303\n1326 1402 1476 1590 1605 1722 1802 2002 2105 2201\n2207 2227 2301 2303 2308 2317 2324 2327 2330 2347\n2353 2354 2357 2379 2382 2395 2408 2409 2412 2448\n2454 2474 2492 2498 2543 2603 2609 2615 2618 2633\n2801 2823 2880 2881 2882 2883 2884 2885 2886 2887\n2888 2890 2891 2892 2912 2929 2939 3008 3034 3037\n3045 3231 3481 3673 3711 4108 4148 4904 4938 5871\n5876 5880 6208 6239 6243 6415 6431 6451 6505 6523\n6541 6669 6770 8046 8454 9904 9910 9926 IR0001 \nstart_date : 20200103.\nend_date : 20240312.\n</code></pre>"},{"location":"lecture/Data%20collection%20%283%29/#_5","title":"\u975e\u50f9\u91cf\u8cc7\u6599","text":"<ul> <li>\u6b04\u4f4d\u5c0d\u7167\u6e05\u55ae\u53ef\u53c3\u8003TQuant\u5b98\u65b9\u7db2\u7ad9\u6700\u4e0b\u65b9\u7684 TEJ TOOL API <code>\u6b04\u4f4d\u5c0d\u7167\u6e05\u55ae</code>\u3002</li> </ul> <p>\u8a2d\u5b9a\u5b8c <code>os.environ['fields']</code> \u5f8c\uff0c\u4fbf\u53ef\u4f7f\u7528 <code>!zipline ingest -b fundamentals</code> \u8f09\u5165\u6240\u9700\u8981\u7684\u975e\u50f9\u91cf\u8cc7\u6599\u3002</p> <pre><code>columns = ['Sales_Growth_Rate','Operating_Income_Growth_Rate', \n           'Pre_Tax_Income_Growth_Rate','Net_Income_Growth_Rate',\n           'Industry_Eng','Industry', 'roi', 'YoY_Monthly_Sales','mktcap']\n</code></pre> <pre><code>os.environ['fields'] = \" \".join(columns)\n!zipline ingest -b fundamentals\n</code></pre> <pre><code>Currently used TEJ API key call quota 345/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 8196374/9223372036854775807 (0.0%)\n\n\n[2024-03-13 03:07:50.805275] INFO: zipline.data.bundles.core: Ingesting fundamentals.\n[2024-03-13 03:08:32.858797] INFO: zipline.data.bundles.core: Ingest fundamentals successfully.\n</code></pre>"},{"location":"lecture/Data%20collection%20%283%29/#_6","title":"\u66f4\u65b0\u975e\u50f9\u91cf\u8cc7\u6599","text":"<p>\u900f\u904e\u8f38\u5165 <code>zipline update -b tquant</code> \u6307\u4ee4\uff0c\u53ef\u4ee5\u66f4\u65b0\u7576\u524d\u4f7f\u7528\u7684 fundamentals bundle\uff0c\u4ee5\u7372\u5f97\u6700\u65b0\u7684\u8cc7\u8a0a\u3002</p> <pre><code>## update \u524d\nfrom zipline.data.data_portal import get_fundamentals\ndf = get_fundamentals()\nprint('\u80a1\u7968\u6c60\u70ba:',df['symbol'].unique())\nprint('\u8d77\u59cb\u65e5:',df['date'].min())\nprint('\u7d50\u675f\u65e5:',df['date'].max())\nprint('\u6b04\u4f4d:',df.columns)\n</code></pre> <pre><code>\u80a1\u7968\u6c60\u70ba: ['0050' '0056' '00737' '1101' '1102' '1103' '1108' '1216' '1301' '1303'\n '1326' '1402' '1476' '1590' '1605' '1722' '1802' '2002' '2105' '2201'\n '2207' '2227' '2301' '2303' '2308' '2317' '2324' '2327' '2330' '2347'\n '2353' '2354' '2357' '2543' '2883' '2891' '2929' '2939' '4108' '4148'\n '6243' '6431' '6451' '6505' '6541' '9926' 'IR0001' '2379' '2382' '2395'\n '2408' '2409' '2412' '2448' '2454' '2474' '2492' '2498' '2603' '2609'\n '2615' '2618' '2633' '2801' '2823' '2880' '2881' '2882' '2884' '2885'\n '2886' '2887' '2888' '2890' '2892' '2912' '3008' '3034' '3037' '3045'\n '3231' '3481' '3673' '3711' '4904' '4938' '5871' '5876' '5880' '6239'\n '6415' '6669' '6770' '8046' '8454' '9904' '9910']\n\u8d77\u59cb\u65e5: 2020-01-03 00:00:00\n\u7d50\u675f\u65e5: 2023-05-30 00:00:00\n\u6b04\u4f4d: Index(['symbol', 'date', 'Industry', 'Industry_Eng', 'Market_Cap_Dollars',\n       'ROI', 'YoY_Monthly_Sales', 'mon_sales_date',\n       'Net_Income_Growth_Rate_A', 'Net_Income_Growth_Rate_Q',\n       'Net_Income_Growth_Rate_TTM', 'Sales_Growth_Rate_A',\n       'Sales_Growth_Rate_Q', 'Sales_Growth_Rate_TTM',\n       'Pre_Tax_Income_Growth_Rate_A', 'Pre_Tax_Income_Growth_Rate_Q',\n       'Pre_Tax_Income_Growth_Rate_TTM', 'fin_date',\n       'Operating_Income_Growth_Rate_A', 'Operating_Income_Growth_Rate_Q',\n       'Operating_Income_Growth_Rate_TTM'],\n      dtype='object')\n</code></pre> <pre><code>!zipline update -b fundamentals\n</code></pre> <pre><code>Currently used TEJ API key call quota 366/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 8398711/9223372036854775807 (0.0%)\n\n\n[2024-03-13 03:08:41.302161] INFO: zipline.data.bundles.core: Ingesting fundamentals.\n[2024-03-13 03:09:12.704311] INFO: zipline.data.bundles.core: Ingest fundamentals successfully.\n</code></pre> <pre><code># update \u5f8c\ndf = get_fundamentals()\nprint('\u80a1\u7968\u6c60\u70ba:',df['symbol'].unique())\nprint('\u8d77\u59cb\u65e5:',df['date'].min())\nprint('\u7d50\u675f\u65e5:',df['date'].max())\nprint('\u6b04\u4f4d:',df.columns)\n</code></pre> <pre><code>\u80a1\u7968\u6c60\u70ba: ['0050' '0056' '00737' '1101' '1102' '1103' '1108' '1216' '1301' '1303'\n '1326' '1402' '1476' '1590' '1605' '1722' '1802' '2002' '2105' '2201'\n '2207' '2227' '2301' '2303' '2308' '2317' '2324' '2327' '2330' '2347'\n '2353' '2354' '2357' '2379' '2382' '2395' '2408' '2409' '2412' '2448'\n '2454' '2474' '2492' '2498' '2543' '2603' '2609' '2615' '2618' '2633'\n '2801' '2823' '2880' '2881' '2882' '2883' '2884' '2885' '2886' '2887'\n '2888' '2890' '2891' '2892' '2912' '2929' '2939' '3008' '3034' '3037'\n '3045' '3231' '3481' '3673' '3711' '4108' '4148' '4904' '4938' '5871'\n '5876' '5880' '6239' '6243' '6415' '6431' '6451' '6505' '6541' '6669'\n '6770' '8046' '8454' '9904' '9910' '9926' 'IR0001']\n\u8d77\u59cb\u65e5: 2020-01-03 00:00:00\n\u7d50\u675f\u65e5: 2024-03-12 00:00:00\n\u6b04\u4f4d: Index(['symbol', 'date', 'Industry', 'Industry_Eng', 'Market_Cap_Dollars',\n       'ROI', 'YoY_Monthly_Sales', 'mon_sales_date',\n       'Net_Income_Growth_Rate_A', 'Net_Income_Growth_Rate_Q',\n       'Net_Income_Growth_Rate_TTM', 'Sales_Growth_Rate_A',\n       'Sales_Growth_Rate_Q', 'Sales_Growth_Rate_TTM',\n       'Pre_Tax_Income_Growth_Rate_A', 'Pre_Tax_Income_Growth_Rate_Q',\n       'Pre_Tax_Income_Growth_Rate_TTM', 'fin_date',\n       'Operating_Income_Growth_Rate_A', 'Operating_Income_Growth_Rate_Q',\n       'Operating_Income_Growth_Rate_TTM'],\n      dtype='object')\n</code></pre>"},{"location":"lecture/Data%20collection%20%283%29/#_7","title":"\u65b0\u589e\u975e\u50f9\u91cf\u8cc7\u6599","text":"<ul> <li> <p>\u57f7\u884c\u6307\u4ee4 <code>zipline add -b fundamentals -t &lt;tickers_want_to_add&gt;</code> \u53ef\u4ee5\u6839\u64da\u7576\u524d fundamentls bundle \u7684\u6b04\u4f4d\uff0c\u65b0\u589e\u6240\u9078\u64c7\u7684\u516c\u53f8\u5230 bundle \u4e2d\u3002</p> </li> <li> <p>\uff08fundamentls bundle \u9650\u5b9a\uff09\u900f\u904e\u6307\u4ee4 <code>!zipline add -b fundamentals -f &lt;columns_want_to_add&gt;</code>\uff08\u5176\u4e2d <code>-f</code> \u4ee3\u8868 <code>field</code>\uff09\u4f86\u65b0\u589e\u7576\u524d\u5df2\u6709\u516c\u53f8\u7684\u6307\u5b9a\u8cc7\u6599\u6b04\u4f4d\u3002</p> </li> <li> <p>\u8acb\u6ce8\u610f\uff0c\u76ee\u524d\u7cfb\u7d71\u4e0d\u652f\u63f4\u540c\u6642\u65b0\u589e\u516c\u53f8\u548c\u8cc7\u6599\u6b04\u4f4d\uff0c\u56e0\u6b64\u9700\u8981\u5206\u5225\u9032\u884c\u9019\u4e9b\u64cd\u4f5c\u3002</p> </li> </ul> <pre><code># add \u516c\u53f8\n!zipline add -b fundamentals -t \"6523 6208\"\n</code></pre> <pre><code>Currently used TEJ API key call quota 380/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 8442497/9223372036854775807 (0.0%)\n\n\n[2024-03-13 03:09:20.517554] INFO: zipline.data.bundles.core: Ingesting fundamentals.\n[2024-03-13 03:09:40.308175] INFO: zipline.data.bundles.core: Ingest fundamentals successfully.\n</code></pre> <pre><code># add \u516c\u53f8\u5f8c\ndf = get_fundamentals()\nprint('\u80a1\u7968\u6c60\u70ba:',df['symbol'].unique())\nprint('\u8d77\u59cb\u65e5:',df['date'].min())\nprint('\u7d50\u675f\u65e5:',df['date'].max())\nprint('\u6b04\u4f4d:',df.columns)\n</code></pre> <pre><code>\u80a1\u7968\u6c60\u70ba: ['0050' '0056' '00737' '1101' '1102' '1103' '1108' '1216' '1301' '1303'\n '1326' '1402' '1476' '1590' '1605' '1722' '1802' '2002' '2105' '2201'\n '2207' '2227' '2301' '2303' '2308' '2317' '2324' '2327' '2330' '2347'\n '2353' '2354' '2357' '2379' '2382' '2395' '2408' '2409' '2412' '2448'\n '2454' '2474' '2492' '2498' '2543' '2603' '2609' '2615' '2618' '2633'\n '2801' '2823' '2880' '2881' '2882' '2883' '2884' '2885' '2886' '2887'\n '2888' '2890' '2891' '2892' '2912' '2929' '2939' '3008' '3034' '3037'\n '3045' '3231' '3481' '3673' '3711' '4108' '4148' '4904' '4938' '5871'\n '5876' '5880' '6208' '6239' '6243' '6415' '6431' '6451' '6505' '6523'\n '6541' '6669' '6770' '8046' '8454' '9904' '9910' '9926' 'IR0001']\n\u8d77\u59cb\u65e5: 2020-01-03 00:00:00\n\u7d50\u675f\u65e5: 2024-03-12 00:00:00\n\u6b04\u4f4d: Index(['symbol', 'date', 'Industry', 'Industry_Eng', 'Market_Cap_Dollars',\n       'ROI', 'YoY_Monthly_Sales', 'mon_sales_date',\n       'Net_Income_Growth_Rate_A', 'Net_Income_Growth_Rate_Q',\n       'Net_Income_Growth_Rate_TTM', 'Sales_Growth_Rate_A',\n       'Sales_Growth_Rate_Q', 'Sales_Growth_Rate_TTM',\n       'Pre_Tax_Income_Growth_Rate_A', 'Pre_Tax_Income_Growth_Rate_Q',\n       'Pre_Tax_Income_Growth_Rate_TTM', 'fin_date',\n       'Operating_Income_Growth_Rate_A', 'Operating_Income_Growth_Rate_Q',\n       'Operating_Income_Growth_Rate_TTM'],\n      dtype='object')\n</code></pre> <pre><code># add \u6b04\u4f4d\n!zipline add -b fundamentals -f Gross_Margin_Growth_Rate\n</code></pre> <pre><code>Currently used TEJ API key call quota 408/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 8570809/9223372036854775807 (0.0%)\n\n\n[2024-03-13 03:10:24.411868] INFO: zipline.data.bundles.core: Ingesting fundamentals.\n[2024-03-13 03:10:52.508213] INFO: zipline.data.bundles.core: Ingest fundamentals successfully.\n</code></pre> <pre><code># add \u6b04\u4f4d\u5f8c\ndf = get_fundamentals()\nprint('\u80a1\u7968\u6c60\u70ba:',df['symbol'].unique())\nprint('\u8d77\u59cb\u65e5:',df['date'].min())\nprint('\u7d50\u675f\u65e5:',df['date'].max())\nprint('\u6b04\u4f4d:',df.columns)\n</code></pre> <pre><code>\u80a1\u7968\u6c60\u70ba: ['0050' '0056' '00737' '1101' '1102' '1103' '1108' '1216' '1301' '1303'\n '1326' '1402' '1476' '1590' '1605' '1722' '1802' '2002' '2105' '2201'\n '2207' '2227' '2301' '2303' '2308' '2317' '2324' '2327' '2330' '2347'\n '2353' '2354' '2357' '2379' '2382' '2395' '2408' '2409' '2412' '2448'\n '2454' '2474' '2492' '2498' '2543' '2603' '2609' '2615' '2618' '2633'\n '2801' '2823' '2880' '2881' '2882' '2883' '2884' '2885' '2886' '2887'\n '2888' '2890' '2891' '2892' '2912' '2929' '2939' '3008' '3034' '3037'\n '3045' '3231' '3481' '3673' '3711' '4108' '4148' '4904' '4938' '5871'\n '5876' '5880' '6208' '6239' '6243' '6415' '6431' '6451' '6505' '6523'\n '6541' '6669' '6770' '8046' '8454' '9904' '9910' '9926' 'IR0001']\n\u8d77\u59cb\u65e5: 2020-01-03 00:00:00\n\u7d50\u675f\u65e5: 2024-03-12 00:00:00\n\u6b04\u4f4d: Index(['symbol', 'date', 'Industry', 'Industry_Eng', 'Market_Cap_Dollars',\n       'ROI', 'YoY_Monthly_Sales', 'mon_sales_date',\n       'Net_Income_Growth_Rate_A', 'Net_Income_Growth_Rate_Q',\n       'Net_Income_Growth_Rate_TTM', 'Sales_Growth_Rate_A',\n       'Sales_Growth_Rate_Q', 'Sales_Growth_Rate_TTM',\n       'Pre_Tax_Income_Growth_Rate_A', 'Pre_Tax_Income_Growth_Rate_Q',\n       'Pre_Tax_Income_Growth_Rate_TTM', 'fin_date',\n       'Operating_Income_Growth_Rate_A', 'Operating_Income_Growth_Rate_Q',\n       'Operating_Income_Growth_Rate_TTM', 'Gross_Margin_Growth_Rate_A',\n       'Gross_Margin_Growth_Rate_Q', 'Gross_Margin_Growth_Rate_TTM'],\n      dtype='object')\n</code></pre>"},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/","title":"TQuant Lab \u5b89\u88dd\u6559\u5b78","text":""},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/#_1","title":"\u4f7f\u7528\u7684\u5957\u4ef6\u4ee5\u53ca\u74b0\u5883","text":"<ul> <li>Main package\uff1aZipline</li> <li>\u652f\u63f4\u7684 Python \u7248\u672c\uff1aPython 3.8~3.11\uff08\u5efa\u8b70\u4f7f\u7528Python 3.11\uff09</li> <li>\u652f\u63f4\u7684\u4f5c\u696d\u7cfb\u7d71\uff1aMicrosoft Windows OS or macOS</li> <li>\u5efa\u8b70\u7684 Pandas \u7248\u672c\uff1a1.5.3 \u6216 2.0.0\uff08&gt; 2.0.0 \u53ef\u80fd\u6703\u6709\u672a\u9810\u671f\u7684\u932f\u8aa4\uff09</li> <li>\u5efa\u8b70\u7684 Numpy \u7248\u672c\uff1a1.23.5\uff08&gt; 1.23.5 \u53ef\u80fd\u6703\u6709\u672a\u9810\u671f\u7684\u932f\u8aa4\uff09</li> </ul>"},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/#abc-zipline-tej-a-b","title":"\u4ee5\u4e0b\u5c07\u63d0\u4f9bA\u3001B\u3001C \u4e09\u7a2e\u5b89\u88ddzipline-tej\u7684\u65b9\u5f0f\uff08\u64c7\u4e00\u5373\u53ef\uff0c\u4f46\u63a8\u85a6\u4f7f\u7528\u65b9\u6cd5 A \u6216 B\uff09","text":""},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/#a-docker-zipline-tej","title":"A. \u900f\u904edocker \u5b89\u88dd zipline-tej\uff08\u63a8\u85a6\uff09","text":""},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/#_2","title":"\u5148\u6c7a\u689d\u4ef6","text":"<ul> <li>\u5df2\u5b89\u88dd\u597ddocker-desktop</li> </ul>"},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/#cmd","title":"\u555f\u52d5\u7d42\u7aef\u6a5f(CMD)","text":""},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/#dockerfile","title":"(\u65b9\u6cd5\u4e00) \u900f\u904e\u4e0b\u8f09Dockerfile","text":"<p>\u4e0b\u8f09tquant_jupyter (Jupyter\u4f7f\u7528)</p> <p>\u4e0b\u8f09tquant_bash (\u6392\u7a0b\u4f7f\u7528)</p> <pre><code>$ # \u65bc\u7d42\u7aef\u6a5f\u900f\u904e cd \u5230\u5df2\u4e0b\u8f09 dockerfile\u7684\u76ee\u9304\u4e4b\u4e0b\n$ docker build -f tquant_jupyter . -t \"tquant:latest\"\n</code></pre>"},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/#docker-hub","title":"(\u65b9\u6cd5\u4e8c) \u76f4\u63a5\u5f9edocker hub\u4e0b\u8f09\uff08\u63a8\u85a6\uff09","text":"<pre><code># \u65bc\u7d42\u7aef\u6a5f\u8f38\u5165\u4ee5\u4e0b\u6307\u4ee4\n$ docker pull tej87681088/tquant:latest\n</code></pre>"},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/#2-volume","title":"2 \u5efa\u7f6e\u4e00\u500bvolume\u4ee5\u50b3\u8f38\u96d9\u65b9\u8cc7\u6599","text":"<pre><code># \u65bc\u7d42\u7aef\u6a5f\u8f38\u5165\u4ee5\u4e0b\u6307\u4ee4\n$ docker volume create data\n</code></pre>"},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/#3-imagecontainer","title":"3. \u900f\u904eimage\u5efa\u7f6econtainer","text":"<pre><code># \u65bc\u7d42\u7aef\u6a5f\u8f38\u5165\u4ee5\u4e0b\u6307\u4ee4\n(\u82e5\u900f\u904e\u65b9\u6cd5\u4e00\u4e0b\u8f09)\n$ docker run -v data:/app -p 8888:8888 --name tquant tquant\n(\u82e5\u900f\u904e\u65b9\u6cd5\u4e8c\u4e0b\u8f09)\n$ docker run -v data:/app -p 8888:8888 --name tquant tej87681088/tquant\n</code></pre> <ul> <li> <p>\u6b64\u547d\u4ee4\u5c07\u6703\u555f\u52d5\u4e00\u500bcontainer\u4e26\u5c07container\u5167\u90e8\u7684 8888 \u57e0\u6620\u5c04\u5230\u672c\u6a5f\u7684 8888 \u57e0\uff0c\u4e26\u4e14\u5c07\u53ef\u4ee5\u900f\u904evolume\u50b3\u8f38\u8cc7\u6599</p> </li> <li> <p>(\u4ee5\u7b46\u8005Windows10\u7684\u96fb\u8166\u70ba\u4f8b\uff1avolume\u7684\u4f4d\u7f6e\u5728 \\\\wsl$\\docker-desktop-data\\data\\docker\\volumes\\data\\_data)</p> </li> <li>(\u82e5\u5e0c\u671b\u4e0d\u8981\u4fdd\u7559container\uff0c\u53ef\u52a0\u5165 --rm)</li> </ul>"},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/#4-jupyter","title":"4. \u958b\u59cb\u4f7f\u7528jupyter","text":"<ul> <li>\u6b64\u6642\u61c9\u8a72\u6703\u5728\u7d42\u7aef\u6a5f\u770b\u5230\u4e00\u4e32\u7db2\u5740\u985e\u4f3c</li> </ul> <pre><code>$ http://127.0.0.1:8888/tree?token=XXXXXXXXXXXXXXXX\n</code></pre> <ul> <li>\u5c07\u5176\u8907\u88fd\u4e26\u8cbc\u4e0a\u81f3\u700f\u89bd\u5668\u4fbf\u53ef\u958b\u59cb\u4f7f\u7528</li> </ul>"},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/#appendix","title":"Appendix","text":"<ul> <li>\u82e5\u60f3\u4f7f\u7528\u4e4b\u524d\u5df2\u5275\u5efa\u904e\u7684\u4f46\u95dc\u9589\u7684container\u64cd\u4f5c\uff0c\u53ef\u900f\u904e\u4ee5\u4e0b\u6307\u4ee4\u53d6\u5f97\u7db2\u5740</li> </ul> <pre><code># \u627e\u5c0bcontainer ID\n$ docker ps -a \n# \u555f\u52d5 \u6307\u5b9acontainer\n$ docker start &lt;CONTAINER_ID&gt;\n# \u986f\u793a container \u5167\u90e8\u7d42\u7aef\u6a5f\u6700\u8fd1\u5370\u51fa\u7684\u63d0\u793a\n$ docker logs --tail 3 &lt;CONTAINER_ID&gt;\n</code></pre>"},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/#b-anaconda-prompt-zipline-tej","title":"B. \u900f\u904e<code>Anaconda Prompt</code>\u4e00\u9375\u5b89\u88dd zipline-tej\uff08\u63a8\u85a6\uff09","text":"<ul> <li> <p>\u9996\u5148\uff0c\u9700\u8981\u4e0b\u8f09\u4ee5\u4e0b\u5957\u4ef6\u6587\u4ef6\u3002</p> <ol> <li> <p>Windows (zipline-tej.yml)</p> </li> <li> <p>Mac (zipline-tej_mac.yml)</p> </li> </ol> </li> <li> <p>\u63a5\u8457\uff0c\u5728 Anaconda \u7684\u547d\u4ee4\u63d0\u793a\u5b57\u5143\u4e2d\uff0c\u5275\u5efa\u4e00\u500b\u865b\u64ec\u74b0\u5883\u4e26\u5b89\u88dd\u76f8\u61c9\u7248\u672c\u7684\u4f9d\u8cf4\u5957\u4ef6\u3002\u6211\u5011\u5f37\u70c8\u63a8\u85a6\u4f7f\u7528\u865b\u64ec\u74b0\u5883\uff0c\u4ee5\u4fdd\u6301\u6bcf\u500b\u9805\u76ee\u7684\u7368\u7acb\u6027\u3002(\u539f\u56e0\u8aaa\u660e)</p> </li> </ul> <pre><code>    Window \u4f7f\u7528\u8005\n\n    # \u5c07\u4e0b\u8f09\u597d\u7684 zipline-tej.yml\u6a94\u6848\u653e\u5728\u4ee5\u4e0b\u8def\u5f91\u4e2d\n    $ cd &lt;C:\\Users\\username\\Downloads&gt;\n\n    # \u900f\u904eyml\u6a94\u5b89\u88dd\u6240\u9700\u5957\u4ef6\u4e26\u5275\u5efa\u865b\u64ec\u74b0\u5883\n    $ conda env create -f zipline-tej.yml\n\n    # \u958b\u555f\u865b\u64ec\u74b0\u5883\n    $ conda activate zipline-tej\n\n    Mac \u4f7f\u7528\u8005\n\n    # \u5c07\u4e0b\u8f09\u597d\u7684 zipline-tej.yml\u6a94\u6848\u653e\u5728\u4ee5\u4e0b\u8def\u5f91\u4e2d\n    $ cd \\Users\\username\\Downloads\n\n    # \u5275\u5efa\u865b\u64ec\u74b0\u5883\n    $ conda env create -f zipline-tej_mac.yml\n\n    # \u958b\u555f\u865b\u64ec\u74b0\u5883\n    $ conda activate zipline-tej\n</code></pre> <ul> <li>\u81f3\u6b64\uff0c\u4fbf\u53ef\u958b\u59cb\u4f7f\u7528zipline-tej\u3002</li> </ul>"},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/#c-pip-install-zipline-tej-debug","title":"C. \u76f4\u63a5\u900f\u904epip install \u5b89\u88dd zipline-tej\uff08\u4f7f\u7528\u6b64\u65b9\u5f0f\u5b89\u88dd\u53ef\u80fd\u6703\u6709\u672a\u9810\u671f\u7684\u932f\u8aa4\uff0c\u53ef\u80fd\u6703\u9700\u81ea\u884c debug\uff09","text":"<ul> <li> <p>\u65bc\u672c\u6a5f\u7aef\u5b89\u88dd zipline-tej</p> <ul> <li> <p>\u5728\u958b\u59cb\u5b89\u88dd\u4e4b\u524d\uff0c\u6211\u5011\u5efa\u8b70\u4f7f\u7528 Anaconda \u4f5c\u70ba\u958b\u767c\u74b0\u5883\u3002</p> </li> <li> <p>\u70ba\u907f\u514d\u74b0\u5883\u7684\u5957\u4ef6\u885d\u7a81\uff0c\u5275\u5efa\u865b\u64ec\u74b0\u5883\u662f\u76f8\u7576\u91cd\u8981\u7684\u3002\u56e0\u6b64\u6211\u5011\u5efa\u8b70\u5148\u5efa\u7acb\u865b\u64ec\u74b0\u5883\u5f8c\uff0c\u9010\u4e00\u5b89\u88dd\u6240\u9700\u7684\u5957\u4ef6\u3002</p> </li> <li> <p>\u4ee5\u4e0b\u6211\u5011\u5efa\u8b70\u5169\u7a2e\u5efa\u7acb\u865b\u64ec\u74b0\u5883\u7684\u65b9\u5f0f(\u64c7\u4e00\u5373\u53ef)</p> </li> </ul> </li> </ul> <pre><code>    (\u65b9\u6cd5\u4e00)\n    # \u900f\u904eAnaconda\u6307\u4ee4\n    # \u65bcAnaconda Prompt\n    # create virtual env\n    $ conda create -n &lt;env_name&gt; python=3.11\n\n    # activate virtual env\n    $ conda activate &lt;env_name&gt;\n\n    # download packages\n    $ pip install zipline-tej\n    $ pip install notebook\n    $ conda install -c conda-forge nb_conda_kernels\n</code></pre> <pre><code>    (\u65b9\u6cd5\u4e8c)\n    # \u900f\u904ePython\u539f\u751f\u6307\u4ee4\n    # \u65bcCMD\n    # create virtual env\n    $ python -m venv venv\n\n    # activate virtual env\n    $ venv\\Scripts\\activate.bat\n    # download packages\n    $ pip install zipline-tej\n    $ pip install notebook\n</code></pre> <ul> <li> <p>\u65bc google colab \u4f7f\u7528 zipline-tej</p> <ul> <li>\u82e5\u60a8\u4f7f\u7528 google colab\uff0c\u53ef\u4ee5\u76f4\u63a5\u57f7\u884c\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\uff0c\u4e0b\u8f09 <code>zipline-tej</code>\u3002</li> </ul> <p></p> <pre><code>  !pip install zipline-tej\n</code></pre> <p></p> <ul> <li>\u4e26\u540c\u6642\u5c07pandas\u7248\u672c\u6539\u70ba1.5.3\uff0c\u964d\u4f4e\u9047\u5230\u7248\u672c\u885d\u7a81\u7684\u53ef\u80fd\u6027\u3002</li> </ul> <p></p> <p><pre><code>  !pip install pandas==1.5.3\n</code></pre> </p> <ul> <li>\u56e0\u61c9 Google Colab \u6539\u7248\uff0c\u9700\u8981\u65b0\u589e dask, distributed \u7684\u964d\u7248\u6307\u4ee4</li> </ul> <p></p> <p><pre><code>  !pip install dask==2.30.0\n  !pip install distributed==2.30.0\n</code></pre> </p> <ul> <li>\u82e5\u6709\u4f7f\u7528Pyfolio\uff0c\u53ef\u4ee5\u4e00\u4f75\u57f7\u884c\u4e0b\u5217\u6307\u4ee4\u907f\u514d\u51fa\u73fe Warning\u3002</li> </ul> <p></p> <pre><code>  import matplotlib\n  !wget -O MicrosoftJhengHei.ttf https://drive.google.com/uc?id=1nMlvxPOPUGkHxYD5kuP8Ur37EmKlZAW_&amp;export=download\n  !wget -O ArialUnicodeMS.ttf https://drive.google.com/uc?id=1Y4O8Flv7lfrzHqOE8dkFTSctyYOpAJ0N&amp;export=download\n\n  matplotlib.font_manager.fontManager.addfont('MicrosoftJhengHei.ttf')\n  matplotlib.rc('font', family='sans-serif')\n\n  matplotlib.font_manager.fontManager.addfont('ArialUnicodeMS.ttf')\n  matplotlib.rc('font', family='sans-serif')\n</code></pre> </li> </ul>"},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/#zipline-tej","title":"\u6aa2\u67e5 zipline-tej \u7248\u672c","text":"<ul> <li>\u82e5\u5df2\u5b89\u88dd\u597dzipline-tej\uff0c\u6211\u5011\u53ef\u900f\u904e\u4ee5\u4e0b\u6307\u4ee4\u986f\u793a\u7576\u524dzipline-tej\u7684\u7248\u672c\u3002</li> </ul> <pre><code>  !pip show zipline-tej\n</code></pre> <ul> <li>\u70ba\u78ba\u4fdd\u7576\u524d\u7248\u672c\u70ba\u6700\u65b0\uff0c\u53ef\u4ee5\u900f\u904e\u4ee5\u4e0b\u6307\u4ee4\u4ee5\u66f4\u65b0zipline-tej\u3002</li> </ul> <pre><code>  !pip install --upgrade zipline-tej\n</code></pre> <ul> <li>zipline-tej\u7576\u524d\u7248\u672c</li> </ul>"},{"location":"lecture/Install%20TQuant%20Lab%20%283%29/#_3","title":"\u5176\u4ed6\u8cc7\u8a0a","text":"<ul> <li>TQuant Lab \u5b98\u65b9\u7db2\u7ad9</li> <li>TQuant Lab Github</li> </ul>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/","title":"Target Percent Pipeline Algorithm","text":"<p>\u5229\u7528pipeline\u63d0\u4f9b\u7684\u8cb7\u8ce3\u6e05\u55ae\u8207\u6301\u80a1\u6b0a\u91cd\u9032\u884c\u5b9a\u671f\u518d\u5e73\u8861\u7684\u6f14\u7b97\u6cd5\u3002</p> <p> \u672c\u6587\u4ef6\u5305\u542b\u4ee5\u4e0b\u90e8\u4efd\uff1a</p> <p>\u57fa\u672c\u8a2d\u5b9a 1. Set Environment Variables 2. Investment Universe 3. Ingest 4. Imports 5. Pipeline</p> <p>\u53c3\u6578\u8aaa\u660e\u8207\u7bc4\u4f8b</p> <ol> <li>API Reference\uff1a\u53c3\u6578\u8aaa\u660e\u3002</li> <li>class zipline.algo.pipeline_algo.TargetPercentPipeAlgo</li> <li> <p>class zipline.api.date_rules</p> </li> <li> <p>Examples\uff1a\u7bc4\u4f8b\u3002</p> </li> <li>Case 1\uff0d\u8abf\u6574start_session\u8207end_session</li> <li>Case 2\uff0d\u8abf\u6574max_leverage</li> <li>Case 3\uff0d\u8abf\u6574tradeday</li> <li>Case 4\uff0d\u8abf\u6574rebalance_date_rule</li> <li>Case 5\uff0d\u8abf\u6574slippage_model</li> <li>Case 6\uff0d\u8abf\u6574stocklist</li> <li>Case 7\uff0d\u8abf\u6574order_filling_policy</li> <li>Case 8\uff0d\u8abf\u6574allow_short</li> <li>Case 9\uff0d\u8abf\u6574cancel_datedelta </li> <li>Case 10\uff0d\u8abf\u6574limit_buy_multiplier </li> <li>Case 11\uff0d\u8abf\u6574custom_weight\u3001analyze\u3001record_vars\u3001get_record_vars\u8207get_transaction_detail </li> </ol> <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#1-set-environment-variables","title":"1. Set Environment Variables","text":"<p>Return to Menu</p> <pre><code>import pandas as pd\nimport datetime\nimport tejapi\nimport os\n\n# set tej_key and base\nos.environ['TEJAPI_KEY'] = \"your key\" \nos.environ['TEJAPI_BASE'] = \"https://api.tej.com.tw\"\n\n# set benchmark\nbenchmark=['IR0001']\n\n# set calendar\ncalendar_name='TEJ_XTAI'\n\n# set bundle name\nbundle_name = 'tquant'\n\n# set date\nstart='2023-06-01'\nend='2023-10-03'\n\n# \u7531\u6587\u5b57\u578b\u614b\u8f49\u70baTimestamp\uff0c\u4f9b\u56de\u6e2c\u4f7f\u7528\ntz = 'UTC'\nstart_dt, end_dt = pd.Timestamp(start, tz = tz), pd.Timestamp(end, tz = tz)\n\n# \u8a2d\u5b9aos.environ['mdate'] = start+' '+end\uff0c\u4f9bingest bundle\u4f7f\u7528\nos.environ['mdate'] = start+' '+end\n</code></pre> <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#2-investment-universe","title":"2. Investment Universe","text":"<p>\u53f0\u706350\u6307\u6578\u6210\u5206\u80a1</p> <p>Return to Menu</p> <pre><code>from zipline.sources.TEJ_Api_Data import get_universe\n\nStockList = get_universe(start, end, idx_id='IX0002')\n\nprint(len(StockList))\n</code></pre> <pre><code>Currently used TEJ API key call quota 67/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 2255014/9223372036854775807 (0.0%)\n55\n</code></pre> <pre><code>os.environ['ticker'] = ' '.join(StockList + benchmark)\n</code></pre> <pre><code>os.environ['ticker']\n</code></pre> <pre><code>'1101 1216 1301 1303 1326 1402 1590 1605 2002 2207 2301 2303 2308 2317 2327 2330 2345 2357 2379 2382 2395 2408 2412 2454 2603 2609 2615 2801 2880 2881 2882 2883 2884 2885 2886 2887 2890 2891 2892 2912 3008 3034 3037 3045 3231 3711 4904 4938 5871 5876 5880 6415 6505 6669 9910 IR0001'\n</code></pre> <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#3-ingest","title":"3. Ingest","text":"<p>Return to Menu</p> <pre><code># Ingest pricing bundle\n!zipline ingest -b tquant\n</code></pre> <pre><code>Merging daily equity files:\nCurrently used TEJ API key call quota 72/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 2261479/9223372036854775807 (0.0%)\n\n\n[2024-03-13 02:40:44.060855] INFO: zipline.data.bundles.core: Ingesting tquant.\n[2024-03-13 02:40:49.764291] INFO: zipline.data.bundles.core: Ingest tquant successfully.\n</code></pre> <pre><code>from zipline.data.data_portal import get_bundle_price\n\ndf_bundle_price = get_bundle_price(bundle_name=bundle_name,\n                                   calendar_name=calendar_name,\n                                   start_dt=start_dt,\n                                   end_dt=end_dt)\n</code></pre> <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#4-imports-settings","title":"4. Imports &amp; Settings","text":"<p>Return to Menu</p> <pre><code>import warnings\nwarnings.filterwarnings('ignore')\n</code></pre> <pre><code>from time import time\nimport numpy as np\nimport pandas as pd\nimport empyrical as ep\n\nfrom logbook import Logger, StderrHandler, INFO, WARNING\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator\n\n\nfrom TejToolAPI.TejToolAPI import *\n\nfrom zipline.api import record\n\nfrom zipline.utils.calendar_utils import get_calendar\nfrom zipline.utils.run_algo import  (get_transaction_detail,\n                                     get_record_vars)\n\nfrom zipline.pipeline import Pipeline, CustomFactor\nfrom zipline.pipeline.filters import SingleAsset\nfrom zipline.pipeline.factors import RSI\nfrom zipline.pipeline.data import TQAltDataSet\n\nfrom zipline.finance import slippage\n\nfrom zipline.TQresearch.tej_pipeline import run_pipeline\n\n# \u8a2d\u5b9alog\u986f\u793a\u65b9\u5f0f\nlog_handler = StderrHandler(format_string='[{record.time:%Y-%m-%d %H:%M:%S.%f}]: ' +\n                            '{record.level_name}: {record.func_name}: {record.message}',\n                            level=INFO)\nlog_handler.push_application()\nlog = Logger('Algorithm')\n</code></pre> <pre><code>import warnings\nwarnings.filterwarnings('ignore')\n</code></pre> <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#5-pipeline","title":"5. Pipeline","text":"<p>\u53d6\u5f97<code>Market_Cap_Dollars</code>\uff08\u5e02\u503c\uff09\u8cc7\u6599</p> <p>Return to Menu</p> <pre><code>col = ['Market_Cap_Dollars']\n\nfields = ''\nfor i in col:\n    fields += i\n    fields += ' '\n\nos.environ['fields'] = fields\n</code></pre> <pre><code># Ingest Fundamental Bundle\n!zipline ingest -b fundamentals\n</code></pre> <pre><code>Currently used TEJ API key call quota 83/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 2298569/9223372036854775807 (0.0%)\n\n\n[2024-03-13 02:40:54.272410] INFO: zipline.data.bundles.core: Ingesting fundamentals.\n[2024-03-13 02:41:05.038363] INFO: zipline.data.bundles.core: Ingest fundamentals successfully.\n</code></pre> <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#6-api-reference","title":"6. API Reference","text":"<p>Return to Menu</p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#class-ziplinealgopipeline_algotargetpercentpipealgo","title":"class zipline.algo.pipeline_algo.TargetPercentPipeAlgo","text":"<p>(self, bundle_name='tquant', start_session=None, end_session=None, trading_calendar=get_calendar('TEJ_XTAI'),</p> <p>capital_base=1e7, data_frequency='daily', tradeday=None, rebalance_date_rule=None, stocklist=None, benchmark='IR0001', </p> <p>zero_treasury_returns=True, slippage_model=slippage.VolumeShareSlippage(volume_limit=0.025, price_impact=0.1),</p> <p>commission_model=commission.Custom_TW_Commission(min_trade_cost=20, discount = 1.0, tax = 0.003), max_leverage=0.8, </p> <p>limit_buy_multiplier=None, limit_sell_multiplier=None, allow_short=False, cancel_datedelta=None, custom_weight=False,</p> <p>custom_loader=None, pipeline=None, analyze=None, record_vars=None, get_record_vars=False, get_transaction_detail=False,</p> <p>order_filling_policy='next_bar')</p> <p>\u5229\u7528pipeline\u63d0\u4f9b\u7684\u8cb7\u8ce3\u6e05\u55ae\u8207\u6301\u80a1\u6b0a\u91cd\u9032\u884c\u5b9a\u671f\u518d\u5e73\u8861\u7684\u6f14\u7b97\u6cd5\u3002\u5fc5\u8981\u53c3\u6578\u50c5\u6709<code>pipeline</code>\u3002</p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#parameters","title":"Parameters:","text":"<ul> <li> <p>bundle_name (str, optional)\uff0dbundle\u540d\u7a31\u3002\u9810\u8a2d\u662f <code>'tquant'</code>\u3002  </p> </li> <li> <p>start_session (pd.Timestamp or datetime, optional)\uff0d\u56de\u6e2c\u8d77\u59cb\u65e5\u671f\u3002\u9810\u8a2d\u662fbundle\u4e2d\u6700\u65e9\u7684\u8cc7\u6599\u65e5\u671f\u3002  </p> </li> <li> <p>end_session (pd.Timestamp or datetime, optional)\uff0d\u56de\u6e2c\u7d50\u675f\u65e5\u671f\u3002\u9810\u8a2d\u662fbundle\u4e2d\u6700\u665a\u7684\u8cc7\u6599\u65e5\u671f\u3002  </p> </li> <li> <p>trading_calendar (TradingCalendar, optional)\uff0d</p> </li> <li>\u8a2d\u7f6e\u4ea4\u6613\u65e5\u66c6\u3002\u9810\u8a2d\u662f <code>get_calendar('TEJ_XTAI')</code>\u3002</li> <li> <p>TradingCalendar\uff1a<code>zipline.utils.calendar_utils.TradingCalendar</code>\u3002  </p> </li> <li> <p>capital_base (float, optional)\uff0d\u521d\u59cb\u8cc7\u91d1\u984d\u5ea6\u3002\u9810\u8a2d\u662f\u4e00\u5343\u842c\u3002  </p> </li> <li> <p>data_frequency ({'daily', 'minute'}, optional)\uff0d\u8cc7\u6599\u983b\u7387\uff0c\u76ee\u524d\u50c5\u652f\u63f4\u65e5\u983b\u7387 <code>'daily'</code>\u3002  </p> </li> <li> <p>tradeday (list[str] or list[pd.Timestamp] or pd.DatetimeIndex, optional)\uff0d</p> </li> <li>\u4ea4\u6613\u65e5\u671f\u6e05\u55ae\uff0c\u9650\u5236\u53ea\u80fd\u5728\u9019\u500b\u6e05\u55ae\u4e2d\u7684\u65e5\u671f\u9032\u884c\u4ea4\u6613\u3002\u9810\u8a2d\u662fNone\uff0c\u4ee3\u8868\u6bcf\u65e5\u90fd\u4ea4\u6613\u3002</li> <li> <p><code>rebalance_date_rule</code>\u8207<code>tradeday</code>\u8acb\u64c7\u4e00\u8a2d\u5b9a\uff0c\u82e5\u5169\u8005\u7686\u8a2d\u5b9a\uff0c\u5247\u6703\u4ee5<code>rebalance_date_rule</code>\u70ba\u4e3b\u3002  </p> </li> <li> <p>rebalance_date_rule(EventRule, optional)\uff0d</p> </li> <li>\u4ea4\u6613\u983b\u7387\uff0c\u8a2d\u5b9a\u56fa\u5b9a\u7684\u4ea4\u6613\u983b\u7387\u3002\u9810\u8a2d\u662fNone\uff0c\u4ee3\u8868\u6bcf\u65e5\u90fd\u4ea4\u6613\u3002</li> <li><code>rebalance_date_rule</code>\u8207<code>tradeday</code>\u8acb\u64c7\u4e00\u8a2d\u5b9a\uff0c\u82e5\u5169\u8005\u7686\u8a2d\u5b9a\uff0c\u5247\u6703\u4ee5<code>rebalance_date_rule</code>\u70ba\u4e3b\u3002</li> <li> <p>EventRule\uff1a<code>zipline.utils.events.EventRule</code>\u3002\u53ef\u4f7f\u7528\u7684<code>rebalance_date_rule</code>\u53c3\u8003zipline.api.date_rules\u3002  </p> </li> <li> <p>stocklist (list[str], optional)\uff0d\u4ea4\u6613\u6e05\u55ae\uff0c\u9650\u5236\u53ea\u80fd\u4ea4\u6613\u9019\u500b\u6e05\u55ae\u4e2d\u7684\u80a1\u7968\u3002\u9810\u8a2d\u662fNone\uff0c\u4ee3\u8868\u4f7f\u7528\u6240\u6709bundle\u4e2d\u7684\u80a1\u7968\u3002  </p> </li> <li> <p>benchmark (str, optional)\uff0d\u6307\u6578\u540d\u7a31\uff0c\u7528\u4f86\u8207\u6295\u8cc7\u7d44\u5408\u5831\u916c\u7387\u6bd4\u8f03\u3002\u9810\u8a2d\u662f<code>'IR0001'</code>\uff0c\u4ee3\u8868\u53f0\u7063\u767c\u884c\u91cf\u52a0\u6b0a\u80a1\u50f9\u5831\u916c\u6307\u6578\u3002  </p> </li> <li> <p>zero_treasury_returns (bool, optional)\uff0d</p> </li> <li>\u662f\u5426\u5c07\u7121\u98a8\u96aa\u5229\u7387\u8a2d\u5b9a\u70ba0\uff0c\u9810\u8a2d\u662fTrue\uff0c\u4ee3\u8868\u8a2d\u5b9a\u70ba0\u3002\u56e0\u6b64\u4f7f\u7528<code>algo.run()</code>\u7522\u51fa\u7684\u56de\u6e2c\u5831\u8868\u4e2d\uff0c<code>treasury_return</code>\u8207<code>treasury_period_return</code>\u7686\u6703\u662f0\u3002</li> <li> <p>\u82e5\u8a2d\u5b9a\u70baFalse\uff0c\u5247\u6703\u8017\u8cbb\u984d\u5916API\u6d41\u91cf\uff0c\u4e26\u53d6\u5f97\u7b2c\u4e00\u9280\u884c\u4e00\u5e74\u671f\u5b9a\u5b58\u5229\u7387\u4f5c\u70ba\u7121\u98a8\u96aa\u5229\u7387\u3002  </p> </li> <li> <p>slippage_model (SlippageModel, optional)\uff0d</p> </li> <li>\u8a2d\u5b9a\u6ed1\u50f9\u6a21\u578b\u3002\u9810\u8a2d\u70ba<code>slippage.VolumeShareSlippage(volume_limit=0.025, price_impact=0.1)</code>\u3002\u53ef\u4f7f\u7528\u7684\u6a21\u578b\u53c3\u8003\uff1alecture/Zipline Slippage.ipynb</li> <li> <p>SlippageModel\uff1a<code>zipline.finance.slippage.SlippageModel</code>\u3002</p> </li> <li> <p>commission_model (CommissionModel, optional)\uff0d</p> </li> <li>\u8a2d\u5b9a\u624b\u7e8c\u8cbb\u6a21\u578b\u3002\u9810\u8a2d\u70ba<code>commission.Custom_TW_Commission(min_trade_cost=20, discount=1.0, tax = 0.003)</code>\u3002\u53ef\u4f7f\u7528\u7684\u6a21\u578b\u53c3\u8003\uff1alecture/Zipline Commission Models.ipynb</li> <li> <p>CommissionModel\uff1a<code>zipline.finance.commission.CommissionModel</code></p> </li> <li> <p>max_leverage (float, optional)\uff0d\u69d3\u687f\u9650\u5236\uff0c\u9810\u8a2d = 0.8\u3002  </p> </li> <li> <p>limit_buy_multiplier (float, optional)\uff0d</p> </li> <li>\u8cb7\u9032\uff0f\u56de\u88dc\u6642\u7684limit_price\u4e58\u6578\uff0c\u82e5\u6709\u63d0\u4f9b\u5247limit_price = \u4e0b\u55ae\u6642\u6700\u8fd1\u4e00\u7b46\u6536\u76e4\u50f9 * <code>limit_buy_multiplier</code>\u3002</li> <li> <p>\u9810\u8a2d\u70baNone\uff0c\u4ee3\u8868\u4e0d\u8a2d\u5b9a\u8cb7\u9032\uff0f\u56de\u88dc\u6642\u7684limit_price\u3002  </p> </li> <li> <p>limit_sell_multiplier (float, optional)\uff0d</p> </li> <li>\u8ce3\u51fa\uff0f\u653e\u7a7a\u6642\u7684limit_price\u4e58\u6578\uff0c\u82e5\u6709\u63d0\u4f9b\u5247limit_price = \u4e0b\u55ae\u6642\u6700\u8fd1\u4e00\u7b46\u6536\u76e4\u50f9 * <code>limit_sell_multiplier</code>\u3002</li> <li> <p>\u9810\u8a2d\u70baNone\uff0c\u4ee3\u8868\u4e0d\u8a2d\u5b9a\u8ce3\u51fa\uff0f\u653e\u7a7a\u6642\u7684limit_price\u3002  </p> </li> <li> <p>allow_short (bool, optional)\uff0d\u662f\u5426\u5141\u8a31\u653e\u7a7a\u80a1\u7968\uff0c\u9810\u8a2d\u70baFalse\uff0c\u4ee3\u8868\u50c5\u80fd\u505a\u591a\u3002\u82e5\u8a2d\u5b9a\u70baTrue\uff0c\u5247pipeline\u4e2d\u9700\u8981\u6709<code>shorts</code>\u6b04\u4f4d\u3002  </p> </li> <li> <p>cancel_datedelta (int, optional)\uff0d\u8a02\u55ae\u5e7e\u5929\u5167\u672a\u5b8c\u5168\u6210\u4ea4\u5c31\u53d6\u6d88\u3002\u9810\u8a2d\u662f\u5728\u4e0b\u4e00\u6b21\u518d\u5e73\u8861\u6642\u53d6\u6d88\u3002 </p> </li> <li> <p>custom_weight (bool, optional)\uff0d</p> </li> <li>\u662f\u5426\u8981\u4f7f\u7528\u81ea\u8a02\u7684\u52a0\u6b0a\u6b0a\u6578\uff0c\u9810\u8a2d\u70baFalse\uff0c\u4ee3\u8868\u4e0d\u4f7f\u7528\uff08\u5373\u7b49\u6b0a\u91cd\u52a0\u6b0a\uff09\u3002</li> <li> <p>\u82e5\u8a2d\u5b9a\u70baTrue\uff0c\u5247pipeline\u4e2d\u9700\u8981\u6709<code>long_weights</code>\uff08\u82e5<code>allow_short</code>=True\uff0c\u5247\u4e5f\u9808\u6709<code>short_weights</code>\uff09\u6b04\u4f4d\u3002</p> </li> <li> <p>custom_loader (PipelineLoader , optional)\uff0d</p> </li> <li>\u7528\u4f86\u53d6\u5f97\u50f9\u91cf\u4ee5\u5916\u8cc7\u6599\uff0c\u9810\u8a2d\u662fNone\uff0c\u4ee3\u8868\u4e0d\u4f7f\u7528\u50f9\u91cf\u3001<code>TQDataSet</code>\u8207<code>TQAltDataSet</code>\u4ee5\u5916\u8cc7\u6599\u3002</li> <li>TQDataSet\uff1a<code>zipline.pipeline.data.TQDataSet</code></li> <li>TQAltDataSet\uff1a<code>zipline.pipeline.data.TQAltDataSet</code></li> <li> <p>\u76ee\u524d\u652f\u63f4\u7684<code>PipelineLoader</code>\uff1a</p> <ul> <li>DataFrameLoader\uff08<code>zipline.pipeline.loaders.frame.DataFrameLoader</code>\uff09\u3002</li> </ul> </li> <li> <p>pipeline (Pipeline)\uff0d</p> </li> <li>\u8981\u7528\u4f86\u7522\u51fa\u4ea4\u6613\u6e05\u55ae\u6216\u6b0a\u91cd\u7684pipeline\uff0c\u70ba\u5fc5\u8981\u53c3\u6578\u3002</li> <li> <p>Pipeline\uff1a<code>zipline.pipeline.Pipeline</code></p> </li> <li> <p>analyze (callable[(context, pd.DataFrame) -&gt; None], optional)\uff0d</p> </li> <li>\u50b3\u5165<code>analyze</code>\u51fd\u5f0f\u4ee5\u7528\u65bc\u56de\u6e2c\uff0c\u51fd\u5f0f\u4e2d\u5fc5\u9808\u8981\u6709<code>context</code>\u8207<code>perf</code>\u53c3\u6578\uff0c\u9810\u8a2d\u662fNone\u3002</li> <li> <p>\u6b64\u51fd\u5f0f\u5728\u56de\u6e2c\u7d50\u675f\u6642\u88ab\u4e00\u6b21\u6027\u547c\u53eb\uff0c\u4e26\u7e6a\u88fd\u81ea\u8a02\u5716\u8868\u3002</p> </li> <li> <p>record_vars (callable[(context, BarData) -&gt; None], optional)\uff0d</p> </li> <li>\u50b3\u5165<code>record_vars</code>\u51fd\u5f0f\u4ee5\u7528\u65bc\u56de\u6e2c\uff0c\u51fd\u5f0f\u4e2d\u5fc5\u9808\u8981\u6709<code>context</code>\u8207<code>data</code>\u53c3\u6578\uff0c\u9810\u8a2d\u662fNone\u3002</li> <li> <p>\u6b64\u51fd\u5f0f\u5728\u6bcf\u500b\u4ea4\u6613\u65e5\u7d50\u675f\u6642\u88ab\u547c\u53eb\uff0c\u4e26\u628a\u6307\u5b9a\u8cc7\u6599\u7d00\u9304\u65bc\u56de\u6e2c\u7d50\u679c\u7684DataFrame\u4e2d\u3002</p> </li> <li> <p>get_record_vars (bool, optional)\uff0d</p> </li> <li>\u662f\u5426\u7522\u51fa<code>record_vars</code>\u4e2d<code>record</code>\u65b9\u6cd5\u6240\u8a18\u9304\u7684\u8b8a\u6578\uff0c\u9810\u8a2d\u70baFalse\uff0c\u4ee3\u8868\u4e0d\u7522\u51fa\u3002</li> <li> <p>\u82e5\u8a2d\u5b9a\u70baTrue\uff0c\u5247\u53ef\u7528<code>algo.dict_record_vars</code>\u53d6\u51fa\u3002</p> </li> <li> <p>get_transaction_detail (bool, optional)\uff0d</p> </li> <li>\u662f\u5426\u7522\u51fa\u4ea4\u6613\u7d50\u679c\uff0c\u9810\u8a2d\u70baFalse\uff0c\u4ee3\u8868\u4e0d\u7522\u51fa\u3002</li> <li> <p>\u82e5\u8a2d\u5b9a\u70baTrue\uff0c\u5247\u53ef\u7528<code>algo.positions</code>\u3001<code>algo.transactions</code>\u3001<code>algo.orders</code>\u65b9\u5f0f\u53d6\u51fa\u4ea4\u6613\u7d50\u679c\u3002</p> </li> <li> <p>order_filling_policy ({'next_bar','current_bar'}, optional)\uff0d</p> </li> <li>\u8a2d\u5b9a\u4ea4\u6613\u65b9\u5f0f\uff0c\u9810\u8a2d\u70banext_bar\uff0c\u4ee3\u8868\u7576\u5929\u6536\u76e4\u5f8c\u4e0b\u55ae\uff0c\u9694\u4e00\u65e5\u6536\u76e4\u524d\u6210\u4ea4\uff0c\u4e5f\u5c31\u662f\u539f\u5148\u7684\u56de\u6e2c\u65b9\u5f0f\u3002</li> <li>\u82e5\u8981\u7576\u5929\u958b\u76e4\u524d\u4e0b\u55ae\uff0c\u6536\u76e4\u524d\u6210\u4ea4\uff0c\u5247\u9700\u6307\u5b9a\u8a2d\u5b9a\u70bacurrent_bar\u3002</li> </ul>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#returns","title":"Returns:","text":"<pre><code>algo\n</code></pre>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#return-type","title":"Return type:","text":"<pre><code>zipline.algo.pipeline_algo.TargetPercentPipeAlgo\n</code></pre> <p>run()</p> <p>\u57f7\u884c\u6f14\u7b97\u6cd5</p> <p>Returns: - perf\uff08\u56de\u6e2c\u5831\u8868\uff09</p> <p>Return type: - pd.DataFrame</p> <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#class-ziplineapidate_rules","title":"class zipline.api.date_rules","text":"<p>Return to Menu</p> <ul> <li>\u70baFactory API\uff0c\u4e3b\u8981\u7528\u4f86\u50b3\u5165<code>zipline.api.schedule_function</code>\u7684<code>date_rule</code>\u53c3\u6578\u4e2d\u3002\u7528\u4f86\u6c7a\u5b9a\u8981\u4ee5\u4f55\u7a2e\u983b\u7387\u89f8\u767c\u67d0\u9805\u898f\u5247\u3002</li> <li>\u4f7f\u7528\u524d\u8acb\u5148import\uff1a<code>from zipline.api import date_rules</code>\u3002</li> </ul> <p>static every_day()</p> <p>\u6bcf\u65e5\u89f8\u767c\u67d0\u9805\u898f\u5247\u3002</p> <p>Returns: - rule</p> <p>Return type: - zipline.utils.events.EventRule</p> <p></p> <p>static month_end(days_offset=0)</p> <p>\u6bcf\u500b\u6708\u5e95\u89f8\u767c\u67d0\u9805\u898f\u5247\uff0c\u4e26\u53ef\u4ee5\u9078\u64c7\u6027\u7684\u65b0\u589e\u4e00\u500b\u504f\u79fb\u91cf\u3002</p> <p>Parameters: - days_offset(int , optional)\uff1a   - \u5728\u6708\u5e95\u4e4b\u524d\u7684\u7b2c\u5e7e\u500b\u4ea4\u6613\u65e5\uff08\u75310\u958b\u59cb\u8a08\u7b97\uff09\u89f8\u767c\u67d0\u9805\u898f\u5247\u3002\u9810\u8a2d\u503c\u662f0\uff0c\u5373\u5728\u6708\u5e95\u7684\u6700\u5f8c\u4e00\u500b\u4ea4\u6613\u65e5\u89f8\u767c\u3002   - days_offset\u53ea\u80fd\u4ecb\u65bc0~22\u4e4b\u9593\u3002 </p> <p>Returns: - rule</p> <p>Return type: - zipline.utils.events.EventRule</p> <p></p> <p>static month_start(days_offset=0)</p> <p>\u6bcf\u500b\u6708\u521d\u89f8\u767c\u67d0\u9805\u898f\u5247\uff0c\u4e26\u53ef\u4ee5\u9078\u64c7\u6027\u7684\u65b0\u589e\u4e00\u500b\u504f\u79fb\u91cf\u3002</p> <p>Parameters: - days_offset(int , optional)\uff1a   - \u5728\u6708\u521d\u4e4b\u5f8c\u7684\u7b2c\u5e7e\u500b\u4ea4\u6613\u65e5\uff08\u75310\u958b\u59cb\u8a08\u7b97\uff09\u624d\u89f8\u767c\u67d0\u9805\u898f\u5247\u3002\u9810\u8a2d\u503c\u662f0\uff0c\u5373\u5728\u6708\u521d\u7684\u7b2c\u4e00\u500b\u4ea4\u6613\u65e5\u89f8\u767c\u3002   - days_offset\u53ea\u80fd\u4ecb\u65bc0~22\u4e4b\u9593\u3002 </p> <p>Returns: - rule</p> <p>Return type: - zipline.utils.events.EventRule</p> <p></p> <p>static week_end(days_offset=0)</p> <p>\u5728\u6bcf\u5468\u6700\u5f8c\u4e00\u500b\u4ea4\u6613\u65e5\u89f8\u767c\u67d0\u9805\u898f\u5247\uff0c\u4e26\u53ef\u4ee5\u9078\u64c7\u6027\u7684\u65b0\u589e\u4e00\u500b\u504f\u79fb\u91cf\u3002</p> <p>Parameters: - days_offset(int , optional)\uff1a   - \u5728\u6bcf\u5468\u5012\u6578\u7b2c\u5e7e\u500b\u4ea4\u6613\u65e5\uff08\u75310\u958b\u59cb\u8a08\u7b97\uff09\u89f8\u767c\u67d0\u9805\u898f\u5247\u3002\u9810\u8a2d\u503c\u662f0\uff0c\u5373\u5728\u6bcf\u5468\u7684\u6700\u5f8c\u4e00\u500b\u4ea4\u6613\u65e5\u89f8\u767c\u3002   - days_offset\u53ea\u80fd\u4ecb\u65bc0~4\u4e4b\u9593\u3002 </p> <p>Returns: - rule</p> <p>Return type: - zipline.utils.events.EventRule</p> <p></p> <p>static week_start(days_offset=0)</p> <p>\u5728\u6bcf\u5468\u7684\u7b2c\u4e00\u500b\u4ea4\u6613\u65e5\u89f8\u767c\u67d0\u9805\u898f\u5247\uff0c\u4e26\u53ef\u4ee5\u9078\u64c7\u6027\u7684\u65b0\u589e\u4e00\u500b\u504f\u79fb\u91cf\u3002</p> <p>Parameters: - days_offset(int , optional)\uff1a   - \u5728\u6bcf\u5468\u7684\u7b2c\u5e7e\u500b\u4ea4\u6613\u65e5\uff08\u75310\u958b\u59cb\u8a08\u7b97\uff09\u624d\u89f8\u767c\u67d0\u9805\u898f\u5247\u3002\u9810\u8a2d\u503c\u662f0\uff0c\u5373\u5728\u6bcf\u5468\u7684\u7b2c\u4e00\u500b\u4ea4\u6613\u65e5\u89f8\u767c\u3002   - days_offset\u53ea\u80fd\u4ecb\u65bc0~4\u4e4b\u9593\u3002</p> <p>Returns: - rule</p> <p>Return type: - zipline.utils.events.EventRule</p> <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#7-examples","title":"7. Examples","text":"<p>Return to Menu</p> <pre><code>from zipline.utils.algo_instance import get_algo_instance, set_algo_instance\nfrom zipline.algo.pipeline_algo import TargetPercentPipeAlgo\n</code></pre> <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#case-1-start_sessionend_session","title":"Case 1 \u8abf\u6574start_session\u8207end_session","text":"<p>Return to Menu</p> <p>\u50c5\u8abf\u6574<code>start_session</code>\u8207<code>end_session</code>\u3002\u5176\u9918\u4fdd\u6301\u9810\u8a2d\u503c\u3002</p> <p>\u4ee5\u4e0b\u8a2d\u5b9apipeline\uff08<code>make_pipeline()</code>\uff09\uff0c\u4e26\u5b9a\u7fa9<code>longs</code>\u6b04\u4f4d\u7528\u4f86\u5224\u65b7\u9808\u6301\u6709\u7684\u80a1\u7968\u3002\u5728<code>longs</code>\u6b04\u4f4d\u4e2d\u8981\u6301\u6709\u7684\u80a1\u7968\u6a19\u8a18\u70baTrue\uff0c\u53cd\u4e4b\u6a19\u8a18\u70baFalse\u3002</p> <pre><code>from zipline.data import bundles\n\nbundle = bundles.load(bundle_name)\n\ndef make_pipeline():\n    rsi = RSI()\n    longs = rsi.top(2, mask = ~SingleAsset(bundle.asset_finder.lookup_symbol('IR0001', as_of_date=None)))\n\n    return Pipeline(\n\n        columns = {\n            \"longs\" : longs,\n        }\n    )\n</code></pre> <pre><code>algo_start = '2023-09-21'\nalgo_start_dt = pd.Timestamp(algo_start, tz = tz)\n\nresult = run_pipeline(make_pipeline(), algo_start, end)\nresult.query('longs == True')\n</code></pre> longs 2023-09-22 00:00:00+00:00 Equity(6 [1590]) True Equity(24 [2603]) True 2023-09-25 00:00:00+00:00 Equity(25 [2609]) True Equity(34 [2886]) True 2023-09-26 00:00:00+00:00 Equity(33 [2885]) True Equity(34 [2886]) True 2023-09-27 00:00:00+00:00 Equity(25 [2609]) True Equity(34 [2886]) True 2023-09-28 00:00:00+00:00 Equity(6 [1590]) True Equity(34 [2886]) True 2023-10-02 00:00:00+00:00 Equity(24 [2603]) True Equity(34 [2886]) True 2023-10-03 00:00:00+00:00 Equity(6 [1590]) True Equity(14 [2327]) True"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#_1","title":"\u57f7\u884c\u6f14\u7b97\u6cd5","text":"<ol> <li>\u5be6\u9ad4\u5316<code>TargetPercentPipeAlgo</code>\u4e26\u547d\u540d\u70ba<code>algo</code>\u3002</li> <li>\u8a2d\u5b9a\u6f14\u7b97\u6cd5\uff1a<code>set_algo_instance(algo)</code></li> <li>\u57f7\u884c\u6f14\u7b97\u6cd5\uff0c\u4e26\u7522\u51fa\u56de\u6e2c\u5831\u8868<code>stats</code>\uff08pd.DataFrame\uff09\uff1a<code>stats = algo.run()</code></li> </ol> <pre><code>algo = TargetPercentPipeAlgo(\n                     start_session=algo_start_dt,\n                     end_session=end_dt,\n                     pipeline=make_pipeline,\n)\n\n# set_algo_instance\nset_algo_instance(algo)\n\n# run\nstats = algo.run()\n</code></pre> <pre><code>[2024-03-13 02:41:05.491033]: INFO: rebalance: Cancel_order: current time: 2023-09-22 , created: 2023-09-21 , asset: Equity(46 [4904]), amount: 55478 , filled: 51900\n[2024-03-13 02:41:05.499675]: INFO: rebalance: Cancel_order: current time: 2023-09-25 , created: 2023-09-25 , asset: Equity(46 [4904]), amount: -14450 , filled: 0\n[2024-03-13 02:41:05.504262]: INFO: earn_dividends: Equity(6 [1590]), cash_dividend amount: 13.43905496, pay_date: 2023-10-30, div_owed: 54616.31935744\n[2024-03-13 02:41:05.505924]: INFO: handle_split: after split: asset: Equity(6 [1590]), amount: 4062, cost_basis: 982.73, last_sale_price: 981.0\n[2024-03-13 02:41:05.506228]: INFO: handle_split: returning cash: 643.94\n[2024-03-13 02:41:05.549641]: INFO: handle_simulation_end: Simulated 8 trading days\nfirst open: 2023-09-21 01:01:00+00:00\nlast close: 2023-10-03 05:30:00+00:00\n</code></pre> <p>\u67e5\u770b\u6f14\u7b97\u6cd5\u4e2d\u7684\u53c3\u6578\u8a2d\u5b9a</p> <pre><code>algo\n</code></pre> <pre><code>TargetPercentPipeAlgo(\n    sim_params = \nSimulationParameters(\n    start_session=2023-09-21 00:00:00+00:00,\n    end_session=2023-10-03 00:00:00+00:00,\n    capital_base=10000000.0,\n    data_frequency=daily,\n    emission_rate=daily,\n    first_open=2023-09-21 01:01:00+00:00,\n    last_close=2023-10-03 05:30:00+00:00,\n    trading_calendar=&lt;exchange_calendars.exchange_calendar_tejxtai.TEJ_XTAIExchangeCalendar object at 0x0000017B415030D0&gt;\n),\n    benchmark = IR0001,\n    zero treasury returns or not\uff08if \"True\" then treasury returns = 0\uff09= True,\n    max_leverage = 0.8,\n    slippage model used = VolumeShareSlippage(\n    volume_limit=0.025,\n    price_impact=0.1),\n    commission_model = Custom_TW_Commission(min_trade_cost=20.0),\n    liquidity_risk_management_rule = None,\n    order_filling_policy = next_bar,\n    adjust amount or not = False,\n    limit_buy_multiplier = None,\n    limit_sell_multiplier = None,\n    allow short or not\uff08if \"False\" then long only\uff09= False,\n    use custom weight or not\uff08if not then \"equal weighted\"\uff09= False,\n    cancel_datedelta\uff08if \"None\" then cancel open orders at next rebalance date\uff09= None,\n    stocklist = ['1101', '1216', '1301', '1303', '1326', '1402', '1590', '1605', '2002', '2207', '2301', '2303', '2308', '2317', '2327', '2330', '2345', '2357', '2379', '2382', '2395', '2408', '2412', '2454', '2603', '2609', '2615', '2801', '2880', '2881', '2882', '2883', '2884', '2885', '2886', '2887', '2890', '2891', '2892', '2912', '3008', '3034', '3037', '3045', '3231', '3711', '4904', '4938', '5871', '5876', '5880', '6415', '6505', '6669', '9910', 'IR0001'],\n    tradeday = DatetimeIndex(['2023-09-21 00:00:00+00:00', '2023-09-22 00:00:00+00:00',\n               '2023-09-25 00:00:00+00:00', '2023-09-26 00:00:00+00:00',\n               '2023-09-27 00:00:00+00:00', '2023-09-28 00:00:00+00:00',\n               '2023-10-02 00:00:00+00:00', '2023-10-03 00:00:00+00:00'],\n              dtype='datetime64[ns, UTC]', freq='C'),\n    rebalance_date_rule\uff08If the \"rebalance_date_rule\" parameter is provided, then ignore the \"tradeday\" parameter.\"\uff09 \n    = None,\n    get transaction detail or not = False,\n    blotter = SimulationBlotter(\n    slippage_models={&lt;class 'zipline.assets._assets.Equity'&gt;: VolumeShareSlippage(\n    volume_limit=0.025,\n    price_impact=0.1), &lt;class 'zipline.assets._assets.Future'&gt;: VolatilityVolumeShare(volume_limit=0.05, eta=&lt;varies&gt;)},\n    commission_models={&lt;class 'zipline.assets._assets.Equity'&gt;: Custom_TW_Commission(min_trade_cost=20.0), &lt;class 'zipline.assets._assets.Future'&gt;: PerContract(cost_per_contract=0.85, exchange_fee=&lt;varies&gt;, min_trade_cost=0)},\n    open_orders=defaultdict(&lt;class 'list'&gt;, {Equity(24 [2603]): [Order({'id': '307a0683715641db990a5ac44c1077bf', 'dt': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'amount': -33982, 'filled': 0, 'commission': 0, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(24 [2603]), 'status': &lt;ORDER_STATUS.OPEN: 0&gt;})], Equity(34 [2886]): [Order({'id': 'e5f6a3c19d2d4465ad5f0592eb6578c5', 'dt': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'amount': -102579, 'filled': 0, 'commission': 0, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(34 [2886]), 'status': &lt;ORDER_STATUS.OPEN: 0&gt;})], Equity(6 [1590]): [Order({'id': '4545f498f583429d8c867307ac34f9d5', 'dt': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'amount': 3846, 'filled': 0, 'commission': 0, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(6 [1590]), 'status': &lt;ORDER_STATUS.OPEN: 0&gt;})], Equity(14 [2327]): [Order({'id': '11c46077c2b549c9ab4c156f697053f6', 'dt': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'amount': 7381, 'filled': 0, 'commission': 0, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(14 [2327]), 'status': &lt;ORDER_STATUS.OPEN: 0&gt;})]}),\n    orders={'bdcb9758340444948f3af991c6b2478b': Order({'id': 'bdcb9758340444948f3af991c6b2478b', 'dt': Timestamp('2023-09-22 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-21 05:30:00+0000', tz='UTC'), 'amount': 106951, 'filled': 106951, 'commission': 5761, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(34 [2886]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), 'acc3c2d89f8e48c3bc42daa9e8d81560': Order({'id': 'acc3c2d89f8e48c3bc42daa9e8d81560', 'dt': Timestamp('2023-09-22 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-21 05:30:00+0000', tz='UTC'), 'amount': 55478, 'filled': 51900, 'commission': 5333, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(46 [4904]), 'status': &lt;ORDER_STATUS.CANCELLED: 2&gt;}), '91e9060255b8480c88251ce5ed781b49': Order({'id': '91e9060255b8480c88251ce5ed781b49', 'dt': Timestamp('2023-09-25 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-22 05:30:00+0000', tz='UTC'), 'amount': -106951, 'filled': -106951, 'commission': 17985, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(34 [2886]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), '71a11f3296354834956e3a801721c806': Order({'id': '71a11f3296354834956e3a801721c806', 'dt': Timestamp('2023-09-25 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-22 05:30:00+0000', tz='UTC'), 'amount': -51900, 'filled': -37450, 'commission': 12081, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(46 [4904]), 'status': &lt;ORDER_STATUS.CANCELLED: 2&gt;}), '2777dbff1bbd48188466187cc31e69d3': Order({'id': '2777dbff1bbd48188466187cc31e69d3', 'dt': Timestamp('2023-09-25 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-22 05:30:00+0000', tz='UTC'), 'amount': 34894, 'filled': 34894, 'commission': 5768, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(24 [2603]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), '1ec8dcf092f84220a87650c5db8959fc': Order({'id': '1ec8dcf092f84220a87650c5db8959fc', 'dt': Timestamp('2023-09-25 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-22 05:30:00+0000', tz='UTC'), 'amount': 4064, 'filled': 4064, 'commission': 5682, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(6 [1590]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), 'f39524a1508142c9af7306307956f8e9': Order({'id': 'f39524a1508142c9af7306307956f8e9', 'dt': Timestamp('2023-09-25 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-25 05:30:00+0000', tz='UTC'), 'amount': -14450, 'filled': 0, 'commission': 0, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(46 [4904]), 'status': &lt;ORDER_STATUS.CANCELLED: 2&gt;}), 'dc7128121a9d40d182ec3d9d4d465492': Order({'id': 'dc7128121a9d40d182ec3d9d4d465492', 'dt': Timestamp('2023-09-26 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-25 05:30:00+0000', tz='UTC'), 'amount': -34894, 'filled': -34894, 'commission': 17835, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(24 [2603]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), 'ceec5c24911044baba3d8c0abab96960': Order({'id': 'ceec5c24911044baba3d8c0abab96960', 'dt': Timestamp('2023-09-26 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-25 05:30:00+0000', tz='UTC'), 'amount': -14450, 'filled': -14450, 'commission': 4649, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(46 [4904]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), 'c55dc4e5611246698718518b5ad46860': Order({'id': 'c55dc4e5611246698718518b5ad46860', 'dt': Timestamp('2023-09-26 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-25 05:30:00+0000', tz='UTC'), 'amount': -4062, 'filled': -4062, 'commission': 17221, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(6 [1590]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), '5ca0608910f8443a9c2ec23de6c1ab6f': Order({'id': '5ca0608910f8443a9c2ec23de6c1ab6f', 'dt': Timestamp('2023-09-26 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-25 05:30:00+0000', tz='UTC'), 'amount': 87136, 'filled': 87136, 'commission': 5706, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(25 [2609]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), 'aafbcc931d8e4f87adb21686aeb0f227': Order({'id': 'aafbcc931d8e4f87adb21686aeb0f227', 'dt': Timestamp('2023-09-26 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-25 05:30:00+0000', tz='UTC'), 'amount': 105366, 'filled': 105366, 'commission': 5684, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(34 [2886]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), '153b35815aa44224aebbd79d673403b2': Order({'id': '153b35815aa44224aebbd79d673403b2', 'dt': Timestamp('2023-09-27 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-26 05:30:00+0000', tz='UTC'), 'amount': -87136, 'filled': -87136, 'commission': 17699, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(25 [2609]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), 'b397a24cd315420683b711b7c933abc3': Order({'id': 'b397a24cd315420683b711b7c933abc3', 'dt': Timestamp('2023-09-27 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-26 05:30:00+0000', tz='UTC'), 'amount': 157495, 'filled': 157495, 'commission': 5645, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(33 [2885]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), '2f3a95e39fd840dc8aca520f0c36f6b1': Order({'id': '2f3a95e39fd840dc8aca520f0c36f6b1', 'dt': Timestamp('2023-09-27 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-26 05:30:00+0000', tz='UTC'), 'amount': -1339, 'filled': -1339, 'commission': 224, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(34 [2886]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), '1ebe571a863a415297cd8aa1bc2b07b9': Order({'id': '1ebe571a863a415297cd8aa1bc2b07b9', 'dt': Timestamp('2023-09-28 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-27 05:30:00+0000', tz='UTC'), 'amount': -157495, 'filled': -157495, 'commission': 17458, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(33 [2885]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), '432d560b9e99476d846b3675db5b2d44': Order({'id': '432d560b9e99476d846b3675db5b2d44', 'dt': Timestamp('2023-09-28 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-27 05:30:00+0000', tz='UTC'), 'amount': 85400, 'filled': 85400, 'commission': 5532, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(25 [2609]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), '9fb1d769ef504f44b2dd544653e997c2': Order({'id': '9fb1d769ef504f44b2dd544653e997c2', 'dt': Timestamp('2023-09-28 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-27 05:30:00+0000', tz='UTC'), 'amount': -51, 'filled': -51, 'commission': 26.0, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(34 [2886]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), '5a76b96aecf749d683699d19b7fc687c': Order({'id': '5a76b96aecf749d683699d19b7fc687c', 'dt': Timestamp('2023-10-02 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-28 05:30:00+0000', tz='UTC'), 'amount': -85400, 'filled': -85400, 'commission': 16799, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(25 [2609]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), 'c2f1f413dea8434f9ef69b9f58c40810': Order({'id': 'c2f1f413dea8434f9ef69b9f58c40810', 'dt': Timestamp('2023-10-02 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-28 05:30:00+0000', tz='UTC'), 'amount': -412, 'filled': -412, 'commission': 70, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(34 [2886]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), 'c2c40f199a7f4f7a85e33a6f0fd9c3d7': Order({'id': 'c2c40f199a7f4f7a85e33a6f0fd9c3d7', 'dt': Timestamp('2023-10-02 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-09-28 05:30:00+0000', tz='UTC'), 'amount': 3988, 'filled': 3988, 'commission': 5712, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(6 [1590]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), '40c0549e04914d8db877272facf233f9': Order({'id': '40c0549e04914d8db877272facf233f9', 'dt': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-10-02 05:30:00+0000', tz='UTC'), 'amount': -3988, 'filled': -3988, 'commission': 17612, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(6 [1590]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), 'b990b03de87744508a9bfcbab7e14ba6': Order({'id': 'b990b03de87744508a9bfcbab7e14ba6', 'dt': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-10-02 05:30:00+0000', tz='UTC'), 'amount': 33982, 'filled': 33982, 'commission': 5351, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(24 [2603]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), 'fcc61389fce5448297c04514a9523155': Order({'id': 'fcc61389fce5448297c04514a9523155', 'dt': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-10-02 05:30:00+0000', tz='UTC'), 'amount': -985, 'filled': -985, 'commission': 165, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(34 [2886]), 'status': &lt;ORDER_STATUS.FILLED: 1&gt;}), '307a0683715641db990a5ac44c1077bf': Order({'id': '307a0683715641db990a5ac44c1077bf', 'dt': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'amount': -33982, 'filled': 0, 'commission': 0, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(24 [2603]), 'status': &lt;ORDER_STATUS.OPEN: 0&gt;}), 'e5f6a3c19d2d4465ad5f0592eb6578c5': Order({'id': 'e5f6a3c19d2d4465ad5f0592eb6578c5', 'dt': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'amount': -102579, 'filled': 0, 'commission': 0, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(34 [2886]), 'status': &lt;ORDER_STATUS.OPEN: 0&gt;}), '4545f498f583429d8c867307ac34f9d5': Order({'id': '4545f498f583429d8c867307ac34f9d5', 'dt': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'amount': 3846, 'filled': 0, 'commission': 0, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(6 [1590]), 'status': &lt;ORDER_STATUS.OPEN: 0&gt;}), '11c46077c2b549c9ab4c156f697053f6': Order({'id': '11c46077c2b549c9ab4c156f697053f6', 'dt': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'reason': None, 'created': Timestamp('2023-10-03 05:30:00+0000', tz='UTC'), 'amount': 7381, 'filled': 0, 'commission': 0, 'stop': None, 'limit': None, 'stop_reached': False, 'limit_reached': False, 'sid': Equity(14 [2327]), 'status': &lt;ORDER_STATUS.OPEN: 0&gt;})},\n    new_orders=[],\n    current_dt=2023-10-03 05:30:00+00:00),\n    recorded_vars = {})\n</code></pre> <pre><code>stats.T\n</code></pre> 2023-09-21 13:30:00+08:00 2023-09-22 13:30:00+08:00 2023-09-25 13:30:00+08:00 2023-09-26 13:30:00+08:00 2023-09-27 13:30:00+08:00 2023-09-28 13:30:00+08:00 2023-10-02 13:30:00+08:00 2023-10-03 13:30:00+08:00 period_open2023-09-21 09:01:00+08:002023-09-22 09:01:00+08:002023-09-25 09:01:00+08:002023-09-26 09:01:00+08:002023-09-27 09:01:00+08:002023-09-28 09:01:00+08:002023-10-02 09:01:00+08:002023-10-03 09:01:00+08:00 period_close2023-09-21 13:30:00+08:002023-09-22 13:30:00+08:002023-09-25 13:30:00+08:002023-09-26 13:30:00+08:002023-09-27 13:30:00+08:002023-09-28 13:30:00+08:002023-10-02 13:30:00+08:002023-10-03 13:30:00+08:00 starting_cash10000000.010000000.02203905.142427921903.8760361851480.4465351916878.6939421959492.6593211740449.09152 ending_cash10000000.02203905.142427921903.8760361851480.4465351916878.6939421959492.6593211740449.091521979378.550691 portfolio_value10000000.09988642.94242710009796.8760369843482.7465359799695.8439429760817.8593219642395.491529596488.900691 transactions[][{'amount': 106951, 'dt': '2023-09-22 13:30:00+08:00'}][{'amount': -37450, 'dt': '2023-09-25 13:30:00+08:00'}][{'amount': -14450, 'dt': '2023-09-26 13:30:00+08:00'}][{'amount': -87136, 'dt': '2023-09-27 13:30:00+08:00'}][{'amount': -157495, 'dt': '2023-09-28 13:30:00+08:00'}][{'amount': -85400, 'dt': '2023-10-02 13:30:00+08:00'}][{'amount': -3988, 'dt': '2023-10-03 13:30:00+08:00'}] longs_count02322222 gross_leverage0.00.7793590.90790.8119080.8043940.7992490.81950.793739 sharpeNaN-11.2249723.147118-7.232764-8.577955-9.570898-12.063911-12.898619 trading_days12345678 returns0.0-0.0011360.002118-0.016615-0.004448-0.003967-0.012132-0.004761 alphaNaN-0.2239820.114994-0.409947-0.5193-0.56714-0.729949-0.723783 betaNaN-0.0762550.0641790.4684580.4153520.3856830.0527870.044894 <pre><code>positions, transactions, orders = get_transaction_detail(stats)\n</code></pre> <pre><code>transactions\n</code></pre> sid symbol amount dt price order_id asset commission 2023-09-22 13:30:00+08:00 34 2886 106951 2023-09-22 13:30:00+08:00 37.800273 bdcb9758340444948f3af991c6b2478b Equity(34 [2886]) None 2023-09-22 13:30:00+08:00 46 4904 51900 2023-09-22 13:30:00+08:00 72.104506 acc3c2d89f8e48c3bc42daa9e8d81560 Equity(46 [4904]) None 2023-09-25 13:30:00+08:00 46 4904 -37450 2023-09-25 13:30:00+08:00 72.895444 71a11f3296354834956e3a801721c806 Equity(46 [4904]) None 2023-09-25 13:30:00+08:00 34 2886 -106951 2023-09-25 13:30:00+08:00 37.999742 91e9060255b8480c88251ce5ed781b49 Equity(34 [2886]) None 2023-09-25 13:30:00+08:00 24 2603 34894 2023-09-25 13:30:00+08:00 116.000161 2777dbff1bbd48188466187cc31e69d3 Equity(24 [2603]) None 2023-09-25 13:30:00+08:00 6 1590 4064 2023-09-25 13:30:00+08:00 981.008970 1ec8dcf092f84220a87650c5db8959fc Equity(6 [1590]) None 2023-09-26 13:30:00+08:00 46 4904 -14450 2023-09-26 13:30:00+08:00 72.699787 ceec5c24911044baba3d8c0abab96960 Equity(46 [4904]) None 2023-09-26 13:30:00+08:00 24 2603 -34894 2023-09-26 13:30:00+08:00 115.499884 dc7128121a9d40d182ec3d9d4d465492 Equity(24 [2603]) None 2023-09-26 13:30:00+08:00 6 1590 -4062 2023-09-26 13:30:00+08:00 957.984660 c55dc4e5611246698718518b5ad46860 Equity(6 [1590]) None 2023-09-26 13:30:00+08:00 25 2609 87136 2023-09-26 13:30:00+08:00 45.950388 5ca0608910f8443a9c2ec23de6c1ab6f Equity(25 [2609]) None 2023-09-26 13:30:00+08:00 34 2886 105366 2023-09-26 13:30:00+08:00 37.850331 aafbcc931d8e4f87adb21686aeb0f227 Equity(34 [2886]) None 2023-09-27 13:30:00+08:00 25 2609 -87136 2023-09-27 13:30:00+08:00 45.899835 153b35815aa44224aebbd79d673403b2 Equity(25 [2609]) None 2023-09-27 13:30:00+08:00 33 2885 157495 2023-09-27 13:30:00+08:00 25.150272 b397a24cd315420683b711b7c933abc3 Equity(33 [2885]) None 2023-09-27 13:30:00+08:00 34 2886 -1339 2023-09-27 13:30:00+08:00 37.700000 2f3a95e39fd840dc8aca520f0c36f6b1 Equity(34 [2886]) None 2023-09-28 13:30:00+08:00 33 2885 -157495 2023-09-28 13:30:00+08:00 25.049461 1ebe571a863a415297cd8aa1bc2b07b9 Equity(33 [2885]) None 2023-09-28 13:30:00+08:00 25 2609 85400 2023-09-28 13:30:00+08:00 45.450323 432d560b9e99476d846b3675db5b2d44 Equity(25 [2609]) None 2023-09-28 13:30:00+08:00 34 2886 -51 2023-09-28 13:30:00+08:00 37.700000 9fb1d769ef504f44b2dd544653e997c2 Equity(34 [2886]) None 2023-10-02 13:30:00+08:00 25 2609 -85400 2023-10-02 13:30:00+08:00 44.449880 5a76b96aecf749d683699d19b7fc687c Equity(25 [2609]) None 2023-10-02 13:30:00+08:00 34 2886 -412 2023-10-02 13:30:00+08:00 37.600000 c2f1f413dea8434f9ef69b9f58c40810 Equity(34 [2886]) None 2023-10-02 13:30:00+08:00 6 1590 3988 2023-10-02 13:30:00+08:00 1005.008408 c2c40f199a7f4f7a85e33a6f0fd9c3d7 Equity(6 [1590]) None 2023-10-03 13:30:00+08:00 6 1590 -3988 2023-10-03 13:30:00+08:00 997.990178 40c0549e04914d8db877272facf233f9 Equity(6 [1590]) None 2023-10-03 13:30:00+08:00 24 2603 33982 2023-10-03 13:30:00+08:00 110.500048 b990b03de87744508a9bfcbab7e14ba6 Equity(24 [2603]) None 2023-10-03 13:30:00+08:00 34 2886 -985 2023-10-03 13:30:00+08:00 37.650000 fcc61389fce5448297c04514a9523155 Equity(34 [2886]) None <pre><code>positions['mv'] = positions['amount'] * positions['last_sale_price']\npositions\n</code></pre> sid symbol asset amount cost_basis last_sale_price mv 2023-09-22 13:30:00+08:00 34 2886 Equity(34 [2886]) 106951 37.854139 37.80 4042747.80 2023-09-22 13:30:00+08:00 46 4904 Equity(46 [4904]) 51900 72.207262 72.10 3741990.00 2023-09-25 13:30:00+08:00 46 4904 Equity(46 [4904]) 14450 73.043317 72.90 1053405.00 2023-09-25 13:30:00+08:00 24 2603 Equity(24 [2603]) 34894 116.165462 116.00 4047704.00 2023-09-25 13:30:00+08:00 6 1590 Equity(6 [1590]) 4064 982.407100 981.00 3986784.00 2023-09-26 13:30:00+08:00 25 2609 Equity(25 [2609]) 87136 46.015872 45.95 4003899.20 2023-09-26 13:30:00+08:00 34 2886 Equity(34 [2886]) 105366 37.904276 37.85 3988103.10 2023-09-27 13:30:00+08:00 34 2886 Equity(34 [2886]) 104027 37.906429 37.70 3921817.90 2023-09-27 13:30:00+08:00 33 2885 Equity(33 [2885]) 157495 25.186114 25.15 3960999.25 2023-09-28 13:30:00+08:00 34 2886 Equity(34 [2886]) 103976 37.906679 37.70 3919895.20 2023-09-28 13:30:00+08:00 25 2609 Equity(25 [2609]) 85400 45.515101 45.45 3881430.00 2023-10-02 13:30:00+08:00 34 2886 Equity(34 [2886]) 103564 37.907355 37.60 3894006.40 2023-10-02 13:30:00+08:00 6 1590 Equity(6 [1590]) 3988 1006.440705 1005.00 4007940.00 2023-10-03 13:30:00+08:00 34 2886 Equity(34 [2886]) 102579 37.908964 37.65 3862099.35 2023-10-03 13:30:00+08:00 24 2603 Equity(24 [2603]) 33982 110.657513 110.50 3755011.00 <pre><code>stats.net_leverage\n</code></pre> <pre><code>2023-09-21 13:30:00+08:00    0.000000\n2023-09-22 13:30:00+08:00    0.779359\n2023-09-25 13:30:00+08:00    0.907900\n2023-09-26 13:30:00+08:00    0.811908\n2023-09-27 13:30:00+08:00    0.804394\n2023-09-28 13:30:00+08:00    0.799249\n2023-10-02 13:30:00+08:00    0.819500\n2023-10-03 13:30:00+08:00    0.793739\nName: net_leverage, dtype: float64\n</code></pre> <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#case-2-max_leverage","title":"Case 2 \u8abf\u6574max_leverage","text":"<p>Return to Menu</p> <p>\u63a5\u7e8cCase 1\uff0c\u591a\u8abf\u6574<code>max_leverage=0.70</code>\uff0c\u5176\u9918\u8207Case 1\u76f8\u540c\u3002</p> <pre><code>algo = TargetPercentPipeAlgo(\n                     start_session=algo_start_dt,\n                     end_session=end_dt,\n                     max_leverage=0.70,\n                     pipeline=make_pipeline,\n)\n\n# set_algo_instance\nset_algo_instance(algo)\n\n# run\nstats = algo.run()\n</code></pre> <pre><code>[2024-03-13 02:41:05.749665]: INFO: rebalance: Cancel_order: current time: 2023-09-25 , created: 2023-09-25 , asset: Equity(46 [4904]), amount: -11093 , filled: 0\n[2024-03-13 02:41:05.753066]: INFO: earn_dividends: Equity(6 [1590]), cash_dividend amount: 13.43905496, pay_date: 2023-10-30, div_owed: 47789.27943776\n[2024-03-13 02:41:05.754062]: INFO: handle_split: after split: asset: Equity(6 [1590]), amount: 3554, cost_basis: 982.73, last_sale_price: 981.0\n[2024-03-13 02:41:05.754062]: INFO: handle_split: returning cash: 809.13\n[2024-03-13 02:41:05.795164]: INFO: handle_simulation_end: Simulated 8 trading days\nfirst open: 2023-09-21 01:01:00+00:00\nlast close: 2023-10-03 05:30:00+00:00\n</code></pre> <pre><code>stats.net_leverage\n</code></pre> <pre><code>2023-09-21 13:30:00+08:00    0.000000\n2023-09-22 13:30:00+08:00    0.704456\n2023-09-25 13:30:00+08:00    0.783204\n2023-09-26 13:30:00+08:00    0.708862\n2023-09-27 13:30:00+08:00    0.703443\n2023-09-28 13:30:00+08:00    0.698989\n2023-10-02 13:30:00+08:00    0.715883\n2023-10-03 13:30:00+08:00    0.694088\nName: net_leverage, dtype: float64\n</code></pre> <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#case-3-tradeday","title":"Case 3 \u8abf\u6574tradeday","text":"<p>Return to Menu </p> <p>\u63a5\u7e8cCase 1\uff0c\u591a\u65b0\u589e<code>tradeday</code>\uff0c\u5176\u9918\u8207Case 1\u76f8\u540c\u3002</p> <pre><code># \u8a2d\u5b9a\u518d\u5e73\u8861\u65e5\u671f\nfreq = 'MS'   # QS-JUL  MS W\n_tradeday = list(pd.date_range(start=start_dt, end=end_dt, freq=freq))\ntradeday = [get_calendar(calendar_name).next_open(pd.Timestamp(i)).strftime('%Y-%m-%d') if \\\n           get_calendar(calendar_name).is_session(i)==False else i.strftime('%Y-%m-%d') for i in _tradeday]\ntradeday\n</code></pre> <pre><code>['2023-06-01', '2023-07-03', '2023-08-01', '2023-09-01', '2023-10-02']\n</code></pre> <pre><code>algo_start_dt\n</code></pre> <pre><code>Timestamp('2023-09-21 00:00:00+0000', tz='UTC')\n</code></pre> <pre><code>algo = TargetPercentPipeAlgo(\n                     start_session=algo_start_dt,\n                     end_session=end_dt,           \n                     tradeday=tradeday,\n                     pipeline=make_pipeline,\n)\n\n# set_algo_instance\nset_algo_instance(algo)\n\n# run\nstats = algo.run()\n</code></pre> <pre><code>[2024-03-13 02:41:05.883443]: INFO: handle_simulation_end: Simulated 8 trading days\nfirst open: 2023-09-21 01:01:00+00:00\nlast close: 2023-10-03 05:30:00+00:00\n</code></pre> <pre><code>positions, transactions, orders = get_transaction_detail(stats)\n</code></pre> <pre><code>transactions\n</code></pre> sid symbol amount dt price order_id asset commission 2023-10-03 13:30:00+08:00 24 2603 35242 2023-10-03 13:30:00+08:00 110.500051 35a33e935bde4439b8e113256e10f083 Equity(24 [2603]) None 2023-10-03 13:30:00+08:00 34 2886 106382 2023-10-03 13:30:00+08:00 37.650179 fb0b44482bc54fff9b6dec3fd649e715 Equity(34 [2886]) None <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#case-4-rebalance_date_rule","title":"Case 4 \u8abf\u6574rebalance_date_rule","text":"<p>Return to Menu </p> <p>\u63a5\u7e8cCase 1\uff0c\u591a\u65b0\u589e<code>rebalance_date_rule</code>\uff0c\u4e26\u4fee\u6539<code>start_session</code>\u70ba2023-09-01\uff0c\u5176\u9918\u8207Case 1\u76f8\u540c\u3002</p> <pre><code>from zipline.api import date_rules\n\nalgo = TargetPercentPipeAlgo(\n                     start_session=pd.Timestamp('2023-09-01', tz='UTC'),\n                     end_session=end_dt,\n                     pipeline=make_pipeline,\n                     # \u6bcf\u6708\u7684\u7b2c\u56db\u500b\u4ea4\u6613\u65e5\u4e0b\u55ae\n                     rebalance_date_rule=date_rules.month_start(days_offset=3) \n)\n\n# set_algo_instance\nset_algo_instance(algo)\n\n# run\nstats = algo.run()\n</code></pre> <pre><code>[2024-03-13 02:41:06.016104]: INFO: handle_simulation_end: Simulated 22 trading days\nfirst open: 2023-09-01 01:01:00+00:00\nlast close: 2023-10-03 05:30:00+00:00\n</code></pre> <pre><code>positions, transactions, orders = get_transaction_detail(stats)\n</code></pre> <pre><code>orders\n</code></pre> sid symbol id dt reason created amount filled commission stop limit stop_reached limit_reached asset status 2023-09-06 13:30:00+08:00 41 3034 4706e48bb8644098b53fd9a9c90ed314 2023-09-06 13:30:00+08:00 None 2023-09-06 13:30:00+08:00 9411 0 0 None None False False Equity(41 [3034]) 0 2023-09-06 13:30:00+08:00 14 2327 ca20e3e3e6554702a701388075f7b1f3 2023-09-06 13:30:00+08:00 None 2023-09-06 13:30:00+08:00 7920 0 0 None None False False Equity(14 [2327]) 0 2023-09-07 13:30:00+08:00 41 3034 4706e48bb8644098b53fd9a9c90ed314 2023-09-07 13:30:00+08:00 None 2023-09-06 13:30:00+08:00 9411 9411 5727 None None False False Equity(41 [3034]) 1 2023-09-07 13:30:00+08:00 14 2327 ca20e3e3e6554702a701388075f7b1f3 2023-09-07 13:30:00+08:00 None 2023-09-06 13:30:00+08:00 7920 7920 5666 None None False False Equity(14 [2327]) 1 <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#case-5-slippage_model","title":"Case 5 \u8abf\u6574slippage_model","text":"<p>Return to Menu </p> <p>\u63a5\u7e8cCase 1\uff0c\u591a\u65b0\u589e<code>slippage_model</code>\uff0c\u5c07<code>volume_limit</code>\u75310.025\u8abf\u6574\u70ba0.01\uff0c\u5176\u9918\u8207Case 1\u76f8\u540c\u3002</p> <pre><code>algo = TargetPercentPipeAlgo(\n                     start_session=algo_start_dt,\n                     end_session=end_dt,\n                     pipeline=make_pipeline,\n                     slippage_model=slippage.VolumeShareSlippage(volume_limit=0.01, price_impact=0.1)\n)\n\n# set_algo_instance\nset_algo_instance(algo)\n\n# run\nstats = algo.run()\n</code></pre> <pre><code>[2024-03-13 02:41:06.113628]: INFO: rebalance: Cancel_order: current time: 2023-09-22 , created: 2023-09-21 , asset: Equity(46 [4904]), amount: 55478 , filled: 20760\n[2024-03-13 02:41:06.121367]: INFO: rebalance: Cancel_order: current time: 2023-09-25 , created: 2023-09-25 , asset: Equity(46 [4904]), amount: -5780 , filled: 0\n[2024-03-13 02:41:06.121367]: INFO: earn_dividends: Equity(6 [1590]), cash_dividend amount: 13.43905496, pay_date: 2023-10-30, div_owed: 54629.7584124\n[2024-03-13 02:41:06.121367]: INFO: handle_split: after split: asset: Equity(6 [1590]), amount: 4063, cost_basis: 982.73, last_sale_price: 981.0\n[2024-03-13 02:41:06.121367]: INFO: handle_split: returning cash: 643.62\n[2024-03-13 02:41:06.132990]: INFO: rebalance: Cancel_order: current time: 2023-09-26 , created: 2023-09-26 , asset: Equity(6 [1590]), amount: -853 , filled: 0\n[2024-03-13 02:41:06.138066]: INFO: rebalance: Cancel_order: current time: 2023-09-27 , created: 2023-09-26 , asset: Equity(33 [2885]), amount: 157400 , filled: 151500\n[2024-03-13 02:41:06.138066]: INFO: rebalance: Cancel_order: current time: 2023-09-28 , created: 2023-09-28 , asset: Equity(33 [2885]), amount: -44120 , filled: 0\n[2024-03-13 02:41:06.171376]: INFO: handle_simulation_end: Simulated 8 trading days\nfirst open: 2023-09-21 01:01:00+00:00\nlast close: 2023-10-03 05:30:00+00:00\n</code></pre> <pre><code>positions, transactions, orders = get_transaction_detail(stats)\n</code></pre> <pre><code>orders.query('(symbol == \"1590\") &amp; (created.dt.strftime(\"%Y-%m-%d\") == \"2023-09-25\")')\n</code></pre> sid symbol id dt reason created amount filled commission stop limit stop_reached limit_reached asset status 2023-09-25 13:30:00+08:00 6 1590 3217f240f39a4bc88fcdce896268d7cc 2023-09-25 13:30:00+08:00 None 2023-09-25 13:30:00+08:00 -4065 0 0.0 None None False False Equity(6 [1590]) 0 2023-09-26 13:30:00+08:00 6 1590 3217f240f39a4bc88fcdce896268d7cc 2023-09-26 13:30:00+08:00 None 2023-09-25 13:30:00+08:00 -4063 -3210 13609.0 None None False False Equity(6 [1590]) 2 <pre><code># 321000 * 1% = 3210(\u80a1) \n\ndf_bundle_price.query('(symbol == \"1590\") &amp; (date.dt.strftime(\"%Y-%m-%d\") == \"2023-09-26\")')[['symbol','date','volume']]\n</code></pre> symbol date volume 4486 1590 2023-09-26 00:00:00+00:00 321000.0 <pre><code>orders.query('(symbol == \"2885\") &amp; (created.dt.strftime(\"%Y-%m-%d\") == \"2023-09-27\")')\n</code></pre> sid symbol id dt reason created amount filled commission stop limit stop_reached limit_reached asset status 2023-09-27 13:30:00+08:00 33 2885 06063291dd4e449a8871819852919f94 2023-09-27 13:30:00+08:00 None 2023-09-27 13:30:00+08:00 -151500 0 0.0 None None False False Equity(33 [2885]) 0 2023-09-28 13:30:00+08:00 33 2885 06063291dd4e449a8871819852919f94 2023-09-28 13:30:00+08:00 None 2023-09-27 13:30:00+08:00 -151500 -107380 11904.0 None None False False Equity(33 [2885]) 2 <pre><code># 10738000 * 1% = 107380(\u80a1) \n\ndf_bundle_price.query('(symbol == \"2885\") &amp; (date.dt.strftime(\"%Y-%m-%d\") == \"2023-09-28\")')[['symbol','date','volume']]\n</code></pre> symbol date volume 4625 2885 2023-09-28 00:00:00+00:00 10738000.0 <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#case-6-stocklist","title":"Case 6 \u8abf\u6574stocklist","text":"<p>Return to Menu </p> <p>\u63a5\u7e8cCase 1\uff0c\u591a\u65b0\u589e<code>stocklist</code>\uff0c\u5176\u9918\u8207Case 1\u76f8\u540c\u3002  </p> <p>\u8a3b1\uff1a<code>stocklist</code>\u9650\u5236\u662f\u5728pipeline\u57f7\u884c\u5b8c\u5f8c\u3002  </p> <p>\u8a3b2\uff1a\u4e5f\u53ef\u4ee5\u4f7f\u7528pipeline\u76f4\u63a5\u9650\u5236\u80a1\u7968\u6c60\u3002</p> <pre><code>len(StockList)\n</code></pre> <pre><code>55\n</code></pre> <pre><code>_StockList = [i for i in StockList if i!='2886']\nlen(_StockList)\n</code></pre> <pre><code>54\n</code></pre> <pre><code>algo = TargetPercentPipeAlgo(\n                     start_session=algo_start_dt,\n                     end_session=end_dt,            \n                     stocklist=_StockList,\n                     pipeline=make_pipeline,\n)\n\n# set_algo_instance\nset_algo_instance(algo)\n\n# run\nstats = algo.run()\n</code></pre> <pre><code>[2024-03-13 02:41:06.339500]: INFO: rebalance: Cancel_order: current time: 2023-09-22 , created: 2023-09-21 , asset: Equity(46 [4904]), amount: 55478 , filled: 51900\n[2024-03-13 02:41:06.346237]: INFO: rebalance: Cancel_order: current time: 2023-09-25 , created: 2023-09-25 , asset: Equity(46 [4904]), amount: -14450 , filled: 0\n[2024-03-13 02:41:06.349619]: INFO: earn_dividends: Equity(6 [1590]), cash_dividend amount: 13.43905496, pay_date: 2023-10-30, div_owed: 54643.19746736\n[2024-03-13 02:41:06.350619]: INFO: handle_split: after split: asset: Equity(6 [1590]), amount: 4064, cost_basis: 982.73, last_sale_price: 981.0\n[2024-03-13 02:41:06.350619]: INFO: handle_split: returning cash: 643.29\n[2024-03-13 02:41:06.385375]: INFO: handle_simulation_end: Simulated 8 trading days\nfirst open: 2023-09-21 01:01:00+00:00\nlast close: 2023-10-03 05:30:00+00:00\n</code></pre> <pre><code>positions, transactions, orders = get_transaction_detail(stats)\n</code></pre> <pre><code>positions\n</code></pre> sid symbol asset amount cost_basis last_sale_price 2023-09-22 13:30:00+08:00 46 4904 Equity(46 [4904]) 51900 72.207262 72.10 2023-09-25 13:30:00+08:00 46 4904 Equity(46 [4904]) 14450 73.043317 72.90 2023-09-25 13:30:00+08:00 24 2603 Equity(24 [2603]) 34915 116.165477 116.00 2023-09-25 13:30:00+08:00 6 1590 Equity(6 [1590]) 4066 982.407159 981.00 2023-09-26 13:30:00+08:00 25 2609 Equity(25 [2609]) 87157 46.015867 45.95 2023-09-27 13:30:00+08:00 33 2885 Equity(33 [2885]) 157624 25.186117 25.15 2023-09-28 13:30:00+08:00 25 2609 Equity(25 [2609]) 85610 45.515095 45.45 2023-10-02 13:30:00+08:00 6 1590 Equity(6 [1590]) 3997 1006.440770 1005.00 2023-10-03 13:30:00+08:00 24 2603 Equity(24 [2603]) 34102 110.657517 110.50 <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#case-7-order_filling_policy","title":"Case 7 \u8abf\u6574order_filling_policy","text":"<p>Return to Menu </p> <p>\u63a5\u7e8cCase 1\uff0c\u591a\u65b0\u589e<code>order_filling_policy='current_bar'</code>\uff0c\u5176\u9918\u8207Case 1\u76f8\u540c\u3002</p> <pre><code>algo = TargetPercentPipeAlgo(\n                     start_session=algo_start_dt,\n                     end_session=end_dt,\n                     pipeline=make_pipeline,\n                     order_filling_policy='current_bar'\n)\n\n# set_algo_instance\nset_algo_instance(algo)\n\n# run\nstats = algo.run()\n</code></pre> <pre><code>[2024-03-13 02:41:06.476428]: INFO: rebalance: Cancel_order: current time: 2023-09-25 , created: 2023-09-25 , asset: Equity(46 [4904]), amount: -3578 , filled: 0\n[2024-03-13 02:41:06.523514]: INFO: handle_simulation_end: Simulated 8 trading days\nfirst open: 2023-09-21 01:01:00+00:00\nlast close: 2023-10-03 05:30:00+00:00\n</code></pre> <pre><code>positions, transactions, orders = get_transaction_detail(stats)\n</code></pre> <pre><code>result.loc['2023-09-22'].query('longs == True')\n</code></pre> longs Equity(6 [1590]) True Equity(24 [2603]) True <pre><code># \u5f9e`orders`\u4e2d\u53ef\u4ee5\u767c\u73fecreated=2023-09-22\u7684\u55ae\u5728\u7576\u5929\u5c31\u6210\u4ea4\uff08status\u75310\u8b8a\u70ba1\uff09\norders.loc['2023-09-22']\n</code></pre> sid symbol id dt reason created amount filled commission stop limit stop_reached limit_reached asset status 2023-09-22 13:30:00+08:00 34 2886 36e7f2eb3d37492e829558f5748560aa 2023-09-22 13:30:00+08:00 None 2023-09-22 08:45:00+08:00 -106951 -106951 17890.0 None None False False Equity(34 [2886]) 1 2023-09-22 13:30:00+08:00 46 4904 0fc833a0c418408dae3da988454b2029 2023-09-22 13:30:00+08:00 None 2023-09-22 08:45:00+08:00 -55478 -51900 16559.0 None None False False Equity(46 [4904]) 0 2023-09-22 13:30:00+08:00 24 2603 737aa5d17c9c43ff814b7c09a94898fe 2023-09-22 13:30:00+08:00 None 2023-09-22 08:45:00+08:00 35043 35043 5718.0 None None False False Equity(24 [2603]) 1 2023-09-22 13:30:00+08:00 6 1590 50897cf4326c46abbea7efdf8869a5af 2023-09-22 13:30:00+08:00 None 2023-09-22 08:45:00+08:00 4081 4081 5717.0 None None False False Equity(6 [1590]) 1 <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#case-8-allow_short","title":"Case 8 \u8abf\u6574allow_short","text":"<p>Return to Menu </p> <p>\u63a5\u7e8cCase 1\uff0c\u591a\u65b0\u589e<code>allow_short=True</code>\uff0c\u5176\u9918\u8207Case 1\u76f8\u540c\u3002  </p> <p>\u4ee5\u4e0b\u8a2d\u5b9apipeline\uff08<code>make_pipeline()</code>\uff09\uff0c\u4e26\u5b9a\u7fa9<code>shorts</code>\u6b04\u4f4d\u7528\u4f86\u5224\u65b7\u9808\u653e\u7a7a\u7684\u80a1\u7968\u3002\u5728<code>shorts</code>\u6b04\u4f4d\u4e2d\u8981\u653e\u7a7a\u7684\u80a1\u7968\u6a19\u8a18\u70baTrue\uff0c\u53cd\u4e4b\u6a19\u8a18\u70baFalse\u3002</p> <pre><code>def make_pipeline():\n    rsi = RSI()\n    longs = rsi.top(2, mask = ~SingleAsset(bundle.asset_finder.lookup_symbol('IR0001', as_of_date=None)))\n    shorts = rsi.bottom(2, mask = ~SingleAsset(bundle.asset_finder.lookup_symbol('IR0001', as_of_date=None)))\n\n    return Pipeline(\n        columns = {\n            \"longs\" : longs,\n            \"shorts\" : shorts\n        }\n    )\n</code></pre> <pre><code>result = run_pipeline(make_pipeline(), algo_start, end)\nresult.query('(longs == True) | (shorts == True)' )\n</code></pre> longs shorts 2023-09-22 00:00:00+00:00 Equity(6 [1590]) True False Equity(10 [2301]) False True Equity(24 [2603]) True False Equity(39 [2912]) False True 2023-09-25 00:00:00+00:00 Equity(10 [2301]) False True Equity(25 [2609]) True False Equity(31 [2883]) False True Equity(34 [2886]) True False 2023-09-26 00:00:00+00:00 Equity(8 [2002]) False True Equity(10 [2301]) False True Equity(33 [2885]) True False Equity(34 [2886]) True False 2023-09-27 00:00:00+00:00 Equity(10 [2301]) False True Equity(17 [2357]) False True Equity(25 [2609]) True False Equity(34 [2886]) True False 2023-09-28 00:00:00+00:00 Equity(6 [1590]) True False Equity(10 [2301]) False True Equity(34 [2886]) True False Equity(39 [2912]) False True 2023-10-02 00:00:00+00:00 Equity(10 [2301]) False True Equity(24 [2603]) True False Equity(34 [2886]) True False Equity(39 [2912]) False True 2023-10-03 00:00:00+00:00 Equity(2 [1301]) False True Equity(6 [1590]) True False Equity(14 [2327]) True False Equity(30 [2882]) False True <pre><code>algo = TargetPercentPipeAlgo(\n                     start_session=algo_start_dt,\n                     end_session=end_dt,\n                     allow_short=True,\n                     pipeline=make_pipeline,\n)\n\n# set_algo_instance\nset_algo_instance(algo)\n\n# run\nstats = algo.run()\n</code></pre> <pre><code>[2024-03-13 02:41:06.669320]: INFO: rebalance: Cancel_order: current time: 2023-09-22 , created: 2023-09-21 , asset: Equity(46 [4904]), amount: 55478 , filled: 51900\n[2024-03-13 02:41:06.681121]: INFO: rebalance: Cancel_order: current time: 2023-09-25 , created: 2023-09-25 , asset: Equity(46 [4904]), amount: -14450 , filled: 0\n[2024-03-13 02:41:06.687058]: INFO: earn_dividends: Equity(6 [1590]), cash_dividend amount: 13.43905496, pay_date: 2023-10-30, div_owed: 54414.73353304\n[2024-03-13 02:41:06.687453]: INFO: handle_split: after split: asset: Equity(6 [1590]), amount: 4047, cost_basis: 982.73, last_sale_price: 981.0\n[2024-03-13 02:41:06.687453]: INFO: handle_split: returning cash: 648.82\n[2024-03-13 02:41:06.734225]: INFO: rebalance: Cancel_order: current time: 2023-10-02 , created: 2023-09-28 , asset: Equity(39 [2912]), amount: -14669 , filled: -8575\n[2024-03-13 02:41:06.747551]: INFO: handle_simulation_end: Simulated 8 trading days\nfirst open: 2023-09-21 01:01:00+00:00\nlast close: 2023-10-03 05:30:00+00:00\n</code></pre> <pre><code>positions, transactions, orders = get_transaction_detail(stats)\n</code></pre> <pre><code># \u7576\u5929\u53d6\u6d88\norders.query('(symbol == \"2912\") &amp; (created.dt.strftime(\"%Y-%m-%d\") == \"2023-09-28\")')\n</code></pre> sid symbol id dt reason created amount filled commission stop limit stop_reached limit_reached asset status 2023-09-28 13:30:00+08:00 39 2912 2ed71c04d41546fabc89536cab7b49de 2023-09-28 13:30:00+08:00 None 2023-09-28 13:30:00+08:00 -14669 0 0.0 None None False False Equity(39 [2912]) 0 2023-10-02 13:30:00+08:00 39 2912 2ed71c04d41546fabc89536cab7b49de 2023-10-02 13:30:00+08:00 None 2023-09-28 13:30:00+08:00 -14669 -8575 9980.0 None None False False Equity(39 [2912]) 2 <pre><code># 343000 * 2.5% = 8575(\u80a1) \n\ndf_bundle_price.query('(symbol == \"2912\") &amp; (date.dt.strftime(\"%Y-%m-%d\") == \"2023-10-02\")')[['symbol','date','volume']]\n</code></pre> symbol date volume 4687 2912 2023-10-02 00:00:00+00:00 343000.0 <pre><code>positions['mv'] = positions['amount'] * positions['last_sale_price']\npositions.query('(symbol == \"2912\")')\n</code></pre> sid symbol asset amount cost_basis last_sale_price mv 2023-09-25 13:30:00+08:00 39 2912 Equity(39 [2912]) -15079 263.315631 264.5 -3988395.5 2023-10-02 13:30:00+08:00 39 2912 Equity(39 [2912]) -8575 261.819714 263.0 -2255225.0 2023-10-03 13:30:00+08:00 39 2912 Equity(39 [2912]) -14152 261.433302 262.0 -3707824.0 <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#case-9-cancel_datedelta","title":"Case 9 \u8abf\u6574cancel_datedelta","text":"<p>Return to Menu </p> <p>\u63a5\u7e8cCase 8\uff0c\u591a\u65b0\u589e<code>cancel_datedelta=2</code>\uff0c\u5176\u9918\u8207Case 8\u76f8\u540c\u3002  </p> <pre><code>algo = TargetPercentPipeAlgo(\n                     start_session=algo_start_dt,\n                     end_session=end_dt,\n                     allow_short=True,\n                     cancel_datedelta=2,\n                     pipeline=make_pipeline,\n)\n\n# set_algo_instance\nset_algo_instance(algo)\n\n# run\nstats = algo.run()\n</code></pre> <pre><code>[2024-03-13 02:41:06.883576]: INFO: earn_dividends: Equity(6 [1590]), cash_dividend amount: 13.43905496, pay_date: 2023-10-30, div_owed: 54414.73353304\n[2024-03-13 02:41:06.883576]: INFO: handle_split: after split: asset: Equity(6 [1590]), amount: 4047, cost_basis: 982.73, last_sale_price: 981.0\n[2024-03-13 02:41:06.883576]: INFO: handle_split: returning cash: 648.82\n[2024-03-13 02:41:06.951237]: INFO: handle_simulation_end: Simulated 8 trading days\nfirst open: 2023-09-21 01:01:00+00:00\nlast close: 2023-10-03 05:30:00+00:00\n</code></pre> <pre><code>result = run_pipeline(make_pipeline(), algo_start, end)\nresult.query('(longs == True) | (shorts == True)' )\n</code></pre> longs shorts 2023-09-22 00:00:00+00:00 Equity(6 [1590]) True False Equity(10 [2301]) False True Equity(24 [2603]) True False Equity(39 [2912]) False True 2023-09-25 00:00:00+00:00 Equity(10 [2301]) False True Equity(25 [2609]) True False Equity(31 [2883]) False True Equity(34 [2886]) True False 2023-09-26 00:00:00+00:00 Equity(8 [2002]) False True Equity(10 [2301]) False True Equity(33 [2885]) True False Equity(34 [2886]) True False 2023-09-27 00:00:00+00:00 Equity(10 [2301]) False True Equity(17 [2357]) False True Equity(25 [2609]) True False Equity(34 [2886]) True False 2023-09-28 00:00:00+00:00 Equity(6 [1590]) True False Equity(10 [2301]) False True Equity(34 [2886]) True False Equity(39 [2912]) False True 2023-10-02 00:00:00+00:00 Equity(10 [2301]) False True Equity(24 [2603]) True False Equity(34 [2886]) True False Equity(39 [2912]) False True 2023-10-03 00:00:00+00:00 Equity(2 [1301]) False True Equity(6 [1590]) True False Equity(14 [2327]) True False Equity(30 [2882]) False True <pre><code>positions, transactions, orders = get_transaction_detail(stats)\n</code></pre> <pre><code>orders.query('(symbol == \"2912\") &amp; (created.dt.strftime(\"%Y-%m-%d\") == \"2023-09-28\")')\n</code></pre> sid symbol id dt reason created amount filled commission stop limit stop_reached limit_reached asset status 2023-09-28 13:30:00+08:00 39 2912 05ab5284f0904f0599fce02cafe7dd93 2023-09-28 13:30:00+08:00 None 2023-09-28 13:30:00+08:00 -14660 0 0.0 None None False False Equity(39 [2912]) 0 2023-10-02 13:30:00+08:00 39 2912 05ab5284f0904f0599fce02cafe7dd93 2023-10-02 13:30:00+08:00 None 2023-09-28 13:30:00+08:00 -14660 -8575 9980.0 None None False False Equity(39 [2912]) 0 2023-10-03 13:30:00+08:00 39 2912 05ab5284f0904f0599fce02cafe7dd93 2023-10-03 13:30:00+08:00 None 2023-09-28 13:30:00+08:00 -14660 -14660 17035.0 None None False False Equity(39 [2912]) 1 <pre><code># 10/02\uff1a343000 * 2.5% = 8575(\u80a1) \n# 10/03\uff1a808000 * 2.5% = 20200(\u80a1) \n\ndf_bundle_price.query('(symbol == \"2912\") &amp; (date.dt.strftime(\"%Y-%m-%d\")&gt;=\"2023-10-02\")')\\\n                 [['symbol','date','volume']]\n</code></pre> symbol date volume 4687 2912 2023-10-02 00:00:00+00:00 343000.0 4743 2912 2023-10-03 00:00:00+00:00 808000.0 <pre><code>positions['mv'] = positions['amount'] * positions['last_sale_price']\npositions.query('(symbol == \"2912\")')\n</code></pre> sid symbol asset amount cost_basis last_sale_price mv 2023-09-25 13:30:00+08:00 39 2912 Equity(39 [2912]) -15079 263.315631 264.5 -3988395.5 2023-10-02 13:30:00+08:00 39 2912 Equity(39 [2912]) -8575 261.819714 263.0 -2255225.0 2023-10-03 13:30:00+08:00 39 2912 Equity(39 [2912]) -14660 261.412688 262.0 -3840920.0 <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#case-10-limit_buy_multiplier","title":"Case 10 \u8abf\u6574limit_buy_multiplier","text":"<p>Return to Menu </p> <p>\u63a5\u7e8cCase 9\uff0c\u591a\u8a2d\u5b9a<code>limit_buy_multiplier=1.015</code>\uff0c\u5176\u9918\u8207Case 9\u76f8\u540c\u3002</p> <pre><code>result = run_pipeline(make_pipeline(), algo_start, end)\nresult.query('(longs == True) | (shorts == True)' )\n</code></pre> longs shorts 2023-09-22 00:00:00+00:00 Equity(6 [1590]) True False Equity(10 [2301]) False True Equity(24 [2603]) True False Equity(39 [2912]) False True 2023-09-25 00:00:00+00:00 Equity(10 [2301]) False True Equity(25 [2609]) True False Equity(31 [2883]) False True Equity(34 [2886]) True False 2023-09-26 00:00:00+00:00 Equity(8 [2002]) False True Equity(10 [2301]) False True Equity(33 [2885]) True False Equity(34 [2886]) True False 2023-09-27 00:00:00+00:00 Equity(10 [2301]) False True Equity(17 [2357]) False True Equity(25 [2609]) True False Equity(34 [2886]) True False 2023-09-28 00:00:00+00:00 Equity(6 [1590]) True False Equity(10 [2301]) False True Equity(34 [2886]) True False Equity(39 [2912]) False True 2023-10-02 00:00:00+00:00 Equity(10 [2301]) False True Equity(24 [2603]) True False Equity(34 [2886]) True False Equity(39 [2912]) False True 2023-10-03 00:00:00+00:00 Equity(2 [1301]) False True Equity(6 [1590]) True False Equity(14 [2327]) True False Equity(30 [2882]) False True <pre><code>algo = TargetPercentPipeAlgo(\n                     start_session=algo_start_dt,\n                     end_session=end_dt,\n                     limit_buy_multiplier=1.015,\n                     allow_short=True,\n                     cancel_datedelta=2,\n                     pipeline=make_pipeline,\n)\n\n# set_algo_instance\nset_algo_instance(algo)\n\n# run\nstats = algo.run()\n</code></pre> <pre><code>[2024-03-13 02:41:07.183718]: INFO: earn_dividends: Equity(6 [1590]), cash_dividend amount: 13.43905496, pay_date: 2023-10-30, div_owed: 54414.73353304\n[2024-03-13 02:41:07.183718]: INFO: handle_split: after split: asset: Equity(6 [1590]), amount: 4047, cost_basis: 982.73, last_sale_price: 981.0\n[2024-03-13 02:41:07.183718]: INFO: handle_split: returning cash: 648.82\n[2024-03-13 02:41:07.254114]: INFO: exec_cancel: Cancel_order: current time: 2023-10-03,\n                              due to : created&gt;=current time + cancel_datedelta(2 days),\n                              created: 2023-09-28, asset: Equity(6 [1590]), amount: 3931, filled: 0'\n[2024-03-13 02:41:07.259895]: INFO: handle_simulation_end: Simulated 8 trading days\nfirst open: 2023-09-21 01:01:00+00:00\nlast close: 2023-10-03 05:30:00+00:00\n</code></pre> <pre><code>positions, transactions, orders = get_transaction_detail(stats)\n</code></pre> <pre><code>orders\n</code></pre> sid symbol id dt reason created amount filled commission stop limit stop_reached limit_reached asset status 2023-09-21 13:30:00+08:00 34 2886 5e4ce9d6633d408a9389b175c652626b 2023-09-21 13:30:00+08:00 None 2023-09-21 13:30:00+08:00 106951 0 0.0 None 37.96 False False Equity(34 [2886]) 0 2023-09-21 13:30:00+08:00 46 4904 e0b2c8d022ff41959b6f077bccad0c43 2023-09-21 13:30:00+08:00 None 2023-09-21 13:30:00+08:00 55478 0 0.0 None 73.18 False False Equity(46 [4904]) 0 2023-09-21 13:30:00+08:00 10 2301 25b053b3403b4ec4aa3408745f592ac4 2023-09-21 13:30:00+08:00 None 2023-09-21 13:30:00+08:00 -33613 0 0.0 None NaN False False Equity(10 [2301]) 0 2023-09-21 13:30:00+08:00 44 3231 7a065d9e8d604f699ec3efd6ca41d47c 2023-09-21 13:30:00+08:00 None 2023-09-21 13:30:00+08:00 -39800 0 0.0 None NaN False False Equity(44 [3231]) 0 2023-09-22 13:30:00+08:00 34 2886 5e4ce9d6633d408a9389b175c652626b 2023-09-22 13:30:00+08:00 None 2023-09-21 13:30:00+08:00 106951 106951 5761.0 None 37.96 False True Equity(34 [2886]) 1 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 2023-10-03 13:30:00+08:00 39 2912 aaa092b0d9954807a887fab5edbed96e 2023-10-03 13:30:00+08:00 None 2023-10-03 13:30:00+08:00 14660 0 0.0 None NaN False False Equity(39 [2912]) 0 2023-10-03 13:30:00+08:00 6 1590 01f05fe434e643268c1562ae1004734a 2023-10-03 13:30:00+08:00 None 2023-10-03 13:30:00+08:00 3762 0 0.0 None 1012.97 False False Equity(6 [1590]) 0 2023-10-03 13:30:00+08:00 14 2327 606f2de8c38d4be484df5d6889fe5e28 2023-10-03 13:30:00+08:00 None 2023-10-03 13:30:00+08:00 7221 0 0.0 None 527.80 False False Equity(14 [2327]) 0 2023-10-03 13:30:00+08:00 2 1301 d5aa6f02906f4e008bceac04ade72d21 2023-10-03 13:30:00+08:00 None 2023-10-03 13:30:00+08:00 -47471 0 0.0 None NaN False False Equity(2 [1301]) 0 2023-10-03 13:30:00+08:00 30 2882 82adef75477d4095beaf6b4e02657dcb 2023-10-03 13:30:00+08:00 None 2023-10-03 13:30:00+08:00 -85340 0 0.0 None NaN False False Equity(30 [2882]) 0 <p>92 rows \u00d7 15 columns</p> <pre><code>orders.query('(symbol == \"1590\") &amp; (created.dt.strftime(\"%Y-%m-%d\") == \"2023-09-28\")')\n</code></pre> sid symbol id dt reason created amount filled commission stop limit stop_reached limit_reached asset status 2023-09-28 13:30:00+08:00 6 1590 7a1633e9d2314561bf5fc6b235784201 2023-09-28 13:30:00+08:00 None 2023-09-28 13:30:00+08:00 3931 0 0.0 None 993.68 False False Equity(6 [1590]) 0 2023-10-03 13:30:00+08:00 6 1590 7a1633e9d2314561bf5fc6b235784201 2023-10-03 13:30:00+08:00 None 2023-09-28 13:30:00+08:00 3931 0 0.0 None 993.68 False False Equity(6 [1590]) 2 <pre><code># 9/28 979 * 1.015 = 993.685\ndf_bundle_price.query('(symbol == \"1590\") &amp; (date.dt.strftime(\"%Y-%m-%d\")&gt;=\"2023-09-28\")')\\\n                 [['symbol','date','close']]\n</code></pre> symbol date close 4598 1590 2023-09-28 00:00:00+00:00 979.0 4654 1590 2023-10-02 00:00:00+00:00 1005.0 4710 1590 2023-10-03 00:00:00+00:00 998.0 <p></p>"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#case-11-custom_weightanalyzerecord_varsget_record_varsget_transaction_detail","title":"Case 11 \u8abf\u6574custom_weight\u3001analyze\u3001record_vars\u3001get_record_vars\u8207get_transaction_detail","text":"<p>Return to Menu </p> <p>\u63a5\u7e8cCase 10\uff0c\u591a\u8a2d\u5b9a<code>custom_weight</code>=True\u3001<code>analyze</code>\u3001<code>record_vars</code>\u3001<code>get_record_vars</code>=True\u8207<code>get_transaction_detail</code>=True\uff0c\u5176\u9918\u8207Case 10\u76f8\u540c\u3002</p> <pre><code>class Weight(CustomFactor):\n\n    inputs =  [TQAltDataSet.Market_Cap_Dollars] \n    outputs = [\"Market_Cap_Dollars\",\"Sum_Market_Cap_Dollars\",\"Weight\"]   \n    window_length = 1\n\n    def compute(self, today, assets, out, Market_Cap_Dollars):\n\n        out.Market_Cap_Dollars[:] = Market_Cap_Dollars\n        out.Sum_Market_Cap_Dollars[:] = np.nansum(Market_Cap_Dollars, axis=1)\n        out.Weight[:] = Market_Cap_Dollars / np.sum(Market_Cap_Dollars, axis=1)\n</code></pre> <pre><code>def make_pipeline():\n\n    rsi = RSI()\n    longs = rsi.top(2, mask = ~SingleAsset(bundle.asset_finder.lookup_symbol('IR0001', as_of_date=None)))\n    shorts = rsi.bottom(2, mask = ~SingleAsset(bundle.asset_finder.lookup_symbol('IR0001', as_of_date=None)))\n\n    return Pipeline(\n\n        columns = {\n            \"Market_Cap_Dollars\":Weight().Market_Cap_Dollars,        \n            \"longs\" : longs,\n            \"shorts\" : shorts,\n            \"long_weights\" : Weight(mask=longs).Weight,\n            \"short_weights\" : Weight(mask=shorts).Weight\n        }\n    )\n</code></pre> <pre><code>def analyze(context, perf):\n\n    fig = plt.figure(figsize=(16, 24), dpi=400)\n\n    # First chart(\u7d2f\u7a4d\u5831\u916c)\n    ax = fig.add_subplot(611) \n    ax.set_title('Strategy Results') \n    ax.plot(perf['algorithm_period_return'],\n            linestyle='-', \n            label='algorithm period return',\n            linewidth=3.0)\n    ax.plot(perf['benchmark_period_return'],\n            linestyle='-', \n            label='benchmark period return',\n            linewidth=3.0)\n    ax.legend()\n    ax.grid(False)\n\n    # Second chart(returns)\n    ax = fig.add_subplot(612, sharex=ax)       \n    ax.plot(perf['returns'],\n            linestyle='-', \n            label='returns',\n            linewidth=3.0)\n    ax.legend()\n    ax.grid(False)\n\n    # Third chart(ending_cash) -&gt; \u89c0\u5bdf\u662f\u5426\u8d85\u8cb7\n    ax = fig.add_subplot(613, sharex=ax)\n    ax.plot(perf['ending_cash'], \n            label='ending_cash',\n            linestyle='-',\n            linewidth=3.0)\n    ax.axhline(y=1, c='r', linewidth=1)\n    ax.legend()\n    ax.grid(False)\n\n    # Forth chart(shorts_count) -&gt; \u89c0\u5bdf\u662f\u5426\u653e\u7a7a\n    ax = fig.add_subplot(614, sharex=ax)\n    ax.plot(perf['shorts_count'], \n            label='shorts_count',\n            linestyle='-',\n            linewidth=3.0)\n    ax.yaxis.set_major_locator(MaxNLocator(integer=True))\n    ax.axhline(y=0, c='r', linewidth=1)\n    ax.legend()\n    ax.grid(False)\n\n    # Fifth chart(longs_count)\n    ax = fig.add_subplot(615, sharex=ax)\n    ax.plot(perf['longs_count'], \n            label='longs_count',\n            linestyle='-',\n            linewidth=3.0)\n    ax.yaxis.set_major_locator(MaxNLocator(integer=True))\n    ax.axhline(y=0, c='r', linewidth=1)\n    ax.legend()\n    ax.grid(False) \n\n    # Sixth chart(weights) -&gt; \u89c0\u5bdf\u6bcf\u65e5\u6301\u80a1\u6b0a\u91cd\n    ax = fig.add_subplot(616, sharex=ax)        \n    weights = pd.concat([df.to_frame(d) for d, df in perf['daily_weights'].dropna().items()],axis=1).T\n\n    for i in weights.columns:\n        df = weights.loc[:,i]\n        ax.scatter(df.index,df.values,marker='.', s=5, c='grey', label='daily_weights')\n    ax.axhline(y=0, c='r', linewidth=1)\n    ax.legend(['daily_weights'])\n    ax.grid(False)\n\n    fig.tight_layout()\n\ndef record_vars(context, data):\n    \"\"\"\n    Plot variables at the end of each day.\n    \"\"\"\n\n    record(daily_weights=context.daily_weights,\n           Market_Cap_Dollars=context.output.Market_Cap_Dollars\n          )\n</code></pre> <pre><code>algo = TargetPercentPipeAlgo(\n                     start_session=algo_start_dt,\n                     end_session=end_dt,\n                     limit_buy_multiplier=1.015,\n                     allow_short=True,\n                     custom_weight=True,\n                     cancel_datedelta=2,\n                     pipeline=make_pipeline,\n                     analyze=analyze,\n                     record_vars=record_vars,\n                     get_record_vars=True,\n                     get_transaction_detail=True\n)\n\n# set_algo_instance\nset_algo_instance(algo)\n\n# run\nstats = algo.run()\n</code></pre> <pre><code>[2024-03-13 02:41:07.483598]: INFO: earn_dividends: Equity(6 [1590]), cash_dividend amount: 13.43905496, pay_date: 2023-10-30, div_owed: 48703.13517504\n[2024-03-13 02:41:07.483598]: INFO: handle_split: after split: asset: Equity(6 [1590]), amount: 3622, cost_basis: 982.73, last_sale_price: 981.0\n[2024-03-13 02:41:07.483598]: INFO: handle_split: returning cash: 787.02\n[2024-03-13 02:41:07.583608]: INFO: exec_cancel: Cancel_order: current time: 2023-10-03,\n                              due to : created&gt;=current time + cancel_datedelta(2 days),\n                              created: 2023-09-28, asset: Equity(6 [1590]), amount: 2145, filled: 0'\n[2024-03-13 02:41:07.600275]: INFO: handle_simulation_end: Simulated 8 trading days\nfirst open: 2023-09-21 01:01:00+00:00\nlast close: 2023-10-03 05:30:00+00:00\n</code></pre> <p></p> <pre><code>result = run_pipeline(make_pipeline(), algo_start, end)\nresult.query('(longs == True) | (shorts == True)' )\n</code></pre> Market_Cap_Dollars longs shorts long_weights short_weights 2023-09-22 00:00:00+00:00 Equity(6 [1590]) 1.980000e+11 True False 0.447512 NaN Equity(10 [2301]) 2.818339e+11 False True NaN 0.507101 Equity(24 [2603]) 2.444465e+11 True False 0.552488 NaN Equity(39 [2912]) 2.739405e+11 False True NaN 0.492899 2023-09-25 00:00:00+00:00 Equity(10 [2301]) 2.842023e+11 False True NaN 0.590585 Equity(25 [2609]) 1.599384e+11 True False 0.231433 NaN Equity(31 [2883]) 1.970197e+11 False True NaN 0.409415 Equity(34 [2886]) 5.311406e+11 True False 0.768567 NaN 2023-09-26 00:00:00+00:00 Equity(8 [2002]) 4.122534e+11 False True NaN 0.591931 Equity(10 [2301]) 2.842023e+11 False True NaN 0.408069 Equity(33 [2885]) 3.197649e+11 True False 0.374557 NaN Equity(34 [2886]) 5.339508e+11 True False 0.625443 NaN 2023-09-27 00:00:00+00:00 Equity(10 [2301]) 2.842023e+11 False True NaN 0.516628 Equity(17 [2357]) 2.659082e+11 False True NaN 0.483372 Equity(25 [2609]) 1.604622e+11 True False 0.231780 NaN Equity(34 [2886]) 5.318431e+11 True False 0.768220 NaN 2023-09-28 00:00:00+00:00 Equity(6 [1590]) 1.982000e+11 True False 0.272277 NaN Equity(10 [2301]) 2.842023e+11 False True NaN 0.509667 Equity(34 [2886]) 5.297354e+11 True False 0.727723 NaN Equity(39 [2912]) 2.734207e+11 False True NaN 0.490333 2023-10-02 00:00:00+00:00 Equity(10 [2301]) 2.877548e+11 False True NaN 0.513247 Equity(24 [2603]) 2.455047e+11 True False 0.316682 NaN Equity(34 [2886]) 5.297354e+11 True False 0.683318 NaN Equity(39 [2912]) 2.729008e+11 False True NaN 0.486753 2023-10-03 00:00:00+00:00 Equity(2 [1301]) 5.067130e+11 False True NaN 0.437013 Equity(6 [1590]) 2.010000e+11 True False 0.471237 NaN Equity(14 [2327]) 2.255366e+11 True False 0.528763 NaN Equity(30 [2882]) 6.527799e+11 False True NaN 0.562987"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#algopositions","title":"algo.positions","text":"<pre><code># \u8a08\u7b97\u5be6\u969b\u80a1\u7968\u90e8\u4f4d\u7684weight = \u500b\u80a1\u6301\u80a1\u5e02\u503c\uff0f\u6240\u6709\u80a1\u7968\u90e8\u4f4d\u7684\u6301\u80a1\u5e02\u503c\u52a0\u7e3d\npos = algo.positions\n\npos['mv'] = pos['amount'] * pos['last_sale_price']\n\npositive_sum = pos[pos['mv'] &gt; 0].groupby(level=0)['mv'].sum()\nnegative_sum = - pos[pos['mv'] &lt; 0].groupby(level=0)['mv'].sum()\npos['sum'] = np.where(pos['mv'] &gt; 0,\n                            pos.index.map(positive_sum),\n                            pos.index.map(negative_sum))\n\npos['weight'] = pos['mv'] / pos['sum']\npos\n</code></pre> sid symbol asset amount cost_basis last_sale_price mv sum weight 2023-09-22 13:30:00+08:00 34 2886 Equity(34 [2886]) 147424 37.854390 37.80 5572627.20 8058923.60 0.691485 2023-09-22 13:30:00+08:00 46 4904 Equity(46 [4904]) 34484 72.204762 72.10 2486296.40 8058923.60 0.308515 2023-09-22 13:30:00+08:00 10 2301 Equity(10 [2301]) -33495 119.468922 120.00 -4019400.00 8113352.50 -0.495406 2023-09-22 13:30:00+08:00 44 3231 Equity(44 [3231]) -39941 102.046428 102.50 -4093952.50 8113352.50 -0.504594 2023-09-25 13:30:00+08:00 10 2301 Equity(10 [2301]) -33646 119.468898 120.00 -4037520.00 7969312.50 -0.506633 2023-09-25 13:30:00+08:00 24 2603 Equity(24 [2603]) 38418 116.165508 116.00 4456488.00 8011632.00 0.556252 2023-09-25 13:30:00+08:00 6 1590 Equity(6 [1590]) 3624 982.405312 981.00 3555144.00 8011632.00 0.443748 2023-09-25 13:30:00+08:00 39 2912 Equity(39 [2912]) -14865 263.316060 264.50 -3931792.50 7969312.50 -0.493367 2023-09-26 13:30:00+08:00 10 2301 Equity(10 [2301]) -39051 119.468888 120.00 -4686120.00 7921019.20 -0.591606 2023-09-26 13:30:00+08:00 25 2609 Equity(25 [2609]) 39964 46.015565 45.95 1836345.80 7910665.20 0.232135 2023-09-26 13:30:00+08:00 34 2886 Equity(34 [2886]) 160484 37.904710 37.85 6074319.40 7910665.20 0.767865 2023-09-26 13:30:00+08:00 31 2883 Equity(31 [2883]) -274144 11.747586 11.80 -3234899.20 7921019.20 -0.408394 2023-09-27 13:30:00+08:00 10 2301 Equity(10 [2301]) -26553 119.388370 120.00 -3186360.00 7701800.80 -0.413716 2023-09-27 13:30:00+08:00 34 2886 Equity(34 [2886]) 129025 37.945400 37.70 4864242.50 7806390.10 0.623110 2023-09-27 13:30:00+08:00 33 2885 Equity(33 [2885]) 116984 25.185992 25.15 2942147.60 7806390.10 0.376890 2023-09-27 13:30:00+08:00 8 2002 Equity(8 [2002]) -177424 25.337349 25.45 -4515440.80 7701800.80 -0.586284 2023-09-28 13:30:00+08:00 10 2301 Equity(10 [2301]) -33420 119.711756 121.50 -4060530.00 7843566.00 -0.517689 2023-09-28 13:30:00+08:00 34 2886 Equity(34 [2886]) 158184 37.910076 37.70 5963536.80 7745131.35 0.769972 2023-09-28 13:30:00+08:00 25 2609 Equity(25 [2609]) 39199 45.514840 45.45 1781594.55 7745131.35 0.230028 2023-09-28 13:30:00+08:00 17 2357 Equity(17 [2357]) -10308 365.375480 367.00 -3783036.00 7843566.00 -0.482311 2023-10-02 13:30:00+08:00 10 2301 Equity(10 [2301]) -33420 119.711756 125.50 -4194210.00 6449435.00 -0.650322 2023-10-02 13:30:00+08:00 34 2886 Equity(34 [2886]) 148920 37.920431 37.60 5599392.00 5599392.00 1.000000 2023-10-02 13:30:00+08:00 39 2912 Equity(39 [2912]) -8575 261.819714 263.00 -2255225.00 6449435.00 -0.349678 2023-10-03 13:30:00+08:00 10 2301 Equity(10 [2301]) -32363 119.706008 123.00 -3980649.00 7756069.00 -0.513230 2023-10-03 13:30:00+08:00 34 2886 Equity(34 [2886]) 136276 37.935899 37.65 5130791.40 7442672.40 0.689375 2023-10-03 13:30:00+08:00 39 2912 Equity(39 [2912]) -14410 261.422628 262.00 -3775420.00 7756069.00 -0.486770 2023-10-03 13:30:00+08:00 24 2603 Equity(24 [2603]) 20922 110.657508 110.50 2311881.00 7442672.40 0.310625"},{"location":"lecture/Simple%20Algorithm-TargetPercentPipeAlgo/#algodict_record_vars","title":"algo.dict_record_vars","text":"<pre><code>record_vars = algo.dict_record_vars\n</code></pre> <pre><code># \u5be6\u969b\u6301\u80a1\u5e02\u503c = \u500b\u80a1\u6301\u80a1\u5e02\u503c\uff0f\u6240\u6709\u80a1\u7968\u90e8\u4f4d\u7684\u6301\u80a1\u5e02\u503c\u52a0\u7e3d * max_leverage\nrecord_vars['daily_weights']\n</code></pre> date symbol daily_weights 0 2023-09-22 00:00:00+08:00 2886 0.559924 1 2023-09-22 00:00:00+08:00 4904 0.249817 2 2023-09-22 00:00:00+08:00 2301 -0.403860 3 2023-09-22 00:00:00+08:00 3231 -0.411351 4 2023-09-25 00:00:00+08:00 2301 -0.407072 5 2023-09-25 00:00:00+08:00 2603 0.449313 6 2023-09-25 00:00:00+08:00 1590 0.358437 7 2023-09-25 00:00:00+08:00 2912 -0.396412 8 2023-09-26 00:00:00+08:00 2886 0.622353 9 2023-09-26 00:00:00+08:00 2301 -0.480123 10 2023-09-26 00:00:00+08:00 2609 0.188145 11 2023-09-26 00:00:00+08:00 2883 -0.331436 12 2023-09-27 00:00:00+08:00 2886 0.501285 13 2023-09-27 00:00:00+08:00 2301 -0.328371 14 2023-09-27 00:00:00+08:00 2885 0.303203 15 2023-09-27 00:00:00+08:00 2002 -0.465339 16 2023-09-28 00:00:00+08:00 2886 0.618396 17 2023-09-28 00:00:00+08:00 2301 -0.421061 18 2023-09-28 00:00:00+08:00 2609 0.184744 19 2023-09-28 00:00:00+08:00 2357 -0.392286 20 2023-10-02 00:00:00+08:00 2886 0.597376 21 2023-10-02 00:00:00+08:00 2301 -0.447463 22 2023-10-02 00:00:00+08:00 2912 -0.240600 23 2023-10-03 00:00:00+08:00 2886 0.542337 24 2023-10-03 00:00:00+08:00 2301 -0.420764 25 2023-10-03 00:00:00+08:00 2603 0.244371 26 2023-10-03 00:00:00+08:00 2912 -0.399071 <pre><code># \u500b\u80a1\u7e3d\u5e02\u503c\nrecord_vars['Market_Cap_Dollars']\n</code></pre> date symbol Market_Cap_Dollars 0 2023-09-21 00:00:00+08:00 1101 2.458148e+11 1 2023-09-21 00:00:00+08:00 1216 4.028549e+11 2 2023-09-21 00:00:00+08:00 1301 5.245370e+11 3 2023-09-21 00:00:00+08:00 1303 5.424682e+11 4 2023-09-21 00:00:00+08:00 1326 3.798049e+11 ... ... ... ... 443 2023-10-03 00:00:00+08:00 6415 1.188855e+11 444 2023-10-03 00:00:00+08:00 6505 7.649346e+11 445 2023-10-03 00:00:00+08:00 6669 2.867389e+11 446 2023-10-03 00:00:00+08:00 9910 1.920654e+11 447 2023-10-03 00:00:00+08:00 IR0001 5.189094e+13 <p>448 rows \u00d7 3 columns</p> <p>Return to Menu </p>"},{"location":"lecture/TSMC%20buy%20and%20hold%20strategy/","title":"TSMC \u8cb7\u9032\u6301\u6709\u7b56\u7565","text":"<p>\u672c\u6b21\u7bc4\u4f8b\u5c07\u4ee5\u6700\u7d93\u5178\u7684\u8cb7\u9032\u6301\u6709\u7b56\u7565\u5411\u60a8\u4ecb\u7d39 zipline \u56de\u6e2c\u65b9\u6cd5\uff0c\u4e26\u4e14\u4ecb\u7d39\u7d44\u5efa zipline \u4ea4\u6613\u7b56\u7565\u6700\u57fa\u790e\u7684\u56db\u5927\u51fd\u5f0f - <code>initialize</code>\u3001<code>handle_data</code>\u3001<code>analyze</code>\u3001<code>run_algorithm</code>\u3002</p>"},{"location":"lecture/TSMC%20buy%20and%20hold%20strategy/#_1","title":"\u5c0e\u5165\u80a1\u50f9\u8cc7\u6599","text":"<p>\u5728 zipline \u4e2d\uff0c\u6211\u5011\u4f7f\u7528 <code>os</code> \u642d\u914d <code>!zipline ingest</code> \u5c07\u80a1\u50f9\u8cc7\u6599\u5c0e\u5165\u5230\u672c\u5730\u7aef\u3002\u5e38\u7528\u5beb\u6cd5\u70ba:  <pre><code>!zipline ingest -b tqant \n</code></pre> \u5176\u4e2d <code>-b</code> \u70ba bundle \u4e4b\u6db5\u7fa9\uff0cbundle \u70ba\u80a1\u7968\u50f9\u91cf\u8cc7\u8a0a\u7684\u8f09\u9ad4\uff0c<code>tquant</code> \u5247\u662f bundle \u4e4b\u540d\u7a31\uff0c\u53ef\u7531\u4f7f\u7528\u8005\u81ea\u5b9a\u7fa9\u3002\u5728 ingest \u4e4b\u524d\uff0c\u9700\u5148\u4f7f\u7528 <code>os</code> \u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578\uff0c\u4ee5\u65b9\u4fbf zipline \u63a5\u6536\u4f7f\u7528\u8005\u6240\u6b32\u6293\u53d6\u4e4b\u8cc7\u7522\u6a19\u7684\u8207\u5e74\u4efd\u4e4b\u8981\u6c42\u3002\u4e00\u822c\u800c\u8a00\uff0c\u91dd\u5c0d\u74b0\u5883\u8b8a\u6578\u4e4b\u5beb\u6cd5\u5982\u4e0b: <pre><code>os.environ['TEJAPI_BASE'] = \"https://api.tej.com.tw\" ==&gt; \u5c0e\u822a\u81f3 tej api \u7db2\u57df\u3002\nos.environ['TEJAPI_KEY'] = \"your key\" ==&gt; \u500b\u4eba api key \u4ee5\u9a57\u8b49\u8eab\u5206\u3002\nos.environ['mdate'] = \"20170601 20230702\" ==&gt; \u6b32\u6293\u53d6\u8cc7\u6599\u4e4b\u65e5\u671f\u5340\u9593\uff0c\u524d\u8005\u70ba\u8d77\u59cb\u65e5\uff0c\u5f8c\u8005\u70ba\u7d42\u6b62\u65e5\u3002\nos.environ['ticker'] = '2330 2337' ==&gt; \u6240\u6b32\u6293\u53d6\u80a1\u7968\u4e4b\u4ee3\u78bc\u3002\n</code></pre></p> <pre><code>import os \nos.environ['TEJAPI_BASE'] = \"https://api.tej.com.tw\"\nos.environ['TEJAPI_KEY'] = \"your key\"\nos.environ['mdate'] = \"20170601 20230702\"\nos.environ['ticker'] = '2330 IR0001'\n!zipline ingest -b tquant\n</code></pre> <pre><code>Merging daily equity files:\n\n\n[2023-08-09 05:09:50.565678] INFO: zipline.data.bundles.core: Ingesting tquant.\n</code></pre>"},{"location":"lecture/TSMC%20buy%20and%20hold%20strategy/#initialize","title":"Initialize \u51fd\u5f0f","text":"<p><code>initialize</code> \u70ba\u69cb\u5efa zipline \u4ea4\u6613\u7b56\u7565\u7684\u91cd\u8981\u51fd\u5f0f\uff0c\u6703\u5728\u56de\u6e2c\u958b\u59cb\u524d\u88ab\u547c\u53eb\u4e00\u6b21\uff0c\u4e3b\u8981\u4efb\u52d9\u70ba\u8a2d\u5b9a\u56de\u6e2c\u74b0\u5883\uff0c\u5e38\u898b\u7528\u65bc\u8a2d\u5b9a\u6ed1\u50f9\u6216\u624b\u7e8c\u8cbb\u3002\u5206\u5225\u53ef\u4ee5\u4f7f\u7528:</p> <ol> <li> <p>zipline.api.set_slippage</p> <p>\u8a2d\u5b9a\u6ed1\u50f9\u6a21\u5f0f\uff0czipline \u5171\u63d0\u4f9b\u56db\u7a2e\u6ed1\u50f9\u8a08\u7b97\u65b9\u6cd5\uff0c\u8a73\u8acb\u8acb\u898b\u5f8c\u7e8c\u6559\u5b78-zipline slippage\u3002</p> </li> <li> <p>zipline.api.set_commission</p> <p>\u8a2d\u5b9a\u624b\u7e8c\u8cbb\u6a21\u5f0f\uff0czipline \u5171\u63d0\u4f9b\u4e09\u7a2e\u624b\u7e8c\u8cbb\u8a08\u7b97\u65b9\u6cd5\uff0c\u8a73\u8acb\u8acb\u898b\u5f8c\u7e8c\u6559\u5b78-zipline commission\u3002</p> </li> </ol> <p>\u5e38\u898b\u7684\u5beb\u6cd5\u5982\u4e0b: <pre><code>def initialize(context):\n    set_slippage(slippage.FixedSlippage())\n    set_commission(commission.PerShare(cost=0.00285))\n</code></pre> \u9664\u6b64\u4e4b\u5916\uff0c\u6211\u5011\u53ef\u4ee5\u6ce8\u610f\u5230 initialize \u542b\u6709\u4e00\u500b\u53c3\u6578 context\uff0ccontext \u70ba\u4e00\u500b\u547d\u540d\u7a7a\u9593 (namespace)\uff0c\u53ef\u4ee5\u5728\u5132\u5b58\u5404\u7a2e\u81ea\u5b9a\u7fa9\u4e4b\u8b8a\u6578\u4e26\u4e14\u5728\u6bcf\u6b21\u4ea4\u6613\u65e5\u4e2d\u5faa\u74b0\u547c\u53eb\u3002\u8209\u4f8b\u4f86\u8aaa\uff0c\u6211\u5011\u8a2d\u7f6e\u4e00\u500b\u8b8a\u6578 (context.day = 0) \u4f86\u8a08\u7b97\u4ea4\u6613\u65e5\u5929\u6578\u8207\u4e00\u500b\u8b8a\u6578 (context.has_ordered = False) \u7d00\u9304\u662f\u5426\u5df2\u7d93\u6301\u6709\u53f0\u7a4d\u96fb\u80a1\u7968\u3002 <pre><code>def initialize(context):\n    context.day = 0\n    context.has_ordered = False\n    set_slippage(slippage.FixedSlippage())\n    set_commission(commission.PerShare(cost=0.00285))\n</code></pre></p> <pre><code>from zipline.api import set_slippage, set_commission\nfrom zipline.finance import slippage, commission\n\ndef initialize(context):\n    context.day = 0\n    context.has_ordered = False\n    set_slippage(slippage.FixedSlippage())\n    set_commission(commission.PerShare(cost=0.00285))\n</code></pre>"},{"location":"lecture/TSMC%20buy%20and%20hold%20strategy/#handle_data","title":"Handle_data \u51fd\u5f0f","text":"<p><code>handle_data</code> \u70ba\u69cb\u5efa zipline \u4ea4\u6613\u7b56\u7565\u7684\u91cd\u8981\u51fd\u5f0f\uff0c\u6703\u5728\u56de\u6e2c\u958b\u59cb\u5f8c\u6bcf\u5929\u88ab\u547c\u53eb\uff0c\u4e3b\u8981\u4efb\u52d9\u70ba\u8a2d\u5b9a\u4ea4\u6613\u7b56\u7565\u3001\u4e0b\u55ae\u8207\u7d00\u9304\u4ea4\u6613\u8cc7\u8a0a\u3002</p> <p>\u5176\u4e2d <code>handle_data</code> \u542b\u6709\u5169\u7a2e\u53c3\u6578 -- context , data\u3002context \u8207\u4e0a\u8ff0 <code>initialize</code> \u4ecb\u7d39\u529f\u80fd\u76f8\u540c\uff0c\u9019\u88e1\u70ba\u4e86\u8a18\u9304\u4ea4\u6613\u5929\u6578\u8207\u5426\u6301\u6709\u53f0\u7a4d\u96fb\u80a1\u7968\uff0c\u6211\u5011\u8a2d\u5b9a\u70ba:</p> <pre><code>def handle_data(context, data):\n\n    # \u6bcf\u6b21\u4ea4\u6613\u65e5\u52a0 1 \u5929\u3002\n    context.day += 1 \n\n    # \u5224\u5225\u662f\u5426\u6301\u6709\u53f0\u7a4d\u96fb\uff0c\u8acb\u6ce8\u610f\u6211\u5011\u5728 initialize \u8a2d\u5b9a context.has_ordered \u70ba False\u3002\n    if not context.has_ordered:\n</code></pre> <p>\u63a5\u8457\u6211\u5011\u5f15\u5165\u4ea4\u6613\u4e0b\u55ae\u51fd\u5f0f\uff0c\u4e0b\u55ae\u51fd\u5f0f\u5171\u6709\u516d\u500b\u4e0d\u540c\u7a2e\u985e\uff0c\u8acb\u898b\u6559\u6750\u4e2d\u4ee5 zipline order \u958b\u982d\u4e4b\u6587\u4ef6\uff0c\u9019\u88e1\u4f7f\u7528\u6700\u57fa\u790e\u7684\u4e0b\u55ae\u51fd\u5f0f:</p>"},{"location":"lecture/TSMC%20buy%20and%20hold%20strategy/#ziplineapiorder","title":"zipline.api.order","text":"<p>\u8cb7\u9032\u6216\u8ce3\u51fa n \u80a1\u7684\u8cc7\u7522\u6a19\u7684\u3002</p>"},{"location":"lecture/TSMC%20buy%20and%20hold%20strategy/#parameters","title":"Parameters:","text":"<ul> <li>asset: zipline.assets.Asset         \u6b32\u4e0b\u55ae\u4e4b\u8cc7\u7522\uff0c\u8acb\u6ce8\u610f\u8cc7\u6599\u578b\u614b\u70ba zipline \u7368\u6709\u7684 Asset \u578b\u614b\u3002</li> <li>amount: int         \u6b32\u4e0b\u55ae\u80a1\u6578\u3002</li> <li>limit_price: float, optional         \u9650\u50f9\u3002</li> <li>stop_price: float, optional         \u505c\u50f9\u3002</li> </ul> <p>\u52a0\u5165\u4e0b\u55ae\u51fd\u5f0f order(symbol(\"2330\")\uff0c\u5176\u4e2d symbol(\"2330\") \u5c31\u662f zipline \u4e2d\u7684 Asset \u8cc7\u6599\u578b\u614b\u3002\u4e4b\u5f8c\uff0c\u6211\u5011\u6703\u5c07 context.has_ordered \u8abf\u6574\u6210 True\uff0c\u6b64\u6642\u4e0b\u500b\u4ea4\u6613\u65e5\u5c31\u4e0d\u6703\u518d\u5ea6\u4e0b\u55ae\uff0c\u66f4\u6539\u5b8c\u7a0b\u5f0f\u5982\u4e0b: <pre><code>def handle_data(context, data):\n\n    context.day += 1 \n    if not context.has_ordered:\n\n        # \u4e0b\u55ae\u53f0\u7a4d\u96fb\u80a1\u7968\u4e00\u5f35 == 1000\u80a1\n        order(symbol(\"2330\", 1000)\n\n        # \u8a2d\u5b9a context.has_ordered \u70ba True \u4ee5\u907f\u514d\u4e0b\u6b21\u4ea4\u6613\u65e5\u4e0b\u55ae\n        context.has_ordered = True\n</code></pre> \u6700\u5f8c\u70ba\u4e86\u8a18\u9304\u4ea4\u6613\u5929\u6578\u3001\u662f\u5426\u6301\u6709\u90e8\u4f4d\u8207\u7576\u65e5\u50f9\u683c\uff0c\u6211\u5011\u4f7f\u7528 <code>record</code> \u51fd\u5f0f\uff0c\u5176\u529f\u80fd\u70ba\u8a18\u9304\u6bcf\u500b\u4ea4\u6613\u65e5\u7684\u8cc7\u8a0a\u4e26\u4e14\u5728\u6700\u7d42 <code>run_algorithm</code> \u8f38\u51fa\u7684\u8cc7\u6599\u8868\u4e2d\uff0c\u4ee5\u6b04\u4f4d\u578b\u5f0f\u52a0\u5165\u6240\u7d00\u9304\u8cc7\u8a0a\u3002\u5176\u7a0b\u5f0f\u7de8\u8f2f\u65b9\u5f0f\u5982\u4e0b: <pre><code>record( \u6b04\u4f4d\u540d\u7a31 = \u8cc7\u8a0a)\n</code></pre> \u9019\u88e1\u6211\u5011\u7d00\u9304\u7576\u5929\u4ea4\u6613\u5929\u6578 (context.day)\u3001\u662f\u5426\u6301\u6709\u90e8\u4f4d (context.has_ordered) \u8207\u7576\u5929\u6536\u76e4\u50f9\u683c (data.current(symbol(\"2330\"), \"close\"))\uff0c\u5176\u4e2d\u4e0a\u9762\u6240\u63d0\u5230\u7684 data \u5c31\u662f\u5728 <code>handle_data</code> \u4e2d\u7684 data\uff0cdata \u4e3b\u8981\u529f\u80fd\u70ba\u4fdd\u5b58\u6bcf\u5929\u80a1\u50f9\u7684\u50f9\u91cf\u8cc7\u6599\u4e26\u4e14\u63d0\u4f9b\u547c\u53eb\uff0c\u65bc\u672c\u5be6\u4f8b\u6211\u5011\u6b32\u7d00\u9304\u7576\u5929\u6536\u76e4\u50f9\uff0c\u65bc\u662f\u7528\u5230 <code>data.current()</code> \u51fd\u5f0f\u3002</p>"},{"location":"lecture/TSMC%20buy%20and%20hold%20strategy/#ziplinedatacurrent","title":"zipline.data.current","text":"<p>\u547c\u53eb\u80a1\u7968\u7684\u7576\u65e5\u50f9\u91cf\u8cc7\u8a0a\u3002</p>"},{"location":"lecture/TSMC%20buy%20and%20hold%20strategy/#parameters_1","title":"Parameters:","text":"<ul> <li>assets: zipline.asset.Asset         \u6240\u6b32\u547c\u53eb\u7684\u80a1\u7968\uff0c\u8acb\u6ce8\u610f\u8cc7\u6599\u578b\u614b\u70ba zipline \u7368\u6709\u7684 Asset \u578b\u614b\u3002</li> <li>fields: str         \u6240\u6b32\u547c\u53eb\u7684\u50f9\u91cf\u8cc7\u8a0a\uff0c\u63d0\u4f9b 'close', 'open', 'high', 'low' \u8207 'volume'\u3002</li> </ul> <p>\u7531\u65bc\u6211\u5011\u5e0c\u671b\u8a18\u9304\u53f0\u7a4d\u96fb\u7576\u65e5\u6536\u76e4\u50f9\u683c\uff0c\u56e0\u6b64\u7a0b\u5f0f\u7de8\u8f2f\u5982\u4e0b: <pre><code>def handle_data(context, data):\n    context.day += 1 \n    if not context.has_ordered:\n        order(symbol(\"2330\", 1000)\n        context.has_ordered = True\n\n    record( # \u7d00\u9304\u7528\n        trade_days = context.day,\n        has_ordered = context.has_ordered,\n        TSMC = data.current(symbol(\"2330\"), \"close\")\n    )\n</code></pre></p> <pre><code>from zipline.api import order, record, symbol\n\ndef handle_data(context, data):\n    context.day += 1\n    if not context.has_ordered:\n        order(symbol(\"2330\"), 1000)\n        context.has_ordered = True\n\n    record(\n        trade_days = context.day,\n        has_ordered = context.has_ordered,\n        TSMC = data.current(symbol(\"2330\"), \"close\")\n    )\n</code></pre>"},{"location":"lecture/TSMC%20buy%20and%20hold%20strategy/#analyze","title":"Analyze \u51fd\u5f0f","text":"<p><code>analyze</code> \u4e3b\u8981\u7528\u65bc\u56de\u6e2c\u5f8c\u8996\u89ba\u5316\u7b56\u7565\u7e3e\u6548\u8207\u98a8\u96aa\uff0c\u9019\u88e1\u6211\u5011\u4ee5 <code>matplotlib</code> \u7e6a\u88fd\u6295\u7d44\u50f9\u503c\u8868\u8207\u53f0\u7a4d\u96fb\u80a1\u50f9\u8d70\u52e2\u8868\u3002\u5176\u4e2d <code>analyze</code> \u6709\u5169\u500b\u53c3\u6578 context \u8207 perf\uff0ccontext \u5c31\u8207\u4e0a\u8ff0\u76f8\u540c\uff0cperf \u5c31\u662f\u6700\u7d42 <code>run_algorithm</code> \u8f38\u51fa\u7684\u8cc7\u6599\u8868 -- results\u3002\u6211\u5011\u53ef\u4ee5\u63d0\u53d6\u88e1\u9762\u7279\u5b9a\u6b04\u4f4d\u4f86\u7e6a\u88fd\u5716\u8868\u3002</p> <pre><code>import matplotlib.pyplot as plt\ndef analyze(context, perf):\n    ax1 = plt.subplot(211)\n    perf.portfolio_value.plot(ax=ax1,title='portfolio values')\n    ax2 = plt.subplot(212, sharex=ax1)\n    perf['TSMC'].plot(ax=ax2,title='TSMC close')\n    plt.gcf().set_size_inches(18, 8)\n    plt.show()\n</code></pre>"},{"location":"lecture/TSMC%20buy%20and%20hold%20strategy/#run_algorithm","title":"Run_algorithm \u51fd\u5f0f","text":""},{"location":"lecture/TSMC%20buy%20and%20hold%20strategy/#ziplinerun_algorithm","title":"zipline.run_algorithm","text":"<p>\u9032\u884c\u7b56\u7565\u56de\u6e2c\u3002</p>"},{"location":"lecture/TSMC%20buy%20and%20hold%20strategy/#parameters_2","title":"Parameters:","text":"<ul> <li>start: pd.Timestamp or datetime         \u56de\u6e2c\u8d77\u59cb\u65e5\u671f\u3002</li> <li>end: pd.Timestamp or datetime         \u56de\u6e2c\u7d50\u675f\u65e5\u671f\u3002</li> <li>initialize: callable         \u547c\u53eb initialize \u51fd\u5f0f\u4ee5\u7528\u65bc\u56de\u6e2c\u3002</li> <li>capital_base: int         \u521d\u59cb\u8cc7\u91d1\u984d\u5ea6\u3002</li> <li>handle_data: callable, optional         \u547c\u53eb handle_data \u51fd\u5f0f\u4ee5\u7528\u65bc\u56de\u6e2c\u3002</li> <li>before_trading_start: callable, optional         \u547c\u53eb before_trading_start \u51fd\u5f0f\u4ee5\u7528\u65bc\u56de\u6e2c\u3002</li> <li>analyze: callable, optional         \u547c\u53eb analyze \u51fd\u5f0f\u4ee5\u7528\u65bc\u56de\u6e2c\u3002</li> <li>data_frequency: {\"daily\", \"minute\"}, optional         \u8a2d\u7f6e\u4ea4\u6613\u983b\u7387\u3002</li> <li>bundle: str, optional         \u8a2d\u7f6e\u56de\u6e2c\u7528\u7684 bundle\u3002</li> <li>trading_calendar: TradingCalendar, optional         \u8a2d\u7f6e\u4ea4\u6613\u65e5\u66c6\u3002</li> <li>benchmark_returns: pd.Series, optional         \u8a2d\u7f6e\u6307\u6a19\u5831\u916c\u7387\u3002</li> <li>treasury_returns: pd.Series, optional         \u8a2d\u7f6e\u7121\u98a8\u96aa\u5229\u7387\u3002</li> </ul>"},{"location":"lecture/TSMC%20buy%20and%20hold%20strategy/#returns","title":"Returns:","text":"<p>Perf: pd.DataFrame, \u5167\u5efa\u6b04\u4f4d\u6709:</p> <ul> <li>benchmark_return\uff1a     \u7576\u65e5\u7684benchmark\u5831\u916c\u7387\uff0c\u82e5\u662f\u7531<code>set_benchmark()</code>\u8a2d\u5b9a\uff0c\u5247\u8a08\u7b97\u65b9\u5f0f\u70ba(\u7576\u65e5benchmark\u6536\u76e4\u50f9 / \u524d\u4e00\u65e5benchmark\u6536\u76e4\u50f9) - 1\u3002</li> <li>benchmark_period_return\uff1a     \u7d2f\u7a4d\u7684benchmark\u65e5\u5831\u916c\u7387\u3002\u8a08\u7b97\u65b9\u5f0f\uff1anp.nancumprod(1 + <code>benchmark_return</code> Series) - 1\u3002</li> <li>treasury_return\uff1a     \u7576\u65e5\u7684treasury\u5831\u916c\u7387\uff0c\u76f4\u63a5\u7531TEJ API\u63d0\u4f9b\u3002</li> <li>treasury_period_return\uff1a     \u7d2f\u7a4d\u7684treasury\u65e5\u5831\u916c\u7387\u3002\u8a08\u7b97\u65b9\u5f0f\uff1anp.nancumprod(1 + <code>treasury_return</code> Series) - 1\u3002</li> <li> <p>benchmark_volatility\uff1a     benchmark\u65e5\u5831\u916c\u7387\u7684\u5e74\u5316\u6ce2\u52d5\u7387\uff0c\u81f3\u5c11\u9700\u6709\u5169\u671f\u7684\u5831\u916c\u7387\u624d\u9032\u884c\u8a08\u7b97\u3002\u8a08\u7b97\u65b9\u5f0f\uff1a(<code>benchmark_return</code> Series).expanding(2).std(ddof=1) * np.sqrt(252)</p> </li> <li> <p>orders\uff1a\u986f\u793a\u4e0b\u55ae\u7d00\u9304     \u6bcf\u4e00\u7b46\u4e0b\u55ae\u7528\u4e00\u500b\u5b57\u5178\u7684\u65b9\u5f0f\u5448\u73fe\uff0c\u5176\u4e2d\uff1a</p> </li> <li>id\uff1a\u865b\u64ec\u55ae\u865f\u3002</li> <li>dt\uff1a\u4e0b\u55ae\u6642\u9593\u3002</li> <li>reason\uff1aNone, Hold, or Reject\uff08\u76ee\u524d\u4e0d\u9069\u7528\uff09</li> <li>created\uff1a\u5efa\u7acb\u6642\u9593\u3002</li> <li>amount\uff1a<ul> <li>\u4e0b\u55ae\u80a1\u6578\u3002</li> <li>\u82e5&gt;0\u8868\u793a\u8cb7\u9032\u6216\u56de\u88dc\uff0c&lt;0\u8868\u793a\u8ce3\u51fa\u6216\u653e\u7a7a\u3002</li> <li>\u82e5\u6709\u767c\u80a1\u7968\u80a1\u5229\u6216\u80a1\u7968\u5206\u5272\u7684\u60c5\u5f62\uff0c\u9664\u6b0a\u65e5\u7576\u5929\u6703\u66f4\u65b0\u4e4b\u524d\u672a\u6210\u4ea4\u8a02\u55ae\u7684amount\uff08new_amount = old_amount / ratio\uff0c\u5176\u4e2dratio = 1/\u50c5\u9664\u6b0a\u8abf\u6574\u4fc2\u6578\uff09\u3002</li> </ul> </li> <li> <p>filled\uff1a\u6210\u4ea4\u80a1\u6578\u3002</p> <ul> <li>\u8a3b\uff1aOrder execution - \u7576\u6f14\u7b97\u6cd5\u5728\u67d0\u4e00\u5929\u4e0b\u55ae\u6642\uff0c\u8a72\u8a02\u55ae\u6703\u5728\u4e0b\u4e00\u500b\u4ea4\u6613\u65e5\u6210\u4ea4\uff0c\u4ee5\u907f\u514dlookahead bias\u3002   </li> </ul> </li> <li> <p>commission\uff1a\u8a72\u7b46\u4ea4\u6613\u50ad\u91d1\u3002</p> </li> <li>stop\uff1a\u505c\u640d\u50f9\uff0c\u82e5\u6709\u767c\u80a1\u7968\u80a1\u5229\u6216\u80a1\u7968\u5206\u5272\u7684\u60c5\u5f62\uff0c\u9664\u6b0a\u65e5\u7576\u5929\u6703\u66f4\u65b0\u4e4b\u524d\u672a\u6210\u4ea4\u8a02\u55ae\u7684stop price\uff08new_stop = old_stop * ratio\uff0c\u5176\u4e2dratio = 1/\u50c5\u9664\u6b0a\u8abf\u6574\u4fc2\u6578\uff09\u3002</li> <li>limit\uff1a\u9650\u50f9\u50f9\uff0c\u82e5\u6709\u767c\u80a1\u7968\u80a1\u5229\u6216\u80a1\u7968\u5206\u5272\u7684\u60c5\u5f62\uff0c\u9664\u6b0a\u65e5\u7576\u5929\u6703\u66f4\u65b0\u4e4b\u524d\u672a\u6210\u4ea4\u8a02\u55ae\u7684limit price\uff08new_limit = old_limit * ratio\uff0c\u5176\u4e2dratio = 1/\u50c5\u9664\u6b0a\u8abf\u6574\u4fc2\u6578\uff09\u3002</li> <li>stop_reached\uff1a<ul> <li>\u5c0d\u65bcbuy stop order\uff0c\u82e5\u73fe\u50f9&gt;=stop price\uff0c\u5247\u986f\u793aTrue\u5426\u5247False\u3002</li> <li>\u5c0d\u65bcsell stop order\uff0c\u82e5\u73fe\u50f9&lt;=stop price\uff0c\u5247\u986f\u793aTrue\u5426\u5247False\u3002</li> </ul> </li> <li>limit_reached\uff1a<ul> <li>\u5c0d\u65bcbuy limit order\uff0c\u82e5\u73fe\u50f9&lt;=limit price\uff0c\u5247\u986f\u793aTrue\u5426\u5247False\u3002</li> <li>\u5c0d\u65bcsell limit order\uff0c\u82e5\u73fe\u50f9&gt;=limit price\uff0c\u5247\u986f\u793aTrue\u5426\u5247False\u3002</li> </ul> </li> <li>sid\uff08asset\uff09\uff1a\u4e0b\u55ae\u7684\u6a19\u7684\u3002</li> <li> <p>status\uff1a\u82e5=0\u8868\u793aOPEN\uff08\u672a\u5b8c\u5168\u6210\u4ea4\uff09\uff0c=1\u8868\u793aFILLED\uff08\u5b8c\u5168\u6210\u4ea4\uff09\uff0c=2\u8868\u793aCANCEL\uff08\u5df2\u53d6\u6d88\uff09\u3002</p> </li> <li> <p>transactions\uff1a\u986f\u793a\u4ea4\u6613\u7d00\u9304</p> </li> <li>amount\uff1a\u4e0b\u55ae\u80a1\u6578\u3002</li> <li>dt \uff1a \u4ea4\u6613\u6642\u9593\u3002</li> <li>price\uff1a\u6210\u4ea4\u50f9\uff08\u70ba\u8abf\u6574\u524d\u6536\u76e4\u50f9\uff0c\u4e0d\u8abf\u6574\u80a1\u606f\u3001\u5206\u5272\u3001\u80a1\u7968\u80a1\u5229\uff09\u3002</li> <li>order_id\uff1a\u55ae\u865f\uff0c\u53ef\u8207orders\u4e2d\u7684id\u6bd4\u5c0d\u3002</li> <li>sid\uff08asset\uff09\uff1a\u4e0b\u55ae\u7684\u6a19\u7684\u3002</li> <li> <p>commission\uff1a\u4e00\u5f8b\u70baNone\u3002\u50ad\u91d1\u8cc7\u6599\u5df2\u7d93\u5728'orders'\u5e95\u4e0b\u3002</p> </li> <li> <p>positions\uff1a\u986f\u793a\u6301\u6709\u90e8\u4f4d</p> </li> <li>sid\uff08asset\uff09\uff1a\u4e0b\u55ae\u7684\u6a19\u7684\u3002</li> <li>amount\uff1a\u8a72\u6a19\u7684\u7e3d\u6301\u6709\u80a1\u6578\u3002\u9664\u6b0a\u65e5\u7576\u5929amount\u6703\u9032\u884c\u8abf\u6574\uff08old_amount / ratio = new_amount\uff0c\u5176\u4e2dratio = 1/\u50c5\u9664\u6b0a\u8abf\u6574\u4fc2\u6578\uff09\u3002</li> <li>last_sale_price\uff1a\u6a19\u7684\u6700\u8fd1\u4e00\u7b46\u7684\u6536\u76e4\u50f9\u3002</li> <li>cost_basis\uff1a\u6bcf\u80a1\u5e73\u5747\u6210\u672c\uff08\u542bcommissions\uff09\u3002<ul> <li>\u8a08\u7b97\u65b9\u6cd5\u70ba\uff1asum(\u6210\u4ea4\u50f9 * (1+commission) * \u80a1\u6578) / \u7e3d\u80a1\u6578</li> <li>\u9664\u6b0a\u65e5\u7576\u5929cost_basis\u6703\u9032\u884c\u8abf\u6574\uff08old_cost_basis * ratio = new_cost_basis\uff0c\u5176\u4e2dratio = 1/\u50c5\u9664\u6b0a\u8abf\u6574\u4fc2\u6578\uff09\u3002</li> <li>\u5c0d\u65bc\u8cb7\u9032\u6216\u56de\u88dc\u4f86\u8aaa\uff0ccommissions\u6703\u9020\u6210cost_basis\u589e\u52a0\uff1b\u5c0d\u65bc\u8ce3\u51fa\u6216\u653e\u7a7a\u4f86\u8aaa\uff0ccommissions\u6703\u9020\u6210cost_basis\u6e1b\u5c11\u3002</li> </ul> </li> <li>longs_count\uff1a</li> <li>\u7576\u65e5\u5e33\u4e0a\u6709\u5e7e\u6a94\u9577\u90e8\u4f4d\u80a1\u7968\u3002\u53ef\u8207<code>positions</code>\u6bd4\u8f03\u3002</li> <li>shorts_count\uff1a</li> <li>\u7576\u65e5\u5e33\u4e0a\u6709\u5e7e\u6a94\u77ed\u90e8\u4f4d\u80a1\u7968\u3002\u53ef\u8207<code>positions</code>\u6bd4\u8f03\u3002</li> <li>long_exposure\uff08long_value\uff09\uff1a</li> <li>\u7576\u65e5\u5e33\u4e0a\u9577\u90e8\u4f4d\u7684\u5e02\u503c\u3002</li> <li>\u53ef\u8207<code>positions</code>\u6bd4\u8f03\u3002</li> <li>\u7576\u6295\u8cc7\u6a19\u7684\u70ba\u80a1\u7968\u6642<code>long_exposure</code>\u548c<code>long_value</code>\u5169\u6b04\u4f4d\u6578\u503c\u4e00\u81f4\u3002</li> <li>\u8a08\u7b97\u65b9\u5f0f\u70basum(\u6301\u6709\u80a1\u6578 * \u6536\u76e4\u50f9) = sum(amount * last_sale_price)\uff0cwhere amount &gt; 0\u3002</li> <li>short_exposure\uff08short_value\uff09\uff1a</li> <li>\u7576\u65e5\u5e33\u4e0a\u77ed\u90e8\u4f4d\u7684\u5e02\u503c\u3002</li> <li>\u53ef\u8207<code>positions</code>\u6bd4\u8f03\u3002</li> <li>\u7576\u6295\u8cc7\u6a19\u7684\u70ba\u80a1\u7968\u6642<code>short_exposure</code>\u548c<code>short_value</code>\u5169\u6b04\u4f4d\u6578\u503c\u4e00\u81f4\u3002</li> <li>\u8a08\u7b97\u65b9\u5f0f\u70basum(\u6301\u6709\u80a1\u6578 * \u6536\u76e4\u50f9) = sum(amount * last_sale_price)\uff0cwhere amount &lt; 0\u3002</li> <li>short_exposure\u5fc5\u7136 &lt;= 0\u3002</li> <li>ending_exposure\uff08ending_value\uff09\uff1a</li> <li>\u7576\u65e5\u7d50\u675f\u6642\u5e33\u4e0a\u90e8\u4f4d\u7684\u6de8\u5e02\u503c\u3002</li> <li>\u8a08\u7b97\u65b9\u5f0f\uff1a<code>long_exposure</code> + <code>short_exposure</code></li> <li>starting_exposure\uff08starting_value\uff09\uff1a</li> <li>\u7576\u65e5\u958b\u59cb\u6642\u5e33\u4e0a\u90e8\u4f4d\u7684\u6de8\u5e02\u503c\u3002</li> <li>\u70ba\u524d\u4e00\u65e5\u7684<code>ending_exposure</code>\u3002</li> <li>gross_leverage\uff08leverage\uff09\uff1a</li> <li>Gross leverage is the sum of long and short leverage exposure per share divided by net asset value\uff08portfolio_value\uff09\u3002</li> <li>\u8a08\u7b97\u65b9\u5f0f\uff1a\uff08<code>long_exposure</code> - <code>short_exposure</code>\uff09\uff0f<code>portfolio_value</code></li> <li>net_leverage\uff1a</li> <li>Net leverage is the net leverage exposure per share divided by net asset value\uff08portfolio_value\uff09\u3002</li> <li>\u8a08\u7b97\u65b9\u5f0f\uff1a\uff08<code>long_exposure</code> + <code>short_exposure</code>\uff09\uff0f<code>portfolio_value</code></li> <li>capital_used\uff1a</li> <li>\u7576\u5929\u7684cash flow\u3002&gt;0\u8868\u793a\u6d41\u5165\uff0c&lt;0\u8868\u793a\u6d41\u51fa\u3002</li> <li>\u8a08\u7b97\u65b9\u5f0f\uff1a<ul> <li>-1 * sum(<code>transaction.price</code> * <code>transaction.amount</code>) - sum(<code>order.commission</code>) + sum(earn_dividends) + sum(leftover_cash)</li> </ul> </li> <li> <p>\u8a3b\uff1a    </p> <ol> <li>earn_dividends\uff1a\u6703\u65bcpay_date\u7576\u5929\u914d\u767c\u3002</li> <li>leftover_cash\uff1a\u5206\u5272\u3001\u80a1\u7968\u80a1\u5229\u7b49\u539f\u56e0\u5c0e\u81f4\u80a1\u6578\u8b8a\u52d5\u6642\uff0c\u82e5\u6709&lt;1\u80a1(fractional_share_count)\u7121\u6cd5\u5206\u914d\u7684\u60c5\u6cc1\u6642\u5247\u8fd4\u56de\u73fe\u91d1\u3002</li> <li>leftover_cash\u7bc4\u4f8b\uff1a</li> <li>\u82e5\u73fe\u5728\u6301\u6709100\u80a1\uff08amount\uff09\uff0cratio=3\u3002</li> <li>\u65b0\u7684amount\u7406\u8ad6\u4e0a\u662f100/3=33.333\uff0c\u7136\u800c\u4e0d\u6eff\u4e00\u80a1\u7684\u90e8\u5206\u9700\u8f49\u63db\u6210\u73fe\u91d1 (return cash)\u3002</li> <li>\u6240\u4ee5\u65b0\u7684amount\u6703\u662f33\uff0c\u5269\u9918\u76840.333\u80a1\uff0833.333-33\uff09\u5c31\u662ffractional_share_count\u3002</li> <li>\u7531\u65bcratio=3\u4ee3\u8868\u8a72\u516c\u53f8\u80a1\u6578\u6709\u767c\u751f\u8b8a\u52d5\uff0c\u6240\u4ee5\u6bcf\u80a1\u5e73\u5747\u6210\u672c (cost basis)\u9700\u8abf\u6574=\u539fcost basis * \u539famount / \u65b0amount \u5f8c\u56db\u6368\u4e94\u5165\u5230\u5c0f\u6578\u7b2c\u4e8c\u4f4d\u3002</li> <li>\u6240\u4ee5\u9000\u56de\u73fe\u91d1(return cash)=(fractional_share_count) * (\u65b0cost basis) \u518d\u56db\u6368\u4e94\u5165\u5230\u5c0f\u6578\u7b2c\u4e8c\u4f4d</li> </ol> </li> <li> <p>ending_cash\uff1a</p> </li> <li>\u7576\u65e5\u7d50\u675f\u6642\u5e33\u4e0a\u6301\u6709\u73fe\u91d1\u3002</li> <li>\u8a08\u7b97\u65b9\u5f0f\uff1a<code>starting_cash</code>+<code>capital_used</code></li> <li>starting_cash\uff1a</li> <li>\u7576\u65e5\u958b\u59cb\u6642\u5e33\u4e0a\u6301\u6709\u73fe\u91d1\u3002</li> <li>\u70ba\u524d\u4e00\u65e5\u7684<code>ending_cash</code>+sum(earn_dividends)\uff0c\u82e5\u7121\u524d\u4e00\u65e5\u5247\u70ba<code>capital_base</code>\u3002</li> <li>pnl\uff1a</li> <li>\u7576\u65e5\u6295\u8cc7\u7d44\u5408\u640d\u76ca\u3002</li> <li>\u8a08\u7b97\u65b9\u5f0f\uff1a(<code>ending_exposure</code> + <code>ending_cash</code>) - (<code>starting_exposure</code> + <code>starting_cash</code>)\u3002</li> <li>returns\uff1a</li> <li>\u7576\u65e5\u5831\u916c\u7387\u3002</li> <li>\u8a08\u7b97\u65b9\u5f0f\uff1a(\u7576\u65e5<code>portfolio_value</code>) / (\u524d\u4e00\u65e5<code>portfolio_value</code>) - 1\u3002</li> <li>\u5b58\u5728\u5c3e\u5dee\u3002</li> <li>portfolio_value\uff1a</li> <li>\u5373net asset value\uff0c\u7576\u65e5\u6295\u8cc7\u7d44\u5408\u7e3d\u50f9\u503c\u3002</li> <li>\u8a08\u7b97\u65b9\u5f0f\uff1a(<code>ending_exposure</code> + <code>ending_cash</code>)</li> <li>algorithm_period_return\uff1a</li> <li>\u6295\u8cc7\u7d44\u5408\u7d2f\u7a4d\u65e5\u5831\u916c\u7387\u3002</li> <li>\u8a08\u7b97\u65b9\u5f0f\uff1a( 1 + \u524d\u4e00\u65e5\u7684<code>algorithm_period_return</code>) * ( 1 + \u7576\u65e5<code>returns</code>) - 1\u3002</li> <li>\u5b58\u5728\u5c3e\u5dee\u3002</li> <li>algo_volatility\uff1a</li> <li>\u6295\u8cc7\u7d44\u5408\u65e5\u5831\u916c\u7387\u7684\u5e74\u5316\u6ce2\u52d5\u7387\uff0c\u81f3\u5c11\u9700\u6709\u5169\u671f\u7684\u5831\u916c\u7387\u624d\u9032\u884c\u8a08\u7b97\u3002</li> <li>\u5229\u7528empyrical\u5957\u4ef6\u8a08\u7b97\uff1a      empyrical.annual_volatility(<code>returns</code>Series, period='daily', alpha=2.0, annualization=None)\u3002</li> <li>\u5177\u9ad4\u4f86\u8aaa\uff0cempyrical\u5957\u4ef6\u7684\u8a08\u7b97\u65b9\u5f0f\u70ba\uff1a<code>returns</code>Series.std(ddof=1) * (252 ** (1 / 2))\uff0cstd\u70ba\u6a23\u672c\u6a19\u6e96\u5dee\u3002</li> <li>\u7528\u5b8c\u6574<code>returns</code>\u8cc7\u6599\uff0c\u5247\u6703\u56de\u50b3\u6700\u5f8c\u4e00\u65e5algo_volatility\uff0c\u82e5\u6263\u6389\u6700\u5f8c\u4e00\u65e5<code>returns</code>\uff0c\u5247\u56de\u50b3\u5012\u6578\u7b2c\u4e8c\u65e5\uff0c\u4ee5\u6b64\u985e\u63a8\u3002  </li> <li>excess_return\uff1a</li> <li>\u6295\u8cc7\u7d44\u5408\u7d2f\u7a4d\u8d85\u984d\u65e5\u5831\u916c\uff08\u76f8\u5c0d\u65bc<code>benchmark_period_return</code>\uff09\u3002</li> <li>\u8a08\u7b97\u65b9\u5f0f\u70ba\uff1a(<code>algorithm_period_return</code> - <code>benchmark_period_return</code>)\u3002</li> <li>max_drawdown\uff1a</li> <li>\u6295\u8cc7\u7d44\u5408\u7d2f\u7a4d\u5831\u916c\u7387\u5f9e\u904e\u53bb\u7684\u5cf0\u503c\u4e0b\u8dcc\u7684\u6700\u5927\u8dcc\u5e45\u767e\u5206\u6bd4\u3002</li> <li>\u5229\u7528empyrical\u5957\u4ef6\u8a08\u7b97\uff1aempyrical.max_drawdown(<code>returns</code> Series)\u3002</li> <li>\u5177\u9ad4\u4f86\u8aaa\uff0cempyrical\u5957\u4ef6\u7684\u8a08\u7b97\u65b9\u5f0f\u70ba\uff1a<ul> <li>cumulative_returns\uff1a\u5148\u8a08\u7b97\u904e\u53bb\u6bcf\u4e00\u65e5\u7684\u7d2f\u7a4d\u5831\u916c\u3002</li> <li>previous_peaks\uff1a\u8a08\u7b97\u904e\u53bb\u7d2f\u7a4d\u5831\u916c\u7387\u7684\u6700\u5927\u503c\u3002</li> <li>daily_drawdown\uff1a\u8a08\u7b97\u6bcf\u65e5\u56de\u64a4 = (cumulative_returns - previous_peaks) / previous_peaks</li> <li>max_drawdown\uff1a\u904e\u53bb\u6bcf\u4e00\u65e5\u7684daily_drawdown\u53d6\u6975\u5c0f\u503c\u3002</li> </ul> </li> <li>sharpe\uff1a</li> <li>\u5e74\u5316\u590f\u666e\u6bd4\u7387\uff0c\u8861\u91cf\u6bcf\u627f\u64d41\u55ae\u4f4d\u98a8\u96aa\uff0c\u53ef\u4ee5\u7372\u53d6\u591a\u5c11\u7684\u5831\u916c\u3002</li> <li>\u5229\u7528empyrical\u5957\u4ef6\u8a08\u7b97\uff1aempyrical.sharpe_ratio(<code>returns</code> Series, risk_free=0)\u3002</li> <li>\u5177\u9ad4\u4f86\u8aaa\uff0cempyrical\u5957\u4ef6\u7684\u8a08\u7b97\u65b9\u5f0f\u70ba\uff1a     np.mean(<code>returns</code> Series) / np.std(<code>returns</code> Series,ddof=1) * np.sqrt(252)</li> <li>sortino\uff1a   </li> <li>\u5e74\u5316\u7d22\u63d0\u8afe\u6bd4\u7387\uff0c\u8861\u91cf\u627f\u64d4\u55ae\u4f4d\u4e0b\u65b9\u98a8\u96aa\uff0c\u53ef\u4ee5\u7372\u53d6\u591a\u5c11\u7684\u5831\u916c\u3002</li> <li>\u5229\u7528empyrical\u5957\u4ef6\u8a08\u7b97\uff1aempyrical.sortino_ratio(<code>returns</code> Series, required_return=0)\u3002</li> <li>\u5177\u9ad4\u4f86\u8aaa\uff0cempyrical\u5957\u4ef6\u7684\u8a08\u7b97\u65b9\u5f0f\u70ba\uff1a<ul> <li>\u8a08\u7b97downside_risk\uff1anp.sqrt(np.nanmean(np.square(downside_return))) * np.sqrt(252)\uff0c\u5176\u4e2ddownside_return\u5c07<code>returns</code> Series\u4e2d&gt;0\u7684\u6578\u503c\u66ff\u63db\u62100\u3002</li> <li>\u8a08\u7b97mean_return\uff1anp.nanmean(<code>returns</code> Series)</li> <li>\u8a08\u7b97sortino_ratio =  mean_return / downside_risk * 252\u3002</li> </ul> </li> <li> <p>\u5b58\u5728\u5c3e\u5dee\u3002</p> </li> <li> <p>alpha\uff1a</p> </li> <li>\u5e74\u5316alpha\uff0c\u8861\u91cf\u6295\u8cc7\u7d44\u5408\u5275\u9020\u8d85\u984d\u5831\u916c\u7684\u80fd\u529b\u3002</li> <li>\u5229\u7528empyrical\u5957\u4ef6\u8a08\u7b97\uff1aempyrical.alpha_beta_aligned(returns=<code>returns</code>Series, factor_returns=<code>benchmark_return</code> Series,risk_free=0.0)</li> <li>\u5177\u9ad4\u4f86\u8aaa\uff0cempyrical\u5957\u4ef6\u7684\u8a08\u7b97\u65b9\u5f0f\u70ba\uff1a<ul> <li>\u8a08\u7b97alpha_series\uff1a<code>returns</code> Series - (\u7576\u65e5<code>beta</code> * <code>benchmark_return</code> Series)</li> <li>\u8a08\u7b97\u5e73\u5747alpha\uff1ananmean(alpha_series)</li> <li>\u8a08\u7b97\u5e74\u5316alpha\uff1a(\u5e73\u5747alpha + 1) ^ 252 -1  </li> </ul> </li> <li>beta\uff1a    </li> <li>\u8861\u91cf\u6295\u8cc7\u7d44\u5408\u76f8\u5c0d\u65bc\u6574\u9ad4\u5e02\u5834\u7684\u6ce2\u52d5\u6027\u3002</li> <li>\u5229\u7528empyrical\u5957\u4ef6\u8a08\u7b97\uff1aempyrical.alpha_beta_aligned(returns=<code>returns</code>Series, factor_returns=<code>benchmark_return</code> Series,risk_free=0.0)</li> <li>\u5177\u9ad4\u4f86\u8aaa\uff0cempyrical\u5957\u4ef6\u7684\u8a08\u7b97\u65b9\u5f0f\u70ba\uff1a     Cov(<code>benchmark_return</code> Series, <code>returns</code> Series) / Var(<code>benchmark_return</code> Series)</li> </ul> <pre><code>from zipline import run_algorithm\nimport pandas as pd \n\nstart_date = pd.Timestamp('2018-12-30',tz='utc')\nend_date = pd.Timestamp('2023-05-26',tz='utc')\n\nresults = run_algorithm(start= start_date,  \n                       end=end_date,\n                       initialize=initialize,                       \n                       capital_base=1e6,                       \n                       analyze=analyze,\n                       handle_data=handle_data,\n                       data_frequency='daily',\n                       bundle='tquant'\n                       )\n</code></pre> <p></p> <pre><code>results\n</code></pre> period_open period_close short_value long_exposure benchmark_return treasury_return pnl short_exposure capital_used returns ... treasury_period_return algorithm_period_return alpha beta sharpe sortino max_drawdown max_leverage trading_days period_label 2019-01-02 13:30:00+08:00 2019-01-02 09:01:00+08:00 2019-01-02 13:30:00+08:00 0.0 0.0 0.0 0.0 0.00 0.0 0.00 0.000000 ... 0.0 0.000000 None None NaN NaN 0.000000 0.000000 1 2019-01 2019-01-03 13:30:00+08:00 2019-01-03 09:01:00+08:00 2019-01-03 13:30:00+08:00 0.0 215500.0 0.0 0.0 -2.85 0.0 -215502.85 -0.000003 ... 0.0 -0.000003 None None -11.224972 -11.224972 -0.000003 0.215501 2 2019-01 2019-01-04 13:30:00+08:00 2019-01-04 09:01:00+08:00 2019-01-04 13:30:00+08:00 0.0 208000.0 0.0 0.0 -7500.00 0.0 0.00 -0.007500 ... 0.0 -0.007503 None None -9.170376 -9.168633 -0.007503 0.215501 3 2019-01 2019-01-07 13:30:00+08:00 2019-01-07 09:01:00+08:00 2019-01-07 13:30:00+08:00 0.0 213000.0 0.0 0.0 5000.00 0.0 0.00 0.005038 ... 0.0 -0.002503 None None -1.893153 -2.608781 -0.007503 0.215501 4 2019-01 2019-01-08 13:30:00+08:00 2019-01-08 09:01:00+08:00 2019-01-08 13:30:00+08:00 0.0 211000.0 0.0 0.0 -2000.00 0.0 0.00 -0.002005 ... 0.0 -0.004503 None None -3.141155 -4.087705 -0.007503 0.215501 5 2019-01 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 2023-05-22 13:30:00+08:00 2023-05-22 09:01:00+08:00 2023-05-22 13:30:00+08:00 0.0 531000.0 0.0 0.0 -1000.00 0.0 0.00 -0.000734 ... 0.0 0.362247 None None 0.816172 1.250657 -0.202433 0.455182 1063 2023-05 2023-05-23 13:30:00+08:00 2023-05-23 09:01:00+08:00 2023-05-23 13:30:00+08:00 0.0 530000.0 0.0 0.0 -1000.00 0.0 0.00 -0.000734 ... 0.0 0.361247 None None 0.813954 1.247253 -0.202433 0.455182 1064 2023-05 2023-05-24 13:30:00+08:00 2023-05-24 09:01:00+08:00 2023-05-24 13:30:00+08:00 0.0 525000.0 0.0 0.0 -5000.00 0.0 0.00 -0.003673 ... 0.0 0.356247 None None 0.804283 1.232180 -0.202433 0.455182 1065 2023-05 2023-05-25 13:30:00+08:00 2023-05-25 09:01:00+08:00 2023-05-25 13:30:00+08:00 0.0 543000.0 0.0 0.0 18000.00 0.0 0.00 0.013272 ... 0.0 0.374247 None None 0.835019 1.282067 -0.202433 0.455182 1066 2023-05 2023-05-26 13:30:00+08:00 2023-05-26 09:01:00+08:00 2023-05-26 13:30:00+08:00 0.0 566000.0 0.0 0.0 23000.00 0.0 0.00 0.016736 ... 0.0 0.397247 None None 0.873009 1.345075 -0.202433 0.455182 1067 2023-05 <p>1067 rows \u00d7 42 columns</p> <p>\u6211\u5011\u53ef\u4ee5\u767c\u73fe\u4e4b\u524d\u4f7f\u7528 <code>order</code> \u7d00\u9304\u7684 trade_days, has_ordered \u8207 TSMC \u78ba\u5be6\u4ee5\u6b04\u4f4d\u578b\u5f0f\u8a18\u9304\u5728 results \u8868\u4e2d\u3002 </p> <pre><code>results[['trade_days','has_ordered','TSMC']]\n</code></pre> trade_days has_ordered TSMC 2019-01-02 13:30:00+08:00 1 True 219.5 2019-01-03 13:30:00+08:00 2 True 215.5 2019-01-04 13:30:00+08:00 3 True 208.0 2019-01-07 13:30:00+08:00 4 True 213.0 2019-01-08 13:30:00+08:00 5 True 211.0 ... ... ... ... 2023-05-22 13:30:00+08:00 1063 True 531.0 2023-05-23 13:30:00+08:00 1064 True 530.0 2023-05-24 13:30:00+08:00 1065 True 525.0 2023-05-25 13:30:00+08:00 1066 True 543.0 2023-05-26 13:30:00+08:00 1067 True 566.0 <p>1067 rows \u00d7 3 columns</p> <pre><code>\n</code></pre>"},{"location":"lecture/Universe%20Analysis%EF%BC%8Dusing%20get_universe/","title":"Universe Analysis\uff0dusing get universe","text":""},{"location":"lecture/Universe%20Analysis%EF%BC%8Dusing%20get_universe/#universe-analysis-using-get_universe","title":"Universe Analysis\uff0dusing get_universe","text":"<p>\u5206\u6790\u80a1\u7968\u6c60\u7684\u7522\u696d\u5206\u5e03\u8207\u6210\u4ea4\u91d1\u984d</p>"},{"location":"lecture/Universe%20Analysis%EF%BC%8Dusing%20get_universe/#_1","title":"\u9078\u55ae","text":"<ol> <li>\u5206\u6790\u81fa\u706350\u6307\u6578\u6210\u4efd\u80a1\u516c\u53f8\u7684\u7522\u696d\u5206\u4f48</li> <li>\u5206\u6790\u81fa\u7063\u4e2d\u578b100\u6307\u6578\u6210\u4efd\u80a1\u516c\u53f8\u7684\u7522\u696d\u5206\u4f48</li> <li>\u5206\u6790\u81fa\u7063\u9ad8\u80a1\u606f\u6307\u6578\u6210\u4efd\u80a1\u516c\u53f8\u7684\u7522\u696d\u5206\u4f48</li> <li>\u5206\u6790\u96fb\u5b50\u5de5\u696d\u516c\u53f8\u7684\u7522\u696d\u5206\u4f48</li> <li>\u5206\u6790\u4e0a\u5e02ETF\u6210\u4ea4\u91d1\u984d</li> </ol> <pre><code>import tejapi\nimport os\nimport numpy as np\nimport pandas as pd\n\n# set tej_key and base\nos.environ['TEJAPI_KEY'] = \"your key\" \nos.environ['TEJAPI_BASE'] = \"https://api.tej.com.tw\"\n\n# set date\nstart = end = '2024-05-31'\n\nfrom matplotlib import pyplot as plt\nplt.rc(\"font\",family='MicroSoft YaHei',weight=\"bold\")\n\nimport TejToolAPI\nfrom zipline.sources.TEJ_Api_Data import get_universe\nfrom zipline.utils.calendar_utils import get_calendar\n</code></pre> <p>\u5229\u7528<code>get_universe</code>\u53d6\u5f97\u53f0\u706350\u6307\u6578\u6210\u4efd\u80a1</p> <pre><code>tw50_ = get_universe(start, end, idx_id='IX0002')\n</code></pre> <pre><code>Currently used TEJ API key call quota 168/100000 (0.17%)\nCurrently used TEJ API key data quota 737512/10000000 (7.38%)\n</code></pre> <pre><code>tw50_ \n</code></pre> <pre><code>['1101',\n '1216',\n '1301',\n '1303',\n '1326',\n '1590',\n '2002',\n '2207',\n '2301',\n '2303',\n '2308',\n '2317',\n '2327',\n '2330',\n '2345',\n '2357',\n '2379',\n '2382',\n '2395',\n '2408',\n '2412',\n '2454',\n '2603',\n '2801',\n '2880',\n '2881',\n '2882',\n '2883',\n '2884',\n '2885',\n '2886',\n '2887',\n '2890',\n '2891',\n '2892',\n '2912',\n '3008',\n '3034',\n '3037',\n '3045',\n '3231',\n '3661',\n '3711',\n '4904',\n '4938',\n '5871',\n '5876',\n '5880',\n '6505',\n '6669']\n</code></pre> <p><code>getUniverseSector</code>\uff1a\u7e6a\u88fd\u80a1\u7968\u6c60\u7522\u696d\u5206\u4f48\u67f1\u72c0\u5716\u8207\u5713\u9905\u5716</p> <pre><code>def plot_sector_counts(sector_counts):\n\n    # create bar chart of number of companies in each sector    \n    from matplotlib import pyplot as plt\n    plt.rc(\"font\",family='MicroSoft YaHei',weight=\"normal\")\n\n    from matplotlib.ticker import MaxNLocator\n    import matplotlib.ticker as ticker\n\n    plt.figure(figsize=(12, 15), dpi=100)\n\n    bar = plt.subplot2grid((5,5), (0,0), rowspan=2, colspan=5)\n    pie = plt.subplot2grid((5,5), (2,0), rowspan=3, colspan=5)\n\n    # Bar chart\n    sector_counts.plot(\n        kind='barh',        \n        color='b',\n#         rot=90,\n        grid=True,\n        fontsize=12,\n        ax=bar,\n    )\n\n    plt.gca().yaxis.set_major_locator(ticker.MaxNLocator(integer=True))\n    bar.set_title('\u80a1\u7968\u6c60\u7522\u696d\u5206\u5e03\u5bb6\u6578')\n    bar.set_xlabel('\u5bb6\u6578')     \n\n\n    num = list(sector_counts.values)\n    explode = [0.1 if x == max(num) else 0 for x in num]\n\n    # Pie chart\n    sector_counts.plot(\n        kind='pie', \n        colormap='Set3', \n        autopct='%.1f %%', # '%.2f %%'\n        fontsize=12,\n        ax=pie,\n        labeldistance=1.1,\n        pctdistance=0.9,\n        explode = explode\n    ) \n    pie.set_ylabel('')      \n    pie.set_title('\u80a1\u7968\u6c60\u7522\u696d\u5206\u5e03\u5360\u6bd4 - %')\n\n\n    plt.tight_layout(pad=5);\n\ndef getUniverseSector(start_date,\n                      end_date,\n                      trading_calendar=get_calendar('TEJ_XTAI'),\n                      **kwargs):\n\n    tickers = get_universe(start_date,\n                           end_date,\n                           trading_calendar = trading_calendar,\n                           **kwargs)\n\n    df_sector = TejToolAPI.get_history_data(ticker=tickers,\n                                            columns=['Industry'], transfer_to_chinese=True,\n                                            start = start_date,\n                                            end = end_date)   \n\n    counts = (df_sector.groupby('\u4e3b\u7522\u696d\u5225_\u4e2d\u6587').size())\n    _c =[]\n    counts.index = [ x.split(' ')[1]  if len(x)&gt;0 else ' ' for x in counts.index]\n\n    plot_sector_counts(counts[counts&gt;0].sort_values(ascending=False)) \n</code></pre> <p></p>"},{"location":"lecture/Universe%20Analysis%EF%BC%8Dusing%20get_universe/#50","title":"\u5206\u6790\u81fa\u706350\u6307\u6578\u6210\u4efd\u80a1\u516c\u53f8\u7684\u7522\u696d\u5206\u4f48","text":"<p>Return to Menu</p> <pre><code>getUniverseSector(start, end, idx_id='IX0002')\n</code></pre> <pre><code>Currently used TEJ API key call quota 168/100000 (0.17%)\nCurrently used TEJ API key data quota 737512/10000000 (7.38%)\nCurrently used TEJ API key call quota 168/100000 (0.17%)\nCurrently used TEJ API key data quota 737512/10000000 (7.38%)\n</code></pre> <p></p> <p></p>"},{"location":"lecture/Universe%20Analysis%EF%BC%8Dusing%20get_universe/#100","title":"\u5206\u6790\u81fa\u7063\u4e2d\u578b100\u6307\u6578\u6210\u4efd\u80a1\u516c\u53f8\u7684\u7522\u696d\u5206\u4f48","text":"<p>Return to Menu</p> <pre><code>getUniverseSector(start, end, idx_id='IX0003')\n</code></pre> <pre><code>Currently used TEJ API key call quota 177/100000 (0.18%)\nCurrently used TEJ API key data quota 762477/10000000 (7.62%)\nCurrently used TEJ API key call quota 177/100000 (0.18%)\nCurrently used TEJ API key data quota 762477/10000000 (7.62%)\n</code></pre> <p></p> <p></p>"},{"location":"lecture/Universe%20Analysis%EF%BC%8Dusing%20get_universe/#_2","title":"\u5206\u6790\u81fa\u7063\u9ad8\u80a1\u606f\u6307\u6578\u6210\u4efd\u80a1\u516c\u53f8\u7684\u7522\u696d\u5206\u4f48","text":"<p>Return to Menu</p> <pre><code>getUniverseSector(start, end, idx_id='IX0006')\n</code></pre> <pre><code>Currently used TEJ API key call quota 177/100000 (0.18%)\nCurrently used TEJ API key data quota 762477/10000000 (7.62%)\nCurrently used TEJ API key call quota 195/100000 (0.2%)\nCurrently used TEJ API key data quota 817091/10000000 (8.17%)\n</code></pre> <p></p> <p></p>"},{"location":"lecture/Universe%20Analysis%EF%BC%8Dusing%20get_universe/#_3","title":"\u5206\u6790\u96fb\u5b50\u5de5\u696d\u516c\u53f8\u7684\u7522\u696d\u5206\u4f48","text":"<p>Return to Menu</p> <pre><code>getUniverseSector(start, end, main_ind_c='M2300 \u96fb\u5b50\u5de5\u696d')\n</code></pre> <pre><code>Currently used TEJ API key call quota 195/100000 (0.2%)\nCurrently used TEJ API key data quota 817091/10000000 (8.17%)\nCurrently used TEJ API key call quota 216/100000 (0.22%)\nCurrently used TEJ API key data quota 887369/10000000 (8.87%)\n</code></pre> <p></p> <p></p>"},{"location":"lecture/Universe%20Analysis%EF%BC%8Dusing%20get_universe/#etf","title":"\u5206\u6790\u4e0a\u5e02ETF\u6210\u4ea4\u91d1\u984d","text":"<p>Return to Menu</p> <pre><code>etf = get_universe(start, end, stktp_c=['ETF', '\u570b\u5916ETF'], mkt=['TWSE'])\n</code></pre> <pre><code>Currently used TEJ API key call quota 216/100000 (0.22%)\nCurrently used TEJ API key data quota 887369/10000000 (8.87%)\n</code></pre> <pre><code>df_amount = TejToolAPI.get_history_data(ticker=etf, \n                                        columns=['Value_Dollars'], \n                                        transfer_to_chinese=False,\n                                        start = '2023-01-01',\n                                        end = end\n                                        )  \n</code></pre> <pre><code>Currently used TEJ API key call quota 229/100000 (0.23%)\nCurrently used TEJ API key data quota 939200/10000000 (9.39%)\n</code></pre> <pre><code>df_top = (df_amount.\n          set_index(['coid','mdate']).\n          unstack('coid').\n          rolling(30).\n          mean().\n          iloc[-1].\n          sort_values(ascending=False)['Value_Dollars'] #['\u6210\u4ea4\u91d1\u984d_\u5143']\n         )\n</code></pre> <pre><code>df_top = (df_top.to_frame().\n          join(tejapi.get('TWN/APISTOCK')[['coid','stk_name']].\n               set_index('coid')).\n          set_index('stk_name').iloc[:,0]\n         )\n</code></pre> <pre><code>plt.figure(figsize=(8, 12), dpi=150)\n\nbar = plt.subplot2grid((5,5), (0,0), rowspan=2, colspan=5)\n\ndf_top.nlargest(20).plot(\n        kind='barh',        \n        color='b',\n#         rot=90,\n        grid=True,\n        ax=bar\n    )\n\nbar.set_xlabel('TWD')\nbar.set_ylabel('')\nbar.set_title('\u4e0a\u5e02ETF \u904e\u53bb30\u65e5\u7684\u5e73\u5747\u6210\u4ea4\u91d1\u984d Top20\uff08{}\uff09'.format(df_amount.mdate.max().strftime('%Y-%m-%d')))\n</code></pre> <pre><code>Text(0.5, 1.0, '\u4e0a\u5e02ETF \u904e\u53bb30\u65e5\u7684\u5e73\u5747\u6210\u4ea4\u91d1\u984d Top20\uff082024-05-31\uff09')\n</code></pre> <p></p> <p>Return to Menu</p>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/","title":"get_universe\u8aaa\u660e","text":""},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#import-and-setting","title":"Import and Setting","text":"<pre><code>import pandas as pd\nimport datetime\nimport tejapi\nimport os\nimport numpy as np\n\n# set tej_key and base\nos.environ['TEJAPI_KEY'] = \"your key\" \nos.environ['TEJAPI_BASE'] = \"https://api.tej.com.tw\"\n\n# set date\nstart='2023-01-01'\nend='2023-10-24'\n\nfrom logbook import Logger, StderrHandler, INFO\nlog_handler = StderrHandler(format_string='[{record.time:%Y-%m-%d %H:%M:%S.%f}]: ' +\n                            '{record.level_name}: {record.func_name}: {record.message}',\n                            level=INFO)\nlog_handler.push_application()\nlog = Logger('get_universe')\n</code></pre>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#get_universe_1","title":"get_universe","text":"<p>\u7528\u4f86\u53d6\u5f97\u67d0\u4e00\u6bb5\u6642\u9593\u4e2d\u7b26\u5408\u7279\u5b9a\u689d\u4ef6\u7684\u80a1\u7968\u6c60\uff08\u4f7f\u7528\u6b64\u51fd\u6578\u6703\u6d88\u8017API\u6d41\u91cf\uff09\u3002</p>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#ziplinesourcestej_api_dataget_universe","title":"zipline.sources.TEJ_Api_Data.get_universe","text":"<pre><code>(start,\n end=datetime.datetime.now().date().strftime('%Y-%m-%d'),\n trading_calendar = get_calendar('TEJ_XTAI'),\n **kwargs)\n</code></pre>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#parameters","title":"Parameters","text":"<ul> <li>start(datetime or str)\uff0d\u8d77\u59cb\u65e5\u3002get_universe\u5c07\u6703\u56de\u50b3start\u81f3end\u6642\u9593\u6bb5\u5167\u7b26\u5408\u689d\u4ef6\u7684\u6a23\u672c\u3002</li> <li>end(datetime or str, optional)\uff0d\u8fc4\u65e5\uff0c\u9810\u8a2d\u70ba\u7a0b\u5f0f\u57f7\u884c\u7576\u5929\u65e5\u671f\u3002get_universe\u5c07\u6703\u56de\u50b3start\u81f3end\u6642\u9593\u6bb5\u5167\u7b26\u5408\u689d\u4ef6\u7684\u6a23\u672c\u3002</li> <li>trading_calendar(TradingCalendar, optional)\uff0d\u8a2d\u7f6e\u4ea4\u6613\u65e5\u66c6\u3002\u9810\u8a2d\u662f<code>get_calendar('TEJ_XTAI')</code>\u3002</li> <li>available kwargs properties\uff08\u81f3\u5c11\u9700\u8981\u6307\u5b9a\u4e00\u500b\uff0c\u82e5\u6c92\u6307\u5b9a\u5247\u8fd4\u56de\u5168\u6a23\u672c\uff09</li> <li>mkt(list or str)\uff0d\u5e02\u5834\u5225\u3002<ul> <li>valid mkt\uff1a<code>['TWSE', 'OTC']</code>\u3002</li> <li>\u82e5\u5728\u8b49\u5238\u4ea4\u6613\u6240\u639b\u724c\uff0c\u8a3b\u8a18\u70ba\u300cTWSE\u300d\uff1b\u82e5\u5728\u6ac3\u8cb7\u4e2d\u5fc3\u639b\u724c\uff0c\u8a3b\u8a18\u70ba\u300cOTC\u300d\u3002</li> <li>\u5e02\u5834\u5225\uff08mkt\uff09 \u3001\u677f\u584a\u5225\uff08mkt_bd_c\u3001mkt_bd_e\uff09\u7684\u6982\u5ff5\u8acb\u53c3\u8003\u4ee5\u4e0b\u8aaa\u660e\uff1a\u5e02\u5834\u5225\uff08mkt\uff09 \u8207\u677f\u584a\u5225\uff08mkt_bd_c\u3001mkt_bd_e\uff09\u3002</li> </ul> </li> <li>mkt_bd_c(list or str)\uff0d\u677f\u584a\u5225(\u4e2d)\u3002<ul> <li>valid mkt_bd_c\uff1a<code>['\u4e0a\u5e02\u4e00\u822c\u7248', '\u4e0a\u6ac3\u4e00\u822c\u7248', '\u5275\u65b0\u7248']</code>\u3002</li> <li>\u82e5\u5728\u4e0a\u5e02\u4e00\u822c\u677f\uff0c\u8a3b\u8a18\u70ba\u300c\u4e0a\u5e02\u4e00\u822c\u7248\u300d\uff1b\u82e5\u5728\u4e0a\u5e02\u5275\u65b0\u677f\uff0c\u8a3b\u8a18\u70ba\u300c\u5275\u65b0\u7248\u300d\uff1b\u82e5\u5728\u4e0a\u6ac3\u4e00\u822c\u677f\uff0c\u8a3b\u8a18\u70ba\u300c\u4e0a\u6ac3\u4e00\u822c\u7248\u300d\u3002</li> </ul> </li> <li>mkt_bd_e(list or str)\uff0d\u677f\u584a\u5225(\u82f1)\u3002<ul> <li>valid mkt_bd_e\uff1a<code>['TSE', 'OTC', 'TIB']</code>\u3002</li> <li>\u82e5\u5728\u4e0a\u5e02\u4e00\u822c\u677f\uff0c\u8a3b\u8a18\u70ba\u300cTSE\u300d\uff1b\u82e5\u5728\u4e0a\u5e02\u5275\u65b0\u677f\uff0c\u8a3b\u8a18\u70ba\u300cTIB\u300d\uff1b\u82e5\u5728\u4e0a\u6ac3\u4e00\u822c\u677f\uff0c\u8a3b\u8a18\u70ba\u300cOTC\u300d\u3002</li> </ul> </li> <li>stktp_c(list or str)\uff0d\u8b49\u5238\u7a2e\u985e(\u4e2d)\u3002<ul> <li>valid stktp_c\uff1a<code>['\u6307\u6578', '\u666e\u901a\u80a1-\u6d77\u5916', '\u666e\u901a\u80a1', '\u7279\u5225\u80a1', '\u5c01\u9589\u578b\u57fa\u91d1', 'ETF', 'REIT', '\u570b\u5916ETF', '\u53f0\u7063\u5b58\u8a17\u6191\u8b49']</code>\u3002</li> <li><code>'\u666e\u901a\u80a1-\u6d77\u5916'</code>\uff1a\u50c5\u5305\u542bF\u80a1\u6216KY\u80a1\u3002<code>'\u666e\u901a\u80a1'</code>\uff1a\u4e0d\u542bF\u80a1\u6216KY\u80a1\u3002\u82e5\u540c\u6642\u60f3\u53d6\u5f97\u6240\u6709\u7b2c\u4e00\u4e0a\u5e02\u7684\u666e\u901a\u80a1\uff0c\u8acb\u4f7f\u7528stktp_c=<code>['\u666e\u901a\u80a1-\u6d77\u5916', '\u666e\u901a\u80a1']</code>\u3002</li> <li><code>'ETF'</code>\uff1a\u50c5\u5305\u542b\u6295\u8cc7\u65bc\u570b\u5167\u6a19\u7684\u7684ETF\u3002<code>'\u570b\u5916ETF'</code>\uff1a\u50c5\u5305\u542b\u6295\u8cc7\u65bc\u570b\u5916\u6a19\u7684\u7684ETF\u3002\u82e5\u540c\u6642\u60f3\u53d6\u5f97\u6240\u6709ETF\uff0c\u8acb\u4f7f\u7528stktp_c=<code>['ETF', '\u570b\u5916ETF']</code>\u3002</li> </ul> </li> <li>stktp_e(list or str)\uff0d\u8b49\u5238\u7a2e\u985e(\u82f1)\u3002<ul> <li>valid stktp_e\uff1a<code>['Index', 'Common Stock-Foreign', 'Common Stock', 'Preferred Stock', 'Close End Fund', 'ETF', 'REIT', 'Foreign ETF', 'TDR']</code>\u3002</li> <li><code>'Common Stock-Foreign'</code>\uff1a\u50c5\u5305\u542bF\u80a1\u6216KY\u80a1\u3002<code>'Common Stock'</code>\uff1a\u4e0d\u542bF\u80a1\u6216KY\u80a1\u3002\u82e5\u540c\u6642\u60f3\u53d6\u5f97\u6240\u6709\u7b2c\u4e00\u4e0a\u5e02\u7684\u666e\u901a\u80a1\uff0c\u8acb\u4f7f\u7528stktp_e=<code>['Common Stock-Foreign', 'Common Stock']</code>\u3002</li> <li><code>'ETF'</code>\uff1a\u50c5\u5305\u542b\u6295\u8cc7\u65bc\u570b\u5167\u6a19\u7684\u7684ETF\u3002<code>'Foreign ETF'</code>\uff1a\u50c5\u5305\u542b\u6295\u8cc7\u65bc\u570b\u5916\u6a19\u7684\u7684ETF\u3002\u82e5\u540c\u6642\u60f3\u53d6\u5f97\u6240\u6709ETF\uff0c\u8acb\u4f7f\u7528stktp_c=<code>['ETF', 'Foreign ETF']</code>\u3002</li> </ul> </li> <li> <p>main_ind_c(list or str)\uff0d\u4e3b\u7522\u696d\u5225(\u4e2d)\u3002\uff08\u8acb\u8f38\u5165\u5b8c\u6574\u5b57\u4e32\uff0c\u4f8b\u5982\uff1a'M1100 \u6c34\u6ce5\u5de5\u696d'\uff09      \u9ede\u9078\u67e5\u770bvalid main_ind_c\uff1a <pre>\n<ul>\n<li>M1100 \u6c34\u6ce5\u5de5\u696d</li>\n<li>M1200 \u98df\u54c1\u5de5\u696d</li>\n<li>M1300 \u5851\u81a0\u5de5\u696d</li>\n<li>M1400 \u7d21\u7e54\u7e96\u7dad</li>\n<li>M1500 \u96fb\u6a5f\u6a5f\u68b0</li>\n<li>M1600 \u96fb\u5668\u96fb\u7e9c</li>\n<li>M1700 \u5316\u5b78\u751f\u6280\u91ab\u7642</li>\n<li>M1800 \u73bb\u7483\u9676\u74f7</li>\n<li>M1900 \u9020\u7d19\u5de5\u696d</li>\n<li>M2000 \u92fc\u9435\u5de5\u696d</li>\n<li>M2100 \u6a61\u81a0\u5de5\u696d</li>\n<li>M2200 \u6c7d\u8eca\u5de5\u696d</li>\n<li>M2300 \u96fb\u5b50\u5de5\u696d</li>\n<li>M2500 \u5efa\u6750\u71df\u9020</li>\n<li>M2600 \u822a\u904b\u696d</li>\n<li>M2700 \u89c0\u5149\u9910\u65c5</li>\n<li>M2800 \u91d1\u878d\u696d</li>\n<li>M2900 \u8cbf\u6613\u767e\u8ca8</li>\n<li>M3000 \u8a3c\u5238</li>\n<li>M3500 \u7da0\u80fd\u74b0\u4fdd</li>\n<li>M3600 \u6578\u4f4d\u96f2\u7aef</li>\n<li>M3700 \u904b\u52d5\u4f11\u9592</li>\n<li>M3800 \u5c45\u5bb6\u751f\u6d3b</li>\n<li>M9700 \u6cb9\u96fb\u71c3\u6c23\u696d</li>\n<li>M9900 \u5176\u4ed6</li>\n<li>OTC12 OTC \u98df\u54c1\u5de5\u696d</li>\n<li>OTC13 OTC \u5851\u81a0\u5de5\u696d</li>\n<li>OTC14 OTC \u7d21\u7e54\u7e96\u7dad</li>\n<li>OTC15 OTC \u96fb\u6a5f\u6a5f\u68b0</li>\n<li>OTC16 OTC \u96fb\u5668\u96fb\u7e9c</li>\n<li>OTC17 OTC \u5316\u5b78\u751f\u6280</li>\n<li>OTC18 OTC \u73bb\u7483</li>\n<li>OTC20 OTC \u92fc\u9435\u5de5\u696d</li>\n<li>OTC21 OTC \u6a61\u81a0\u985e</li>\n<li>OTC22 OTC \u6c7d\u8eca\u985e</li>\n<li>OTC23 OTC \u96fb\u5b50\u985e</li>\n<li>OTC25 OTC \u5efa\u6750\u71df\u9020</li>\n<li>OTC26 OTC \u822a\u904b\u696d</li>\n<li>OTC27 OTC \u89c0\u5149\u9910\u65c5</li>\n<li>OTC28 OTC \u91d1\u878d\u696d</li>\n<li>OTC29 OTC \u767e\u8ca8\u985e</li>\n<li>OTC30 OTC \u8b49\u5238\u985e</li>\n<li>OTC32 \u6587\u5316\u5275\u610f\u696d</li>\n<li>OTC33 OTC \u8fb2\u696d\u79d1\u6280</li>\n<li>OTC34 OTC \u96fb\u5b50\u5546\u52d9</li>\n<li>OTC35 OTC \u7da0\u80fd\u74b0\u4fdd</li>\n<li>OTC36 OTC \u6578\u4f4d\u96f2\u7aef</li>\n<li>OTC37 OTC \u904b\u52d5\u4f11\u9592</li>\n<li>OTC38 OTC \u5c45\u5bb6\u751f\u6d3b</li>\n<li>OTC89 OTC \u5176\u5b83</li>\n<li>OTC97 OTC \u6cb9\u96fb\u71c3\u6c23\u696d</li>\n<li>\u91d1\u878d\u8207\u8b49\u5238\u696d</li>\n<li>\u4e00\u822c\u7522\u696d </li>\n</ul>\n<p>\n</p>\n\n<li>\n<p>main_ind_e(list or str)\uff0d\u4e3b\u7522\u696d\u5225(\u82f1)\u3002\uff08\u8acb\u8f38\u5165\u5b8c\u6574\u5b57\u4e32\uff0c\u4f8b\u5982\uff1a'M1100 Cement'\uff09\n    \n    \u9ede\u9078\u67e5\u770bvalid main_ind_e\uff1a\n    <pre>\n<ul>\n<li>M1100 Cement</li>\n<li>M1200 Foods</li>\n<li>M1300 Plastics</li>\n<li>M1400 Textiles</li>\n<li>M1500 Electric Machinery</li>\n<li>M1600 Electrical and Cable</li>\n<li>M1700 Chemical Biotechnology &amp; Medical Care</li>\n<li>M1800 Glass and Ceramics</li>\n<li>M1900 Paper and Pulp</li>\n<li>M2000 Iron and Steel</li>\n<li>M2100 Rubber</li>\n<li>M2200 Automobile</li>\n<li>M2300 Electronics</li>\n<li>M2500 Building Material and Construction</li>\n<li>M2600 Shipping and Transportation</li>\n<li>M2700 Tourism</li>\n<li>M2800 Financial Industry</li>\n<li>M2900 Trading and Consumers' Goods</li>\n<li>M3000 Securities</li>\n<li>M3500 TSE Green Energy and Environmental Services</li>\n<li>M3600 TSE Digital and Cloud Services</li>\n<li>M3700 TSE Sports and Leisure</li>\n<li>M3800 TSE Household</li>\n<li>M9700 Oil Gas and Electricity</li>\n<li>M9900 Others</li>\n<li>OTC12 OTC Foods</li>\n<li>OTC13 OTC Plastic</li>\n<li>OTC14 OTC Textile</li>\n<li>OTC15 OTC Electronical</li>\n<li>OTC16 OTC Wire &amp; Cable</li>\n<li>OTC17 OTC Chemical &amp; Biotech</li>\n<li>OTC18 OTC Glass</li>\n<li>OTC20 OTC Steel</li>\n<li>OTC21 OTC Rubbers</li>\n<li>OTC22 OTC Automobile</li>\n<li>OTC23 OTC Electronic</li>\n<li>OTC25 OTC Construction</li>\n<li>OTC26 OTC Transporation</li>\n<li>OTC27 OTC Tourism</li>\n<li>OTC28 OTC Banking</li>\n<li>OTC29 OTC Retailing</li>\n<li>OTC30 OTC Securities</li>\n<li>OTC32 Cultural &amp; Creative Industry</li>\n<li>OTC33 OTC Agricultural Science and Technology</li>\n<li>OTC34 OTC E-commerce</li>\n<li>OTC35 OTC Green Energy and Environmental Services</li>\n<li>OTC36 OTC Digital and Cloud Services</li>\n<li>OTC37 OTC Sports and Leisure</li>\n<li>OTC38 OTC Household</li>\n<li>OTC89 OTC Others</li>\n<li>OTC97 OTC Gas and Electricity Industry</li>\n<li>Financial and Securities Industry</li>\n<li>General Industry </li>\n</ul>\n<p>\n</p>\n\n<li>\n<p>sub_ind_c(list or str)\uff0d\u5b50\u7522\u696d\u5225(\u4e2d)\u3002\uff08\u8acb\u8f38\u5165\u5b8c\u6574\u5b57\u4e32\uff0c\u4f8b\u5982\uff1a'M1721 \u5316\u5b78\u5de5\u696d'\uff09\n    \n    \u9ede\u9078\u67e5\u770bvalid sub_ind_c\uff1a\n    <pre>\n<ul>\n<li>M1721 \u5316\u5b78\u5de5\u696d</li>\n<li>M1722 \u751f\u6280\u91ab\u7642\u696d</li>\n<li>M2324 \u534a\u5c0e\u9ad4\u696d</li>\n<li>M2325 \u96fb\u8166\u53ca\u9031\u908a\u8a2d\u5099\u696d</li>\n<li>M2326 \u5149\u96fb\u696d</li>\n<li>M2327 \u901a\u4fe1\u7db2\u8def\u696d</li>\n<li>M2328 \u96fb\u5b50\u96f6\u7d44\u4ef6</li>\n<li>M2329 \u96fb\u5b50\u901a\u8def\u696d</li>\n<li>M2330 \u8cc7\u8a0a\u670d\u52d9\u696d</li>\n<li>M2331 \u5176\u4ed6\u96fb\u5b50\u696d</li>\n<li>O1721 OTC \u5316\u5b78\u5de5\u696d</li>\n<li>O1722 OTC \u751f\u6280\u91ab\u7642</li>\n<li>O2324 OTC \u534a\u5c0e\u9ad4\u696d</li>\n<li>O2325 OTC \u96fb\u8166\u53ca\u9031\u908a\u8a2d\u5099\u696d</li>\n<li>O2326 OTC \u5149\u96fb\u696d</li>\n<li>O2327 OTC \u901a\u4fe1\u7db2\u8def\u696d</li>\n<li>O2328 OTC \u96fb\u5b50\u96f6\u7d44\u4ef6</li>\n<li>O2329 OTC \u96fb\u5b50\u901a\u8def\u696d</li>\n<li>O2330 OTC \u8cc7\u8a0a\u670d\u52d9\u696d</li>\n<li>O2331 OTC \u5176\u4ed6\u96fb\u5b50\u696d</li>\n</ul>\n<p>\n</p>\n\n<li>\n<p>sub_ind_e(list or str)\uff0d\u5b50\u7522\u696d\u5225(\u82f1)\u3002\uff08\u8acb\u8f38\u5165\u5b8c\u6574\u5b57\u4e32\uff0c\u4f8b\u5982\uff1a'M1721 Chemical'\uff09\n    \n    \u9ede\u9078\u67e5\u770bvalid sub_ind_e\uff1a\n    <pre>\n<ul>\n<li>M1721 Chemical</li>\n<li>M1722 Biotechnology and Medical Care</li>\n<li>M2324 Semiconductor</li>\n<li>M2325 Computer and Peripheral Equipment</li>\n<li>M2326 Optoelectronic</li>\n<li>M2327 Communications and Internet</li>\n<li>M2328 Electronic Parts and Components</li>\n<li>M2329 Electronic Products Distribution</li>\n<li>M2330 Information Service</li>\n<li>M2331 Other Electronic</li>\n<li>O1721 OTC Chemical Industry</li>\n<li>O1722 OTC Biotechnology and Medical Care Industry</li>\n<li>O2324 OTC Semiconductor Industry</li>\n<li>O2325 OTC Computer and Peripheral Equipment Industry</li>\n<li>O2326 OTC Optoelectronic Industry</li>\n<li>O2327 OTC Communications and Internet Industry</li>\n<li>O2328 OTC Electronic Parts and Components Industry</li>\n<li>O2329 OTC Electronic Products Distribution Industry</li>\n<li>O2330 OTC Information Service Industry</li>\n<li>O2331 OTC Other Electronic</li>\n</ul>\n<p>\n</p>\n\n<li>\n<p>idx_id(list or str)\uff0d\u6307\u6578\u540d\u7a31\u3002\uff08\u8acb\u8f38\u5165\u6307\u6578\u5c31\u597d\uff0c\u5f8c\u9762\u7684\u4e2d\u6587\u4e0d\u9700\u8f38\u5165\uff0c\u4f8b\u5982\uff1a'IX0001'\uff09</p>\n<p>\n\u9ede\u9078\u67e5\u770bvalid idx_id\uff1a\n<pre> \n<ul>\n<li>IX0001    \u52a0\u6b0a\u6307\u6578</li>\n<li>IX0002    \u53f0\u706350\u6307\u6578</li>\n<li>IX0003    \u53f0\u7063\u4e2d\u578b\u6307\u6578</li>\n<li>IX0006    \u53f0\u7063\u9ad8\u80a1\u606f\u6307\u6578</li>\n<li>IX0010    \u6c34\u6ce5\u5de5\u696d\u985e\u6307\u6578</li>\n<li>IX0011    \u98df\u54c1\u5de5\u696d\u985e\u6307\u6578</li>\n<li>IX0012    \u5851\u81a0\u5de5\u696d\u985e\u6307\u6578</li>\n<li>IX0016    \u7d21\u7e54\u7e96\u7dad\u985e\u6307\u6578</li>\n<li>IX0017    \u96fb\u6a5f\u6a5f\u68b0\u985e\u6307\u6578</li>\n<li>IX0018    \u96fb\u5668\u96fb\u7e9c\u985e\u6307\u6578</li>\n<li>IX0019    \u5316\u5b78\u751f\u6280\u91ab\u7642\u985e\u6307\u6578</li>\n<li>IX0020    \u5316\u5b78\u5de5\u696d\u6307\u6578</li>\n<li>IX0021    \u751f\u6280\u91ab\u7642\u6307\u6578</li>\n<li>IX0022    \u73bb\u7483\u9676\u74f7\u985e\u6307\u6578</li>\n<li>IX0023    \u9020\u7d19\u5de5\u696d\u985e\u6307\u6578</li>\n<li>IX0024    \u92fc\u9435\u5de5\u696d\u985e\u6307\u6578</li>\n<li>IX0025    \u6a61\u81a0\u985e\u6307\u6578</li>\n<li>IX0026    \u6c7d\u8eca\u5de5\u696d\u985e\u6307\u6578</li>\n<li>IX0027    \u96fb\u5b50\u985e\u6307\u6578</li>\n<li>IX0028    \u534a\u5c0e\u9ad4\u696d\u6307\u6578</li>\n<li>IX0029    \u96fb\u8166\u53ca\u9031\u908a\u8a2d\u5099\u696d\u6307\u6578</li>\n<li>IX0030    \u5149\u96fb\u696d\u6307\u6578</li>\n<li>IX0031    \u901a\u4fe1\u7db2\u8def\u696d\u6307\u6578</li>\n<li>IX0032    \u96fb\u5b50\u96f6\u7d44\u4ef6\u696d\u6307\u6578</li>\n<li>IX0033    \u96fb\u5b50\u901a\u8def\u696d\u6307\u6578</li>\n<li>IX0034    \u8cc7\u8a0a\u670d\u52d9\u696d\u6307\u6578</li>\n<li>IX0035    \u5176\u4ed6\u96fb\u5b50\u696d\u6307\u6578</li>\n<li>IX0036    \u5efa\u6750\u71df\u9020\u985e\u6307\u6578</li>\n<li>IX0037    \u822a\u904b\u696d\u985e\u6307\u6578</li>\n<li>IX0038    \u89c0\u5149\u4e8b\u696d\u985e\u6307\u6578</li>\n<li>IX0039    \u91d1\u878d\u4fdd\u96aa\u985e\u6307\u6578</li>\n<li>IX0040    \u8cbf\u6613\u767e\u8ca8\u985e\u6307\u6578</li>\n<li>IX0041    \u6cb9\u96fb\u71c3\u6c23\u696d\u6307\u6578</li>\n<li>IX0042    \u5176\u4ed6\u985e\u6307\u6578</li>\n<li>IX0043    OTC \u6307\u6578</li>\n<li>IX0044    OTC \u7d21\u7e54\u7e96\u7dad\u985e</li>\n<li>IX0045    OTC \u96fb\u6a5f\u6a5f\u68b0\u985e</li>\n<li>IX0046    OTC \u92fc\u9435\u985e</li>\n<li>IX0047    OTC \u96fb\u5b50\u985e</li>\n<li>IX0048    OTC \u71df\u9020\u5efa\u6750\u985e</li>\n<li>IX0049    OTC \u822a\u904b\u985e</li>\n<li>IX0050    OTC \u89c0\u5149\u985e\u6307\u6578</li>\n<li>IX0051    OTC \u5316\u5b78\u5de5\u696d\u6307\u6578</li>\n<li>IX0052    OTC \u751f\u6280\u91ab\u7642\u6307\u6578</li>\n<li>IX0053    OTC \u534a\u5c0e\u9ad4\u696d\u6307\u6578</li>\n<li>IX0054    OTC \u96fb\u8166\u53ca\u9031\u908a\u8a2d\u5099\u696d\u6307\u6578</li>\n<li>IX0055    OTC \u5149\u96fb\u696d\u6307\u6578</li>\n<li>IX0056    OTC \u901a\u4fe1\u7db2\u8def\u696d\u6307\u6578</li>\n<li>IX0057    OTC \u96fb\u5b50\u96f6\u7d44\u4ef6\u6307\u6578</li>\n<li>IX0058    OTC \u96fb\u5b50\u901a\u8def\u696d\u6307\u6578</li>\n<li>IX0059    OTC \u8cc7\u8a0a\u670d\u52d9\u696d\u6307\u6578</li>\n<li>IX0060    \u5bcc\u6ac3\u4e94\u5341\u6307\u6578</li>\n<li>IX0063    \u7dda\u4e0a\u904a\u6232\u6307\u6578</li>\n<li>IX0075    \u6587\u5316\u5275\u610f\u696d\u6307\u6578</li>\n<li>IX0082    \u81fa\u7063\u8b49\u5238\u4ea4\u6613\u6240\u516c\u53f8\u6cbb\u7406100 \u6307\u6578</li>\n<li>IX0085    \u6ac3\u8cb7\u6cbb\u7406</li>\n<li>IX0099    \u5176\u4ed6\u96fb\u5b50\u696d\u6307\u6578</li>\n<li>IX0118    \u6ac3\u8cb7\u5bcc\u6ac3200\u6307\u6578</li>\n</ul>\n<p>\n</p>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#returns","title":"Returns","text":"<p>List of symbols.</p>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#return-type","title":"Return type","text":"<p>list</p>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#note","title":"Note","text":"<ul>\n<li><code>main_ind_c</code>\u7684\u7279\u6b8a\u7522\u696d</li>\n<li>main_ind_c=<code>'\u91d1\u878d\u8207\u8b49\u5238\u696d'</code>\uff1a\u5c6c\u65bc\u4ee5\u4e0b4\u7a2e\u7522\u696d\u7684\u6240\u6709\u516c\u53f8<ul>\n<li>M2800 \u91d1\u878d\u696d</li>\n<li>OTC28 OTC \u91d1\u878d\u696d</li>\n<li>M3000 \u8a3c\u5238</li>\n<li>OTC30 OTC \u8b49\u5238\u985e</li>\n</ul>\n</li>\n<li>main_ind_c=<code>'\u4e00\u822c\u7522\u696d'</code>\uff1a\u975e\u4ee5\u4e0b4\u7a2e\u7522\u696d\u7684\u6240\u6709\u516c\u53f8<ul>\n<li>M2800 \u91d1\u878d\u696d</li>\n<li>OTC28 OTC \u91d1\u878d\u696d</li>\n<li>M3000 \u8a3c\u5238</li>\n<li>OTC30 OTC \u8b49\u5238\u985e</li>\n</ul>\n</li>\n<li><code>main_ind_e</code>\u7684\u7279\u6b8a\u7522\u696d</li>\n<li>main_ind_e=<code>'Financial and Securities Industry'</code>\uff1a\u5c6c\u65bc\u4ee5\u4e0b4\u7a2e\u7522\u696d\u7684\u6240\u6709\u516c\u53f8<ul>\n<li>M2800 Financial Industry</li>\n<li>OTC30 OTC Securities</li>\n<li>M3000 Securities</li>\n<li>OTC28 OTC Banking</li>\n</ul>\n</li>\n<li>main_ind_e=<code>'General Industry'</code>\uff1a\u975e\u4ee5\u4e0b4\u7a2e\u7522\u696d\u7684\u6240\u6709\u516c\u53f8<ul>\n<li>M2800 Financial Industry</li>\n<li>OTC30 OTC Securities</li>\n<li>M3000 Securities</li>\n<li>OTC28 OTC Banking</li>\n</ul>\n</li>\n</ul>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#mkt-mkt_bd_cmkt_bd_e","title":"\u5e02\u5834\u5225\uff08mkt\uff09 \u8207\u677f\u584a\u5225\uff08mkt_bd_c\u3001mkt_bd_e\uff09","text":"<p>\u4ee5 '\u666e\u901a\u80a1' \u70ba\u4f8b\uff08\u4e0d\u542bF\u80a1\u6216KY\u80a1\uff09\uff1a</p>\n<ul>\n<li>'\u666e\u901a\u80a1' \uff08stktp_c='\u666e\u901a\u80a1'\uff09\uff1a\u5305\u542b\u5728\u8b49\u5238\u4ea4\u6613\u6240\uff08mkt='TWSE'\uff09\u639b\u724c\u7684\u666e\u901a\u80a1 \u8207\u5728\u6ac3\u8cb7\u4e2d\u5fc3\uff08mkt='OTC'\uff09\u639b\u724c\u7684\u666e\u901a\u80a1\u3002</li>\n<li>\u5728\u8b49\u5238\u4ea4\u6613\u6240\u639b\u724c\u7684\u666e\u901a\u80a1\uff1a\u5305\u542b\u4e0a\u5e02\u4e00\u822c\u677f\uff08mkt_bd_e='TSE'\u3001mkt_bd_c='\u4e0a\u5e02\u4e00\u822c\u7248'\uff09 \u8207 \u4e0a\u5e02\u5275\u65b0\u677f\uff08mkt_bd_e='TIB'\u3001mkt_bd_c='\u5275\u65b0\u7248'\uff09\u3002</li>\n<li>\n<p>\u5728\u6ac3\u8cb7\u4e2d\u5fc3\u639b\u724c\u7684\u666e\u901a\u80a1\uff1a\u5305\u542b\u4e0a\u6ac3\u4e00\u822c\u677f\uff08mkt_bd_e='OTC'\u3001mkt_bd_c='\u4e0a\u6ac3\u4e00\u822c\u7248'\uff09\uff0c\u4e0d\u542b\u8208\u6ac3\u3002</p>\n</li>\n<li>\n<p>\u7d71\u6574\u4e0a\u8ff0\u95dc\u4fc2\uff1a</p>\n\n<p></p>\n\n</li>\n</ul>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#import-get_universe","title":"Import get_universe","text":"<pre><code>from zipline.sources.TEJ_Api_Data import get_universe\n</code></pre>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#examples","title":"Examples","text":"<p>\u5305\u542b\u4ee5\u4e0b\u4e5d\u500b\u7bc4\u4f8b\uff1a\n1. case1 \u53d6\u66fe\u7d93\u5728\u4e0a\u5e02\u4e00\u822c\u677f+\u4e0a\u6ac3\u4e00\u822c\u677f\u7684\u8b49\u5238\n2. case2 \u53d6\u66fe\u7d93\u5728\u8b49\u5238\u4ea4\u6613\u6240\uff0f\u6ac3\u8cb7\u4e2d\u5fc3\u639b\u724c\u7684\u8b49\u5238\n3. case3 \u53d6\u66fe\u7d93\u4e0a\u5e02+\u4e0a\u6ac3\u7684\u666e\u901a\u80a1\n4. case4 \u53d6\u5b50\u7522\u696d\u5225\u66fe\u7d93\u70ba\"M2324 \u534a\u5c0e\u9ad4\u696d\"\u7684\u8b49\u5238\n5. case5 \u53d6\u5b50\u7522\u696d\u5225\u66fe\u7d93\u70ba\"M2324 Semiconductor\"&amp;\"M2325 Computer and Peripheral Equipment\"\u7684\u8b49\u5238\n6. case6 \u53d6\u8b49\u5238\u7a2e\u985e\u70ba\"ETF\"\u53ca\"\u666e\u901a\u80a1\"\u4e14\u639b\u724c\u65bc\u8b49\u5238\u4ea4\u6613\u6240\u7684\u8b49\u5238\n7. case7 \u53d6\u66fe\u7d93\u70ba\"IX0002\"\uff08\u53f0\u706350\u6307\u6578\uff09\u6210\u4efd\u80a1\u7684\u8b49\u5238\n8. case8 \u53d6\u4e3b\u7522\u696d\u5225\u66fe\u7d93\u70ba\"M1100 \u6c34\u6ce5\u5de5\u696d\"\u4e14\u70ba\"IX0006\"\uff08\u53f0\u7063\u9ad8\u80a1\u606f\u6307\u6578\uff09\u6210\u4efd\u80a1\u7684\u8b49\u5238\n9. case9 \u53d6\u975e\u91d1\u878d\u696d\u7684\u666e\u901a\u80a1</p>\n<p></p>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#case1","title":"case1 \u53d6\u66fe\u7d93\u5728\u4e0a\u5e02\u4e00\u822c\u677f+\u4e0a\u6ac3\u4e00\u822c\u677f\u7684\u8b49\u5238\uff08\u4e0d\u9650\u65bc\u666e\u901a\u80a1\uff09","text":"<p>\u9019\u6a23\u7684\u4f7f\u7528\u65b9\u5f0f\u4e0d\u6703\u53d6\u51fa<code>mkt_bd_e</code>=TIB\uff08\u5275\u65b0\u677f\uff09\u7684\u8b49\u5238</p>\n<p>Return to Examples Menu</p>\n<pre><code># \u50c5\u986f\u793a\u524d10\u7b46\nget_universe(start, end, mkt_bd_e=['TSE','OTC'])[0:10]\n</code></pre>\n<pre><code>[2024-03-13 02:34:41.475876]: INFO: get_universe_TW: Filters\uff1a{'mkt_bd_e': ['TSE', 'OTC']}\n\n\nCurrently used TEJ API key call quota 37/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 110039/9223372036854775807 (0.0%)\n\n\n\n\n\n['0050',\n '0051',\n '0052',\n '0053',\n '0055',\n '0056',\n '0057',\n '0061',\n '006201',\n '006203']\n</code></pre>\n<p></p>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#case2","title":"case2 \u53d6\u66fe\u7d93\u5728\u8b49\u5238\u4ea4\u6613\u6240\uff0f\u6ac3\u8cb7\u4e2d\u5fc3\u639b\u724c\u7684\u8b49\u5238\uff08\u4e0d\u9650\u65bc\u666e\u901a\u80a1\uff09","text":"<p>Return to Examples Menu</p>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#_1","title":"\u53d6\u66fe\u7d93\u5728\u8b49\u5238\u4ea4\u6613\u6240\u639b\u724c\u7684\u8b49\u5238","text":"<pre><code># \u50c5\u986f\u793a\u524d10\u7b46\nget_universe(start, end, mkt=['TWSE'])[0:10]\n</code></pre>\n<pre><code>[2024-03-13 02:34:54.167604]: INFO: get_universe_TW: Filters\uff1a{'mkt': ['TWSE']}\n\n\nCurrently used TEJ API key call quota 38/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 565251/9223372036854775807 (0.0%)\n\n\n\n\n\n['0050',\n '0051',\n '0052',\n '0053',\n '0055',\n '0056',\n '0057',\n '0061',\n '006203',\n '006204']\n</code></pre>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#_2","title":"\u53d6\u66fe\u7d93\u5728\u6ac3\u8cb7\u4e2d\u5fc3\u639b\u724c\u7684\u8b49\u5238","text":"<pre><code># \u50c5\u986f\u793a\u524d10\u7b46\nget_universe(start, end, mkt=['OTC'])[0:10]\n</code></pre>\n<pre><code>[2024-03-13 02:35:25.138684]: INFO: get_universe_TW: Filters\uff1a{'mkt': ['OTC']}\n\n\nCurrently used TEJ API key call quota 39/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 837204/9223372036854775807 (0.0%)\n\n\n\n\n\n['006201',\n '00679B',\n '00687B',\n '00694B',\n '00695B',\n '00696B',\n '00697B',\n '00718B',\n '00719B',\n '00720B']\n</code></pre>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#case3-fky","title":"case3 \u53d6\u66fe\u7d93\u4e0a\u5e02+\u4e0a\u6ac3\u7684\u666e\u901a\u80a1\uff08\u4e0d\u542bF\u80a1\u6216KY\u80a1\uff09","text":"<ul>\n<li>\n<p>case1\u8207case2\u53d6\u51fa\u7684\u8b49\u5238\u4e0d\u9650\u65bc\u666e\u901a\u80a1\uff0c\u82e5\u50c5\u60f3\u53d6\u51fa\u666e\u901a\u80a1\uff08\u4e0d\u542bF\u80a1\u6216KY\u80a1\uff09\uff0c\u5247\u53ef\u4ee5\u65b0\u589e<code>stktp_c=['\u666e\u901a\u80a1']</code>\u7684\u689d\u4ef6\u3002</p>\n</li>\n<li>\n<p>\u4ee5\u4e0b\u5169\u7a2e\u65b9\u5f0f\u7686\u80fd\u53d6\u5f97\u66fe\u7d93\u4e0a\u5e02+\u4e0a\u6ac3\u7684\u666e\u901a\u80a1\uff08\u4e0d\u542bF\u80a1\u6216KY\u80a1\uff09\uff1a</p>\n</li>\n<li><code>get_universe(start, end, mkt=['TWSE','OTC'], stktp_c=['\u666e\u901a\u80a1'])</code></li>\n<li>\n<p><code>get_universe(start, end, mkt_bd_e=['TSE','OTC','TIB'], mkt=['TWSE','OTC'], stktp_c=['\u666e\u901a\u80a1'])</code></p>\n</li>\n<li>\n<p>\u82e5\u9700\u8981\u6392\u9664\u4e0a\u5e02\u5275\u65b0\u677f\uff08mkt_bd='TIB'\uff09 \u7684\u666e\u901a\u80a1\uff08\u4e0d\u542bF\u80a1\u6216KY\u80a1\uff09\uff0c\u53ef\u4f7f\u7528\uff1a</p>\n</li>\n<li><code>get_universe(start, end, mkt_bd_e=['TSE','OTC'], mkt=['TWSE','OTC'], stktp_c=['\u666e\u901a\u80a1'])</code></li>\n</ul>\n<p>Return to Examples Menu</p>\n<pre><code># \u50c5\u986f\u793a\u524d10\u7b46\nget_universe(start, end, mkt=['TWSE','OTC'], stktp_c=['\u666e\u901a\u80a1'])[0:10]\n</code></pre>\n<pre><code>[2024-03-13 02:35:34.084292]: INFO: get_universe_TW: Filters\uff1a{'mkt': ['TWSE', 'OTC'], 'stktp_c': ['\u666e\u901a\u80a1']}\n\n\nCurrently used TEJ API key call quota 40/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 1021182/9223372036854775807 (0.0%)\n\n\n\n\n\n['1101',\n '1102',\n '1103',\n '1104',\n '1108',\n '1109',\n '1110',\n '1201',\n '1203',\n '1210']\n</code></pre>\n<pre><code>get_universe(start, end, mkt_bd_e=['TSE','OTC','TIB'], mkt=['TWSE','OTC'], stktp_c=['\u666e\u901a\u80a1'])[0:10]\n</code></pre>\n<pre><code>[2024-03-13 02:35:47.903112]: INFO: get_universe_TW: Filters\uff1a{'mkt_bd_e': ['TSE', 'OTC', 'TIB'], 'mkt': ['TWSE', 'OTC'], 'stktp_c': ['\u666e\u901a\u80a1']}\n\n\nCurrently used TEJ API key call quota 41/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 1342349/9223372036854775807 (0.0%)\n\n\n\n\n\n['1101',\n '1102',\n '1103',\n '1104',\n '1108',\n '1109',\n '1110',\n '1201',\n '1203',\n '1210']\n</code></pre>\n<p></p>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#case4-m2324","title":"case4 \u53d6\u5b50\u7522\u696d\u5225\u66fe\u7d93\u70ba\"M2324 \u534a\u5c0e\u9ad4\u696d\"\u7684\u8b49\u5238","text":"<p>Return to Examples Menu</p>\n<pre><code># \u50c5\u986f\u793a\u524d10\u7b46\nget_universe(start, end, sub_ind_c=['M2324 \u534a\u5c0e\u9ad4\u696d'])[0:10]\n</code></pre>\n<pre><code>[2024-03-13 02:35:56.933903]: INFO: get_universe_TW: Filters\uff1a{'sub_ind_c': ['M2324 \u534a\u5c0e\u9ad4\u696d']}\n\n\nCurrently used TEJ API key call quota 42/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 1663516/9223372036854775807 (0.0%)\n\n\n\n\n\n['2302',\n '2303',\n '2329',\n '2330',\n '2337',\n '2338',\n '2342',\n '2344',\n '2351',\n '2363']\n</code></pre>\n<p></p>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#case5-m2324-semiconductorm2325-computer-and-peripheral-equipment","title":"case5 \u53d6\u5b50\u7522\u696d\u5225\u66fe\u7d93\u70ba\"M2324 Semiconductor\"&amp;\"M2325 Computer and Peripheral Equipment\"\u7684\u8b49\u5238","text":"<p>Return to Examples Menu</p>\n<pre><code># \u50c5\u986f\u793a\u524d10\u7b46\nget_universe(start, end, sub_ind_e=['M2324 Semiconductor',\n                                    'M2325 Computer and Peripheral Equipment'])[0:10]\n</code></pre>\n<pre><code>[2024-03-13 02:36:01.704376]: INFO: get_universe_TW: Filters\uff1a{'sub_ind_e': ['M2324 Semiconductor', 'M2325 Computer and Peripheral Equipment']}\n\n\nCurrently used TEJ API key call quota 43/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 1679021/9223372036854775807 (0.0%)\n\n\n\n\n\n['2301',\n '2302',\n '2303',\n '2305',\n '2324',\n '2329',\n '2330',\n '2331',\n '2337',\n '2338']\n</code></pre>\n<p></p>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#case6-etffky","title":"case6 \u53d6\u8b49\u5238\u7a2e\u985e\u70ba\"ETF\"\u53ca\"\u666e\u901a\u80a1\"\uff08\u4e0d\u542bF\u80a1\u6216KY\u80a1\uff09\u4e14\u639b\u724c\u65bc\u8b49\u5238\u4ea4\u6613\u6240\u7684\u8b49\u5238","text":"<p>Return to Examples Menu</p>\n<pre><code># \u50c5\u986f\u793a\u524d10\u7b46\nget_universe(start, end, stktp_c=['ETF', '\u666e\u901a\u80a1'], mkt=['TWSE'])[0:10]\n</code></pre>\n<pre><code>[2024-03-13 02:36:09.262084]: INFO: get_universe_TW: Filters\uff1a{'stktp_c': ['ETF', '\u666e\u901a\u80a1'], 'mkt': ['TWSE']}\n\n\nCurrently used TEJ API key call quota 44/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 1705929/9223372036854775807 (0.0%)\n\n\n\n\n\n['0050',\n '0051',\n '0052',\n '0053',\n '0055',\n '0056',\n '0057',\n '006203',\n '006204',\n '006208']\n</code></pre>\n<p></p>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#case7-ix000250","title":"case7 \u53d6\u66fe\u7d93\u70ba\"IX0002\"\uff08\u53f0\u706350\u6307\u6578\uff09\u6210\u4efd\u80a1\u7684\u8b49\u5238","text":"<p>Return to Examples Menu</p>\n<pre><code># \u50c5\u986f\u793a\u524d10\u7b46\nget_universe(start, end, idx_id='IX0002')[0:10]\n</code></pre>\n<pre><code>[2024-03-13 02:36:14.450108]: INFO: get_universe_TW: Filters\uff1a{'idx_id': ['IX0002']}\n\n\nCurrently used TEJ API key call quota 45/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 1885914/9223372036854775807 (0.0%)\n\n\n\n\n\n['1101',\n '1216',\n '1301',\n '1303',\n '1326',\n '1402',\n '1590',\n '1605',\n '2002',\n '2207']\n</code></pre>\n<p></p>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#case8-m1100-ix0006","title":"case8 \u53d6\u4e3b\u7522\u696d\u5225\u66fe\u7d93\u70ba\"M1100 \u6c34\u6ce5\u5de5\u696d\"\u4e14\u70ba\"IX0006\"\uff08\u53f0\u7063\u9ad8\u80a1\u606f\u6307\u6578\uff09\u6210\u4efd\u80a1\u7684\u8b49\u5238","text":"<p>Return to Examples Menu</p>\n<pre><code># \u50c5\u986f\u793a\u524d10\u7b46\nget_universe(start, end, main_ind_c='M1100 \u6c34\u6ce5\u5de5\u696d', idx_id='IX0006')[0:10]\n</code></pre>\n<pre><code>[2024-03-13 02:36:17.542984]: INFO: get_universe_TW: Filters\uff1a{'main_ind_c': 'M1100 \u6c34\u6ce5\u5de5\u696d', 'idx_id': ['IX0006']}\n\n\nCurrently used TEJ API key call quota 45/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 1885914/9223372036854775807 (0.0%)\n\n\n\n\n\n['1102']\n</code></pre>\n<p></p>"},{"location":"lecture/get_universe%E8%AA%AA%E6%98%8E/#case9-fky","title":"case9 \u53d6\u975e\u91d1\u878d\u696d\u7684\u666e\u901a\u80a1\uff08\u4e0d\u542bF\u80a1\u6216KY\u80a1\uff09","text":"<p>Return to Examples Menu</p>\n<pre><code># \u50c5\u986f\u793a\u524d10\u7b46\nget_universe(start, end, main_ind_c=['\u4e00\u822c\u7522\u696d']\n             , stktp_c='\u666e\u901a\u80a1')[0:10]\n</code></pre>\n<pre><code>[2024-03-13 02:36:23.861031]: INFO: get_universe_TW: Filters\uff1a{'main_ind_c': ['\u4e00\u822c\u7522\u696d'], 'stktp_c': '\u666e\u901a\u80a1'}\n\n\nCurrently used TEJ API key call quota 48/9223372036854775807 (0.0%)\nCurrently used TEJ API key data quota 1887612/9223372036854775807 (0.0%)\n\n\n\n\n\n['1101',\n '1102',\n '1103',\n '1104',\n '1108',\n '1109',\n '1110',\n '1201',\n '1203',\n '1210']\n</code></pre>"}]}